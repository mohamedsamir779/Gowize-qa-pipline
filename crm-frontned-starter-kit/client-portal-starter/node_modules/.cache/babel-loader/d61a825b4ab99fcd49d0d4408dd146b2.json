{"ast":null,"code":"// import {\n//   takeLatest, call \n// } from \"redux-saga/effects\";\n// import { eventChannel, END } from \"redux-saga\";\n// import { socket } from \"../../socket\";\n// import { INITIALIZE_SOCKET_MESSAGES } from \"./actionTypes\";\n// const pricingMessagesReceived = () => {\n//   return eventChannel((emitter) => {\n//     socket.on(\"pricing\", (msg) => {\n//       emitter(JSON.parse(msg));\n//     });\n//     return () => {\n//       emitter(END);\n//     };\n//   });\n// };\n// const orderBookMessagesReceived = (orderBookChannelNames = []) => {\n//   return eventChannel((emitter) => {\n//     orderBookChannelNames.forEach(channelName => {\n//       socket.on(channelName, (msg) => {\n//         emitter(JSON.parse(msg));\n//       });\n//     });\n//     return () => {\n//       emitter(END);\n//     };\n//   });\n// };\n// function * initializeSocketMessages({ payload }) {\n//   try {\n//     const {\n//       pricingChannelName,\n//       orderBookChannelNames,\n//     } = payload;\n//     const pricingChannel = yield call(pricingMessagesReceived, pricingChannelName);\n//     const orderBookChannel = yield call(orderBookMessagesReceived, orderBookChannelNames);\n//     // while (true) {\n//     //   const priceVal = yield take(pricingChannel);\n//     //   yield put(updateMarkets(priceVal));\n//     //   const orderBookVal = yield take(orderBookChannel);\n//     //   yield put(updateOrderBooks(orderBookVal));\n//     //   yield delay(1000)\n//     // }\n//   }\n//   catch (err){\n//     // socketChannel is still open in catch block\n//     // if we want end the socketChannel, we need close it explicitly\n//     // socketChannel.close()\n//   } \n// }\nfunction*socketsSaga(){// yield takeLatest(INITIALIZE_SOCKET_MESSAGES, initializeSocketMessages);\n}export default socketsSaga;","map":{"version":3,"names":["socketsSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/general/sockets/saga.js"],"sourcesContent":["// import {\n//   takeLatest, call \n// } from \"redux-saga/effects\";\n// import { eventChannel, END } from \"redux-saga\";\n\n// import { socket } from \"../../socket\";\n// import { INITIALIZE_SOCKET_MESSAGES } from \"./actionTypes\";\n\n// const pricingMessagesReceived = () => {\n//   return eventChannel((emitter) => {\n//     socket.on(\"pricing\", (msg) => {\n//       emitter(JSON.parse(msg));\n//     });\n//     return () => {\n//       emitter(END);\n//     };\n//   });\n// };\n\n// const orderBookMessagesReceived = (orderBookChannelNames = []) => {\n//   return eventChannel((emitter) => {\n//     orderBookChannelNames.forEach(channelName => {\n//       socket.on(channelName, (msg) => {\n//         emitter(JSON.parse(msg));\n//       });\n//     });\n//     return () => {\n//       emitter(END);\n//     };\n//   });\n// };\n\n\n// function * initializeSocketMessages({ payload }) {\n//   try {\n//     const {\n//       pricingChannelName,\n//       orderBookChannelNames,\n//     } = payload;\n//     const pricingChannel = yield call(pricingMessagesReceived, pricingChannelName);\n//     const orderBookChannel = yield call(orderBookMessagesReceived, orderBookChannelNames);\n//     // while (true) {\n//     //   const priceVal = yield take(pricingChannel);\n//     //   yield put(updateMarkets(priceVal));\n\n//     //   const orderBookVal = yield take(orderBookChannel);\n//     //   yield put(updateOrderBooks(orderBookVal));\n//     //   yield delay(1000)\n//     // }\n//   }\n//   catch (err){\n//     // socketChannel is still open in catch block\n//     // if we want end the socketChannel, we need close it explicitly\n//     // socketChannel.close()\n//   } \n// }\n\nfunction* socketsSaga() {\n  // yield takeLatest(INITIALIZE_SOCKET_MESSAGES, initializeSocketMessages);\n}\n\nexport default socketsSaga;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAUA,WAAWA,CAAA,CAAG,CACtB;AAAA,CAGF,cAAe,CAAAA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}