{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen[\"default\"])(_enUs[\"default\"]);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\nvar wordHyphenation = function wordHyphenation(options, word) {\n  if (R.isNil(word)) return [];\n  if (cache[word]) return cache[word];\n  cache[word] = getParts(word);\n  return cache[word];\n};\nvar _default = R.curryN(2, wordHyphenation);\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_hyphen","_enUs","SOFT_HYPHEN","hyphenator","splitHyphen","split","cache","getParts","ifElse","contains","o","wordHyphenation","options","word","isNil","_default","curryN"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/node_modules/@react-pdf/textkit/engines/wordHyphenation/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen[\"default\"])(_enUs[\"default\"]);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\n\nvar wordHyphenation = function wordHyphenation(options, word) {\n  if (R.isNil(word)) return [];\n  if (cache[word]) return cache[word];\n  cache[word] = getParts(word);\n  return cache[word];\n};\n\nvar _default = R.curryN(2, wordHyphenation);\n\nexports[\"default\"] = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAEpF,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAA+C,CAAC;AAEtFE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AAE3B,IAAIE,CAAC,GAAGH,uBAAuB,CAACD,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIK,OAAO,GAAGN,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvD,IAAIM,KAAK,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEpE,IAAIO,WAAW,GAAG,MAAM;AACxB,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAEH,OAAO,CAAC,SAAS,CAAC,EAAEC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC1D,IAAIG,WAAW,GAAGL,CAAC,CAACM,KAAK,CAACH,WAAW,CAAC;AACtC,IAAII,KAAK,GAAG,CAAC,CAAC;AACd,IAAIC,QAAQ,GAAGR,CAAC,CAACS,MAAM,CAACT,CAAC,CAACU,QAAQ,CAACP,WAAW,CAAC,EAAEE,WAAW,EAAEL,CAAC,CAACW,CAAC,CAACN,WAAW,EAAED,UAAU,CAAC,CAAC;AAE3F,IAAIQ,eAAe,GAAG,SAASA,eAAeA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC5D,IAAId,CAAC,CAACe,KAAK,CAACD,IAAI,CAAC,EAAE,OAAO,EAAE;EAC5B,IAAIP,KAAK,CAACO,IAAI,CAAC,EAAE,OAAOP,KAAK,CAACO,IAAI,CAAC;EACnCP,KAAK,CAACO,IAAI,CAAC,GAAGN,QAAQ,CAACM,IAAI,CAAC;EAC5B,OAAOP,KAAK,CAACO,IAAI,CAAC;AACpB,CAAC;AAED,IAAIE,QAAQ,GAAGhB,CAAC,CAACiB,MAAM,CAAC,CAAC,EAAEL,eAAe,CAAC;AAE3Cd,OAAO,CAAC,SAAS,CAAC,GAAGkB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}