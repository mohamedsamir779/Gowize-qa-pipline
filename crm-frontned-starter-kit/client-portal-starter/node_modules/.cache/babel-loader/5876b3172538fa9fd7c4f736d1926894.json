{"ast":null,"code":"import{takeEvery,put,call}from\"redux-saga/effects\";import{FETCH_WALLET_REPORT_START,FETCH_WALLETS_START,IB_WALLET_TRANSFER_START,REQUEST_WALLET_FX_TRANSFER_START}from\"./actionTypes\";import{fetchWalletsAPI,createWalletTransferRequest,fetchReportsAPI,createIbWalletTransferAPI}from\"../../apis/wallets\";import{createIbWalletTransferError,createIbWalletTransferSuccess,createWalletTransferError,createWalletTransferSuccess,fetchReportFailed,fetchReportSuccess,fetchWalletsFailed,fetchWalletsSuccess}from\"./actions\";import{showErrorNotification,showSuccessNotification}from\"store/general/notifications/actions\";function*fetchWallets(params){try{const result=yield call(fetchWalletsAPI,params);yield put(fetchWalletsSuccess(result));}catch(error){yield put(fetchWalletsFailed(error));}}function createWalletRequest(_ref){let{payload}=_ref;return function*(){try{const response=yield call(createWalletTransferRequest,{payload});yield put(createWalletTransferSuccess(response));yield put(showSuccessNotification(\"Transfer Request Sent Successfully\"));}catch(error){yield put(createWalletTransferError(error));yield put(showErrorNotification((error===null||error===void 0?void 0:error.message)||\"Something went wrong\"));}}();}function createIbWalletTransfer(_ref2){let{payload}=_ref2;return function*(){try{const response=yield call(createIbWalletTransferAPI,{payload});yield put(createIbWalletTransferSuccess(response));yield put(showSuccessNotification(\"Transfer was successful\"));}catch(error){yield put(createIbWalletTransferError(error));yield put(showErrorNotification((error===null||error===void 0?void 0:error.message)||\"Something went wrong\"));}}();}function fetchReports(_ref3){let{payload}=_ref3;return function*(){try{const result=yield call(fetchReportsAPI,payload);yield put(fetchReportSuccess(result));}catch(error){yield put(fetchReportFailed(error));}}();}function*WatchWallets(){yield takeEvery(FETCH_WALLETS_START,fetchWallets);yield takeEvery(REQUEST_WALLET_FX_TRANSFER_START,createWalletRequest);yield takeEvery(IB_WALLET_TRANSFER_START,createIbWalletTransfer);yield takeEvery(FETCH_WALLET_REPORT_START,fetchReports);}export default WatchWallets;","map":{"version":3,"names":["takeEvery","put","call","FETCH_WALLET_REPORT_START","FETCH_WALLETS_START","IB_WALLET_TRANSFER_START","REQUEST_WALLET_FX_TRANSFER_START","fetchWalletsAPI","createWalletTransferRequest","fetchReportsAPI","createIbWalletTransferAPI","createIbWalletTransferError","createIbWalletTransferSuccess","createWalletTransferError","createWalletTransferSuccess","fetchReportFailed","fetchReportSuccess","fetchWalletsFailed","fetchWalletsSuccess","showErrorNotification","showSuccessNotification","fetchWallets","params","result","error","createWalletRequest","_ref","payload","response","message","createIbWalletTransfer","_ref2","fetchReports","_ref3","WatchWallets"],"sources":["/home/ubuntu/king/portal/client-portal-starter/src/store/wallets/saga.js"],"sourcesContent":["import {\n  takeEvery, put, call \n} from \"redux-saga/effects\";\nimport {\n  FETCH_WALLET_REPORT_START,\n  FETCH_WALLETS_START,\n  IB_WALLET_TRANSFER_START,\n  REQUEST_WALLET_FX_TRANSFER_START\n} from \"./actionTypes\";\nimport {\n  fetchWalletsAPI,\n  createWalletTransferRequest,\n  fetchReportsAPI,\n  createIbWalletTransferAPI\n} from \"../../apis/wallets\";\nimport {\n  createIbWalletTransferError,\n  createIbWalletTransferSuccess,\n  createWalletTransferError,\n  createWalletTransferSuccess,\n  fetchReportFailed,\n  fetchReportSuccess,\n  fetchWalletsFailed,\n  fetchWalletsSuccess\n} from \"./actions\";\nimport { showErrorNotification, showSuccessNotification } from \"store/general/notifications/actions\";\n\nfunction* fetchWallets(params) {\n  try {\n    const result = yield call(fetchWalletsAPI, params);\n    yield put(fetchWalletsSuccess(result));\n  } catch (error) {\n    yield put(fetchWalletsFailed(error));\n  }\n}\n\nfunction* createWalletRequest({ payload }) {\n  try {\n    const response = yield call(createWalletTransferRequest, { payload });\n    yield put(createWalletTransferSuccess(response));\n    yield put(showSuccessNotification(\"Transfer Request Sent Successfully\"));\n  } catch (error) {\n    yield put(createWalletTransferError(error));\n    yield put(showErrorNotification(error?.message || \"Something went wrong\"));\n  }\n}\n\nfunction* createIbWalletTransfer({ payload }) {\n  try {\n    const response = yield call(createIbWalletTransferAPI, { payload });\n    yield put(createIbWalletTransferSuccess(response));\n    yield put(showSuccessNotification(\"Transfer was successful\"));\n  } catch (error) {\n    yield put(createIbWalletTransferError(error));\n    yield put(showErrorNotification(error?.message || \"Something went wrong\"));\n  }\n}\n\nfunction* fetchReports({ payload }) {\n  try {\n    const result = yield call(fetchReportsAPI, payload);\n    yield put(fetchReportSuccess(result));\n  } catch (error) {\n    yield put(fetchReportFailed(error));\n  }\n}\n\nfunction* WatchWallets() {\n  yield takeEvery(FETCH_WALLETS_START, fetchWallets);\n  yield takeEvery(REQUEST_WALLET_FX_TRANSFER_START, createWalletRequest);\n  yield takeEvery(IB_WALLET_TRANSFER_START, createIbWalletTransfer);\n  yield takeEvery(FETCH_WALLET_REPORT_START, fetchReports);\n}\n\n\nexport default WatchWallets;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}