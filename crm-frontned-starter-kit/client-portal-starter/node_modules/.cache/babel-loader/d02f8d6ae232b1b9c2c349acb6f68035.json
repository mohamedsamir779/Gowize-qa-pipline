{"ast":null,"code":"// eslint-disable-next-line object-curly-newline\nimport{call,put,takeEvery}from\"redux-saga/effects\";import{SUBSCRIBE_PUSH_NOTIFICATION,UNSUBSCRIBE_PUSH_NOTIFICATION}from\"./actionTypes\";import{subscribePushNotificationSuccess,subscribePushNotificationError,unsubscribePushNotificationsSuccess,unsubscribePushNotificationsError}from\"./actions\";import*as api from\"../../../apis/subscriptions\";import{showErrorNotification,showSuccessNotification}from\"store/general/notifications/actions\";import{updatePushNotificationOption}from\"store/actions\";function subscribePushNotification(_ref){let{payload}=_ref;return function*(){try{const{data}=yield call(api.subscribePushNotification,payload);// eslint-disable-next-line no-console\nconsole.log(\"data\",data);yield put(subscribePushNotificationSuccess());yield put(showSuccessNotification(\"Push notification subscribed successfully\"));yield put(updatePushNotificationOption(true));}catch(error){yield put(subscribePushNotificationError(error));yield put(showErrorNotification(\"Push notification subscription failed\"));}}();}function unSubscribePushNotifications(_ref2){let{payload}=_ref2;return function*(){try{const{data}=yield call(api.unsubscribePushNotification,payload);yield put(unsubscribePushNotificationsSuccess(data));yield put(showSuccessNotification(\"Push notification unsubscribed successfully\"));yield put(updatePushNotificationOption(false));}catch(error){yield put(unsubscribePushNotificationsError(error));yield put(showErrorNotification(\"Push notification unsubscription failed\"));}}();}function*subscriptionsSaga(){yield takeEvery(SUBSCRIBE_PUSH_NOTIFICATION,subscribePushNotification);yield takeEvery(UNSUBSCRIBE_PUSH_NOTIFICATION,unSubscribePushNotifications);}export default subscriptionsSaga;","map":{"version":3,"names":["call","put","takeEvery","SUBSCRIBE_PUSH_NOTIFICATION","UNSUBSCRIBE_PUSH_NOTIFICATION","subscribePushNotificationSuccess","subscribePushNotificationError","unsubscribePushNotificationsSuccess","unsubscribePushNotificationsError","api","showErrorNotification","showSuccessNotification","updatePushNotificationOption","subscribePushNotification","_ref","payload","data","console","log","error","unSubscribePushNotifications","_ref2","unsubscribePushNotification","subscriptionsSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/general/subscriptions/saga.js"],"sourcesContent":["// eslint-disable-next-line object-curly-newline\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nimport {\n  SUBSCRIBE_PUSH_NOTIFICATION,\n  UNSUBSCRIBE_PUSH_NOTIFICATION,\n} from \"./actionTypes\";\n\nimport {\n  subscribePushNotificationSuccess,\n  subscribePushNotificationError,\n  unsubscribePushNotificationsSuccess,\n  unsubscribePushNotificationsError,\n} from \"./actions\";\n\nimport * as api from \"../../../apis/subscriptions\";\nimport {\n  showErrorNotification,\n  showSuccessNotification,\n} from \"store/general/notifications/actions\";\nimport { updatePushNotificationOption } from \"store/actions\";\n\nfunction* subscribePushNotification({ payload }) {\n  try {\n    const { data } = yield call(api.subscribePushNotification, payload);\n    // eslint-disable-next-line no-console\n    console.log(\"data\", data);\n\n    yield put(subscribePushNotificationSuccess());\n    yield put(\n      showSuccessNotification(\"Push notification subscribed successfully\")\n    );\n    yield put(updatePushNotificationOption(true));\n  } catch (error) {\n    yield put(subscribePushNotificationError(error));\n    yield put(showErrorNotification(\"Push notification subscription failed\"));\n  }\n}\n\nfunction* unSubscribePushNotifications({ payload }) {\n  try {\n    const { data } = yield call(api.unsubscribePushNotification, payload);\n    yield put(unsubscribePushNotificationsSuccess(data));\n    yield put(\n      showSuccessNotification(\"Push notification unsubscribed successfully\")\n    );\n    yield put(updatePushNotificationOption(false));\n  } catch (error) {\n    yield put(unsubscribePushNotificationsError(error));\n    yield put(showErrorNotification(\"Push notification unsubscription failed\"));\n  }\n}\n\nfunction* subscriptionsSaga() {\n  yield takeEvery(SUBSCRIBE_PUSH_NOTIFICATION, subscribePushNotification);\n  yield takeEvery(UNSUBSCRIBE_PUSH_NOTIFICATION, unSubscribePushNotifications);\n}\n\nexport default subscriptionsSaga;\n"],"mappings":"AAAA;AACA,OAASA,IAAI,CAAEC,GAAG,CAAEC,SAAS,KAAQ,oBAAoB,CAEzD,OACEC,2BAA2B,CAC3BC,6BAA6B,KACxB,eAAe,CAEtB,OACEC,gCAAgC,CAChCC,8BAA8B,CAC9BC,mCAAmC,CACnCC,iCAAiC,KAC5B,WAAW,CAElB,MAAO,GAAK,CAAAC,GAAG,KAAM,6BAA6B,CAClD,OACEC,qBAAqB,CACrBC,uBAAuB,KAClB,qCAAqC,CAC5C,OAASC,4BAA4B,KAAQ,eAAe,CAE5D,QAAU,CAAAC,yBAAyBA,CAAAC,IAAA,KAAC,CAAEC,OAAQ,CAAC,CAAAD,IAAA,mBAAE,CAC/C,GAAI,CACF,KAAM,CAAEE,IAAK,CAAC,CAAG,KAAM,CAAAhB,IAAI,CAACS,GAAG,CAACI,yBAAyB,CAAEE,OAAO,CAAC,CACnE;AACAE,OAAO,CAACC,GAAG,CAAC,MAAM,CAAEF,IAAI,CAAC,CAEzB,KAAM,CAAAf,GAAG,CAACI,gCAAgC,CAAC,CAAC,CAAC,CAC7C,KAAM,CAAAJ,GAAG,CACPU,uBAAuB,CAAC,2CAA2C,CACrE,CAAC,CACD,KAAM,CAAAV,GAAG,CAACW,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAC/C,CAAE,MAAOO,KAAK,CAAE,CACd,KAAM,CAAAlB,GAAG,CAACK,8BAA8B,CAACa,KAAK,CAAC,CAAC,CAChD,KAAM,CAAAlB,GAAG,CAACS,qBAAqB,CAAC,uCAAuC,CAAC,CAAC,CAC3E,CACF,CAAC,IAED,QAAU,CAAAU,4BAA4BA,CAAAC,KAAA,KAAC,CAAEN,OAAQ,CAAC,CAAAM,KAAA,mBAAE,CAClD,GAAI,CACF,KAAM,CAAEL,IAAK,CAAC,CAAG,KAAM,CAAAhB,IAAI,CAACS,GAAG,CAACa,2BAA2B,CAAEP,OAAO,CAAC,CACrE,KAAM,CAAAd,GAAG,CAACM,mCAAmC,CAACS,IAAI,CAAC,CAAC,CACpD,KAAM,CAAAf,GAAG,CACPU,uBAAuB,CAAC,6CAA6C,CACvE,CAAC,CACD,KAAM,CAAAV,GAAG,CAACW,4BAA4B,CAAC,KAAK,CAAC,CAAC,CAChD,CAAE,MAAOO,KAAK,CAAE,CACd,KAAM,CAAAlB,GAAG,CAACO,iCAAiC,CAACW,KAAK,CAAC,CAAC,CACnD,KAAM,CAAAlB,GAAG,CAACS,qBAAqB,CAAC,yCAAyC,CAAC,CAAC,CAC7E,CACF,CAAC,IAED,SAAUa,iBAAiBA,CAAA,CAAG,CAC5B,KAAM,CAAArB,SAAS,CAACC,2BAA2B,CAAEU,yBAAyB,CAAC,CACvE,KAAM,CAAAX,SAAS,CAACE,6BAA6B,CAAEgB,4BAA4B,CAAC,CAC9E,CAEA,cAAe,CAAAG,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}