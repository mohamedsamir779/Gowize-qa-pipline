{"ast":null,"code":"import{getIbTransactionsAPI,internaltransferAPI}from\"apis/forex/ib\";import{addWithdrawalAPI,fetchWithdrawalGatewaysAPI}from\"apis/forex/transactions\";import{put,call,takeLatest}from\"redux-saga/effects\";import{showErrorNotification,showSuccessNotification}from\"store/general/notifications/actions\";import{addWithdrawalFail,addWithdrawalSuccess,fetchWithdrawalsGatewaysSuccess,ibInternalTransferFailed}from\"./actions\";import{GET_IB_DEPOSITS_SUCCCESS,GET_IB_WITHDRAWS_SUCCCESS,GET_IB_DEPOSITS_START,GET_IB_WITHDRAWS_START,IB_INTERNAL_TRANSFER_START,IB_INTERNAL_TRANSFER_SUCCESS,FETCH_WITHDRAWALS_GATEWAYS_START,ADD_WITHDRAWAL_REQUESTED}from\"./actionTypes\";function fetchWithdrawalGateways(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return function*(){try{const gateways=yield call(fetchWithdrawalGatewaysAPI,params);yield put(fetchWithdrawalsGatewaysSuccess(gateways));}catch(error){}}();}function*addWithdrawal(params){try{const data=yield call(addWithdrawalAPI,params);yield put(addWithdrawalSuccess(data));yield put(showSuccessNotification(\"Withdrawal Added Successfully\"));}catch(err){yield put(addWithdrawalFail(err.message));yield put(showErrorNotification(err.message));}}function getTransactions(_ref){let{payload}=_ref;return function*(){const{result}=yield call(getIbTransactionsAPI,payload);if(payload.type===\"DEPOSIT\")yield put({type:GET_IB_DEPOSITS_SUCCCESS,payload:result});if(payload.type===\"WITHDRAW\")yield put({type:GET_IB_WITHDRAWS_SUCCCESS,payload:result});}();}function ibInternalTransfer(_ref2){let{payload}=_ref2;return function*(){try{const{result}=yield call(internaltransferAPI,payload);if(result&&result.status===\"APPROVED\"){yield put({type:IB_INTERNAL_TRANSFER_SUCCESS});yield put(showSuccessNotification(\"Transfered done successfully\"));}}catch(error){yield put(ibInternalTransferFailed(error));yield put(showErrorNotification(error.message));}}();}function*transactionsSaga(){yield takeLatest(FETCH_WITHDRAWALS_GATEWAYS_START,fetchWithdrawalGateways);yield takeLatest(ADD_WITHDRAWAL_REQUESTED,addWithdrawal);yield takeLatest(GET_IB_DEPOSITS_START,getTransactions);yield takeLatest(GET_IB_WITHDRAWS_START,getTransactions);yield takeLatest(IB_INTERNAL_TRANSFER_START,ibInternalTransfer);}export default transactionsSaga;","map":{"version":3,"names":["getIbTransactionsAPI","internaltransferAPI","addWithdrawalAPI","fetchWithdrawalGatewaysAPI","put","call","takeLatest","showErrorNotification","showSuccessNotification","addWithdrawalFail","addWithdrawalSuccess","fetchWithdrawalsGatewaysSuccess","ibInternalTransferFailed","GET_IB_DEPOSITS_SUCCCESS","GET_IB_WITHDRAWS_SUCCCESS","GET_IB_DEPOSITS_START","GET_IB_WITHDRAWS_START","IB_INTERNAL_TRANSFER_START","IB_INTERNAL_TRANSFER_SUCCESS","FETCH_WITHDRAWALS_GATEWAYS_START","ADD_WITHDRAWAL_REQUESTED","fetchWithdrawalGateways","params","arguments","length","undefined","gateways","error","addWithdrawal","data","err","message","getTransactions","_ref","payload","result","type","ibInternalTransfer","_ref2","status","transactionsSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/forex/ib/transactions/saga.js"],"sourcesContent":["import {\n  getIbTransactionsAPI, internaltransferAPI\n} from \"apis/forex/ib\";\nimport { addWithdrawalAPI, fetchWithdrawalGatewaysAPI } from \"apis/forex/transactions\";\n\nimport {\n  put, call,  takeLatest, \n} from \"redux-saga/effects\";\nimport { showErrorNotification, showSuccessNotification } from \"store/general/notifications/actions\";\nimport {\n  addWithdrawalFail, \n  addWithdrawalSuccess, \n  fetchWithdrawalsGatewaysSuccess,\n  ibInternalTransferFailed\n} from \"./actions\";\nimport {\n  GET_IB_DEPOSITS_SUCCCESS, GET_IB_WITHDRAWS_SUCCCESS,\n  GET_IB_DEPOSITS_START, GET_IB_WITHDRAWS_START,\n  IB_INTERNAL_TRANSFER_START, IB_INTERNAL_TRANSFER_SUCCESS,\n  FETCH_WITHDRAWALS_GATEWAYS_START, ADD_WITHDRAWAL_REQUESTED \n} from \"./actionTypes\";\n\nfunction * fetchWithdrawalGateways(params = {}){\n  try {\n    const gateways = yield call(fetchWithdrawalGatewaysAPI, params);\n    yield put(fetchWithdrawalsGatewaysSuccess(gateways));\n  } catch (error ){}\n}\nfunction * addWithdrawal(params){\n  try {\n    const data = yield call(addWithdrawalAPI, params);\n    yield put(addWithdrawalSuccess(data));\n    yield put(showSuccessNotification(\"Withdrawal Added Successfully\"));\n  } catch (err){\n    yield put(addWithdrawalFail(err.message));\n    yield put(showErrorNotification(err.message));  }\n}\n\nfunction* getTransactions({ payload }) {\n  const { result } = yield call(getIbTransactionsAPI, payload);\n  if (payload.type === \"DEPOSIT\")\n    yield put({\n      type: GET_IB_DEPOSITS_SUCCCESS,\n      payload: result \n    });\n  if (payload.type === \"WITHDRAW\")\n    yield put({\n      type: GET_IB_WITHDRAWS_SUCCCESS,\n      payload: result \n    });\n}\n\nfunction* ibInternalTransfer({ payload }) {\n  try {\n    const { result } = yield call(internaltransferAPI, payload);\n    if (result && result.status === \"APPROVED\"){\n      yield put({\n        type: IB_INTERNAL_TRANSFER_SUCCESS\n      });\n      yield put(showSuccessNotification(\"Transfered done successfully\"));\n    }\n  } catch (error) {\n    yield put(ibInternalTransferFailed(error));\n    yield put(showErrorNotification(error.message));\n  }\n}\n\nfunction* transactionsSaga() {\n  yield takeLatest(FETCH_WITHDRAWALS_GATEWAYS_START, fetchWithdrawalGateways);\n  yield takeLatest(ADD_WITHDRAWAL_REQUESTED, addWithdrawal);\n  yield takeLatest(GET_IB_DEPOSITS_START, getTransactions);\n  yield takeLatest(GET_IB_WITHDRAWS_START, getTransactions);\n  yield takeLatest(IB_INTERNAL_TRANSFER_START, ibInternalTransfer);\n}\n    \nexport default transactionsSaga;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}