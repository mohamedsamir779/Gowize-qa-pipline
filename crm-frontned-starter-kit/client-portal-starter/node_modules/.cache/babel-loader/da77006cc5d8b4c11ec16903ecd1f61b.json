{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/king/portal/client-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{verifyCodeAPI,generateQRCodeAPI}from\"apis/auth\";// eslint-disable-next-line object-curly-newline\nimport{call,put,takeEvery}from\"redux-saga/effects\";import{toggleCurrentModal}from\"store/actions\";import{showErrorNotification,showSuccessNotification}from\"store/general/notifications/actions\";import{generateQRCodeSuccess,verify2FACodeFail,verify2FACodeSuccess,generateQRCodeError}from\"./actions\";import{GENERATE_QR_CODE_START,VERIFY_TWO_FACTOR_CODE_START}from\"./actionTypes\";function*generateQRCode(params){try{const data=yield call(generateQRCodeAPI,params.payload);const{status,result}=data;if(status)yield put(generateQRCodeSuccess(result));}catch(error){yield put(generateQRCodeError(error.message));yield put(showErrorNotification(error.message));}}function verifyCode(_ref){let{payload}=_ref;return function*(){try{const{history,type}=payload;delete payload.history;const data=yield call(verifyCodeAPI,payload);const{result,status}=data;if(type===\"login\"){if(status&&result.token){localStorage.setItem(\"authUser\",JSON.stringify(result));yield put(verify2FACodeSuccess(data));yield put(toggleCurrentModal(\"\"));history.push(\"/dashboard\");}}else{yield put(verify2FACodeSuccess(_objectSpread(_objectSpread({},data),{},{type})));yield put(showSuccessNotification(\"Verified succcessfully\"));}}catch(error){yield put(verify2FACodeFail(error.message));yield put(showErrorNotification(error.message));}}();}function*twoFactorAuthSaga(){yield takeEvery(GENERATE_QR_CODE_START,generateQRCode);yield takeEvery(VERIFY_TWO_FACTOR_CODE_START,verifyCode);}export default twoFactorAuthSaga;","map":{"version":3,"names":["verifyCodeAPI","generateQRCodeAPI","call","put","takeEvery","toggleCurrentModal","showErrorNotification","showSuccessNotification","generateQRCodeSuccess","verify2FACodeFail","verify2FACodeSuccess","generateQRCodeError","GENERATE_QR_CODE_START","VERIFY_TWO_FACTOR_CODE_START","generateQRCode","params","data","payload","status","result","error","message","verifyCode","_ref","history","type","token","localStorage","setItem","JSON","stringify","push","_objectSpread","twoFactorAuthSaga"],"sources":["/home/ubuntu/king/portal/client-portal-starter/src/store/general/auth/twoFactorAuth/saga.js"],"sourcesContent":["import { verifyCodeAPI, generateQRCodeAPI } from \"apis/auth\";\n// eslint-disable-next-line object-curly-newline\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport { toggleCurrentModal } from \"store/actions\";\nimport {\n  showErrorNotification,\n  showSuccessNotification,\n} from \"store/general/notifications/actions\";\nimport {\n  generateQRCodeSuccess,\n  verify2FACodeFail,\n  verify2FACodeSuccess,\n  generateQRCodeError,\n} from \"./actions\";\n\nimport {\n  GENERATE_QR_CODE_START,\n  VERIFY_TWO_FACTOR_CODE_START,\n} from \"./actionTypes\";\n\nfunction* generateQRCode(params) {\n  try {\n    const data = yield call(generateQRCodeAPI, params.payload);\n    const { status, result } = data;\n    if (status) yield put(generateQRCodeSuccess(result));\n  } catch (error) {\n    yield put(generateQRCodeError(error.message));\n    yield put(showErrorNotification(error.message));\n  }\n}\n\nfunction* verifyCode({ payload }) {\n  try {\n    const { history, type } = payload;\n    delete payload.history;\n    const data = yield call(verifyCodeAPI, payload);\n    const { result, status } = data;\n    if (type === \"login\") {\n      if (status && result.token) {\n        localStorage.setItem(\"authUser\", JSON.stringify(result));\n        yield put(verify2FACodeSuccess(data));\n        yield put(toggleCurrentModal(\"\"));\n        history.push(\"/dashboard\");\n      }\n    } else {\n      yield put(\n        verify2FACodeSuccess({\n          ...data,\n          type,\n        })\n      );\n      yield put(showSuccessNotification(\"Verified succcessfully\"));\n    }\n  } catch (error) {\n    yield put(verify2FACodeFail(error.message));\n    yield put(showErrorNotification(error.message));\n  }\n}\n\nfunction* twoFactorAuthSaga() {\n  yield takeEvery(GENERATE_QR_CODE_START, generateQRCode);\n  yield takeEvery(VERIFY_TWO_FACTOR_CODE_START, verifyCode);\n}\n\nexport default twoFactorAuthSaga;\n"],"mappings":"mIAAA,OAASA,aAAa,CAAEC,iBAAiB,KAAQ,WAAW,CAC5D;AACA,OAASC,IAAI,CAAEC,GAAG,CAAEC,SAAS,KAAQ,oBAAoB,CACzD,OAASC,kBAAkB,KAAQ,eAAe,CAClD,OACEC,qBAAqB,CACrBC,uBAAuB,KAClB,qCAAqC,CAC5C,OACEC,qBAAqB,CACrBC,iBAAiB,CACjBC,oBAAoB,CACpBC,mBAAmB,KACd,WAAW,CAElB,OACEC,sBAAsB,CACtBC,4BAA4B,KACvB,eAAe,CAEtB,SAAUC,cAAcA,CAACC,MAAM,CAAE,CAC/B,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAd,IAAI,CAACD,iBAAiB,CAAEc,MAAM,CAACE,OAAO,CAAC,CAC1D,KAAM,CAAEC,MAAM,CAAEC,MAAO,CAAC,CAAGH,IAAI,CAC/B,GAAIE,MAAM,CAAE,KAAM,CAAAf,GAAG,CAACK,qBAAqB,CAACW,MAAM,CAAC,CAAC,CACtD,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAjB,GAAG,CAACQ,mBAAmB,CAACS,KAAK,CAACC,OAAO,CAAC,CAAC,CAC7C,KAAM,CAAAlB,GAAG,CAACG,qBAAqB,CAACc,KAAK,CAACC,OAAO,CAAC,CAAC,CACjD,CACF,CAEA,QAAU,CAAAC,UAAUA,CAAAC,IAAA,KAAC,CAAEN,OAAQ,CAAC,CAAAM,IAAA,mBAAE,CAChC,GAAI,CACF,KAAM,CAAEC,OAAO,CAAEC,IAAK,CAAC,CAAGR,OAAO,CACjC,MAAO,CAAAA,OAAO,CAACO,OAAO,CACtB,KAAM,CAAAR,IAAI,CAAG,KAAM,CAAAd,IAAI,CAACF,aAAa,CAAEiB,OAAO,CAAC,CAC/C,KAAM,CAAEE,MAAM,CAAED,MAAO,CAAC,CAAGF,IAAI,CAC/B,GAAIS,IAAI,GAAK,OAAO,CAAE,CACpB,GAAIP,MAAM,EAAIC,MAAM,CAACO,KAAK,CAAE,CAC1BC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAEC,IAAI,CAACC,SAAS,CAACX,MAAM,CAAC,CAAC,CACxD,KAAM,CAAAhB,GAAG,CAACO,oBAAoB,CAACM,IAAI,CAAC,CAAC,CACrC,KAAM,CAAAb,GAAG,CAACE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CACjCmB,OAAO,CAACO,IAAI,CAAC,YAAY,CAAC,CAC5B,CACF,CAAC,IAAM,CACL,KAAM,CAAA5B,GAAG,CACPO,oBAAoB,CAAAsB,aAAA,CAAAA,aAAA,IACfhB,IAAI,MACPS,IAAI,EACL,CACH,CAAC,CACD,KAAM,CAAAtB,GAAG,CAACI,uBAAuB,CAAC,wBAAwB,CAAC,CAAC,CAC9D,CACF,CAAE,MAAOa,KAAK,CAAE,CACd,KAAM,CAAAjB,GAAG,CAACM,iBAAiB,CAACW,KAAK,CAACC,OAAO,CAAC,CAAC,CAC3C,KAAM,CAAAlB,GAAG,CAACG,qBAAqB,CAACc,KAAK,CAACC,OAAO,CAAC,CAAC,CACjD,CACF,CAAC,IAED,SAAUY,iBAAiBA,CAAA,CAAG,CAC5B,KAAM,CAAA7B,SAAS,CAACQ,sBAAsB,CAAEE,cAAc,CAAC,CACvD,KAAM,CAAAV,SAAS,CAACS,4BAA4B,CAAES,UAAU,CAAC,CAC3D,CAEA,cAAe,CAAAW,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}