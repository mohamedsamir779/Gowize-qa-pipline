{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _getFactors = _interopRequireDefault(require(\"./getFactors\"));\nvar _getDistances = _interopRequireDefault(require(\"./getDistances\"));\nvar _advanceWidth = _interopRequireDefault(require(\"../../attributedString/advanceWidth\"));\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n  for (var _iterator = line.runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var run = _ref;\n    for (var _iterator2 = run.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var position = _ref2;\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\n\nvar justification = function justification(options, line) {\n  var gap = line.box.width - (0, _advanceWidth[\"default\"])(line);\n  if (gap === 0) return; // Exact fit\n\n  var factors = (0, _getFactors[\"default\"])(gap, line, options);\n  var distances = (0, _getDistances[\"default\"])(gap, factors);\n  return justifyLine(distances, line);\n};\nvar _default = R.curryN(2, justification);\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_getFactors","_getDistances","_advanceWidth","justifyLine","distances","line","index","_iterator","runs","_isArray","Array","isArray","_i","Symbol","iterator","_ref","length","next","done","value","run","_iterator2","positions","_isArray2","_i2","_ref2","position","xAdvance","justification","options","gap","box","width","factors","_default","curryN"],"sources":["/home/ubuntu/king/portal/client-portal-starter/node_modules/@react-pdf/textkit/engines/justification/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _getFactors = _interopRequireDefault(require(\"./getFactors\"));\n\nvar _getDistances = _interopRequireDefault(require(\"./getDistances\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../../attributedString/advanceWidth\"));\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n\n  for (var _iterator = line.runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var run = _ref;\n\n    for (var _iterator2 = run.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var position = _ref2;\n      position.xAdvance += distances[index++];\n    }\n  }\n\n  return line;\n};\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\n\n\nvar justification = function justification(options, line) {\n  var gap = line.box.width - (0, _advanceWidth[\"default\"])(line);\n  if (gap === 0) return; // Exact fit\n\n  var factors = (0, _getFactors[\"default\"])(gap, line, options);\n  var distances = (0, _getDistances[\"default\"])(gap, factors);\n  return justifyLine(distances, line);\n};\n\nvar _default = R.curryN(2, justification);\n\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}