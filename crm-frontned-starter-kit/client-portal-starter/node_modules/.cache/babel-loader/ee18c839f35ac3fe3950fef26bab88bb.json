{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/Gowize-qa-pipline/client-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const{FETCH_NOTIFICATIONS,FETCH_NOTIFICATIONS_SUCCESS,FETCH_NOTIFICATIONS_ERROR,MARK_NOTIFICATIONS_READ,MARK_NOTIFICATIONS_READ_SUCCESS,MARK_NOTIFICATIONS_READ_ERROR,RECEIVED_NOTIFICATION}=require(\"./actionTypes\");const initialState={loading:false,markReadLoading:false,error:\"\",success:\"\",notifications:{docs:[],totalDocs:0},unreadNotifications:{docs:[],totalDocs:0}};const markNotificationsRead=(state,payload)=>{const{notifications,unreadNotifications}=state;let newNotifications=_objectSpread({},notifications),newUnreadNotifications=_objectSpread({},unreadNotifications);const{docs:unreadDocs}=newUnreadNotifications;const{docs:readDocs}=newNotifications;const{_id}=JSON.parse(localStorage.getItem(\"authUser\"));const{notificationIds,all}=payload;if(all){const notificationDocs=readDocs.map(doc=>{const foundIndex=doc.to&&doc.to.findIndex(toDocs=>toDocs.clientId===_id);if(foundIndex!==-1){doc.to[foundIndex].read=true;}return doc;});return _objectSpread(_objectSpread({},state),{},{loading:false,notifications:_objectSpread(_objectSpread({},newNotifications),{},{docs:notificationDocs}),unreadNotifications:_objectSpread(_objectSpread({},newUnreadNotifications),{},{docs:[],totalDocs:0})});}else{notificationIds.forEach(id=>{const findNotification=unreadDocs.findIndex(doc=>doc._id.toString()===id);if(findNotification!==-1){unreadDocs.splice(findNotification,1);newUnreadNotifications.totalDocs=newUnreadNotifications.totalDocs-1;}});const notificationDocs=readDocs.map(doc=>{if(notificationIds.includes(doc._id.toString())){const foundIndex=doc.to&&doc.to.findIndex(toDocs=>toDocs.clientId===_id);if(foundIndex!==-1){doc.to[foundIndex].read=true;}}return doc;});return _objectSpread(_objectSpread({},state),{},{loading:false,notifications:_objectSpread(_objectSpread({},newNotifications),{},{docs:notificationDocs}),unreadNotifications:_objectSpread(_objectSpread({},newUnreadNotifications),{},{docs:[...unreadDocs]})});}};const handleReceivedNotification=(state,payload)=>{const{notifications,unreadNotifications}=state;const{docs:unreadDocs}=unreadNotifications;const{docs:readDocs}=notifications;const{_id}=payload;if(unreadDocs.findIndex(doc=>doc._id.toString()===_id)===-1){state=_objectSpread(_objectSpread({},state),{},{unreadNotifications:_objectSpread(_objectSpread({},unreadNotifications),{},{docs:[payload,...unreadDocs],totalDocs:unreadNotifications.totalDocs+1})});}if(readDocs.findIndex(doc=>doc._id.toString()===_id)===-1){state=_objectSpread(_objectSpread({},state),{},{notifications:_objectSpread(_objectSpread({},notifications),{},{docs:[payload,...readDocs],totalDocs:notifications.totalDocs+1})});}return state;};const notificationsReducer=function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;let action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FETCH_NOTIFICATIONS:state=_objectSpread(_objectSpread({},state),{},{loading:true});break;case FETCH_NOTIFICATIONS_SUCCESS:if(action.payload.unread){state=_objectSpread(_objectSpread({},state),{},{loading:false,unreadNotifications:action.payload});}else{state=_objectSpread(_objectSpread({},state),{},{loading:false,notifications:action.payload});}break;case FETCH_NOTIFICATIONS_ERROR:state=_objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});break;case MARK_NOTIFICATIONS_READ:state=_objectSpread(_objectSpread({},state),{},{loading:true});break;case MARK_NOTIFICATIONS_READ_SUCCESS:state=markNotificationsRead(state,action.payload);break;case MARK_NOTIFICATIONS_READ_ERROR:state=_objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});break;case RECEIVED_NOTIFICATION:state=handleReceivedNotification(state,action.payload);// state = {\n//   ...state,\n//   unreadNotifications: {\n//     ...state.unreadNotifications,\n//     docs: [\n//       action.payload,\n//       ...state.unreadNotifications.docs\n//     ],\n//     totalDocs: state.unreadNotifications.totalDocs + 1,\n//   },\n//   notifications: {\n//     ...state.notifications,\n//     docs: [\n//       action.payload,\n//       ...state.notifications.docs\n//     ],\n//     totalDocs: state.notifications.totalDocs + 1,\n//   },\n// };\nbreak;default:break;}return state;};export default notificationsReducer;","map":{"version":3,"names":["FETCH_NOTIFICATIONS","FETCH_NOTIFICATIONS_SUCCESS","FETCH_NOTIFICATIONS_ERROR","MARK_NOTIFICATIONS_READ","MARK_NOTIFICATIONS_READ_SUCCESS","MARK_NOTIFICATIONS_READ_ERROR","RECEIVED_NOTIFICATION","require","initialState","loading","markReadLoading","error","success","notifications","docs","totalDocs","unreadNotifications","markNotificationsRead","state","payload","newNotifications","_objectSpread","newUnreadNotifications","unreadDocs","readDocs","_id","JSON","parse","localStorage","getItem","notificationIds","all","notificationDocs","map","doc","foundIndex","to","findIndex","toDocs","clientId","read","forEach","id","findNotification","toString","splice","includes","handleReceivedNotification","notificationsReducer","arguments","length","undefined","action","type","unread"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/general/notifications/reducer.js"],"sourcesContent":["const {\n  FETCH_NOTIFICATIONS,\n  FETCH_NOTIFICATIONS_SUCCESS,\n  FETCH_NOTIFICATIONS_ERROR,\n  MARK_NOTIFICATIONS_READ,\n  MARK_NOTIFICATIONS_READ_SUCCESS,\n  MARK_NOTIFICATIONS_READ_ERROR,\n  RECEIVED_NOTIFICATION,\n} = require(\"./actionTypes\");\n\nconst initialState = {\n  loading: false,\n  markReadLoading: false,\n  error: \"\",\n  success: \"\",\n  notifications: {\n    docs: [],\n    totalDocs: 0,\n  },\n  unreadNotifications: {\n    docs: [],\n    totalDocs: 0,\n  },\n};\n\nconst markNotificationsRead = (state, payload) => {\n  const { notifications, unreadNotifications } = state;\n  let newNotifications = { ...notifications }, newUnreadNotifications = { ...unreadNotifications };\n  const { docs: unreadDocs } = newUnreadNotifications;\n  const { docs: readDocs } = newNotifications;\n  const { _id } = JSON.parse(localStorage.getItem(\"authUser\"));\n  const {\n    notificationIds,\n    all,\n  } = payload;\n  if (all) {\n    const notificationDocs = readDocs.map((doc) => {\n      const foundIndex = doc.to && doc.to.findIndex((toDocs) => toDocs.clientId === _id);\n      if (foundIndex !== -1) {\n        doc.to[foundIndex].read = true;\n      }\n      return doc;\n    });\n    return {\n      ...state,\n      loading: false,\n      notifications: {\n        ...newNotifications,\n        docs: notificationDocs,\n      },\n      unreadNotifications: {\n        ...newUnreadNotifications,\n        docs: [],\n        totalDocs: 0,\n      },\n    };\n  } else {\n    notificationIds.forEach((id) => {\n      const findNotification = unreadDocs.findIndex((doc) => doc._id.toString() === id);\n      if (findNotification !== -1) {\n        unreadDocs.splice(findNotification, 1);\n        newUnreadNotifications.totalDocs = newUnreadNotifications.totalDocs - 1;\n      }\n    });\n    const notificationDocs = readDocs.map((doc) => {\n      if (notificationIds.includes(doc._id.toString())) {\n        const foundIndex = doc.to && doc.to.findIndex((toDocs) => toDocs.clientId === _id);\n        if (foundIndex !== -1) {\n          doc.to[foundIndex].read = true;\n        }\n      }\n      return doc;\n    });\n    return {\n      ...state,\n      loading: false,\n      notifications: {\n        ...newNotifications,\n        docs: notificationDocs,\n      },\n      unreadNotifications: {\n        ...newUnreadNotifications,\n        docs: [\n          ...unreadDocs\n        ],\n      },\n    };\n  }\n};\n\nconst handleReceivedNotification = (state, payload) => {\n  const { notifications, unreadNotifications } = state;\n  const { docs: unreadDocs } = unreadNotifications;\n  const { docs: readDocs } = notifications;\n  const { _id } = payload;\n  if (unreadDocs.findIndex((doc) => doc._id.toString() === _id) === -1) {\n    state = {\n      ...state,\n      unreadNotifications: {\n        ...unreadNotifications,\n        docs: [\n          payload,\n          ...unreadDocs\n        ],\n        totalDocs: unreadNotifications.totalDocs + 1,\n      },\n    };\n  }\n  if (readDocs.findIndex((doc) => doc._id.toString() === _id) === -1) {\n    state = {\n      ...state,\n      notifications: {\n        ...notifications,\n        docs: [\n          payload,\n          ...readDocs\n        ],\n        totalDocs: notifications.totalDocs + 1,\n      },\n    };\n  }\n  return state;\n};\n\nconst notificationsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_NOTIFICATIONS:\n      state = {\n        ...state,\n        loading: true,\n      };\n      break;\n    case FETCH_NOTIFICATIONS_SUCCESS:\n      if (action.payload.unread) {\n        state = {\n          ...state,\n          loading: false,\n          unreadNotifications: action.payload,\n        };\n      } else {\n        state = {\n          ...state,\n          loading: false,\n          notifications: action.payload,\n        };\n      }\n      break;\n    case FETCH_NOTIFICATIONS_ERROR:\n      state = {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n      break;\n    case MARK_NOTIFICATIONS_READ:\n      state = {\n        ...state,\n        loading: true,\n      };\n      break;\n    case MARK_NOTIFICATIONS_READ_SUCCESS:\n      state = markNotificationsRead(state, action.payload);\n      break;\n    case MARK_NOTIFICATIONS_READ_ERROR:\n      state = {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n      break;\n    case RECEIVED_NOTIFICATION:\n      state = handleReceivedNotification(state, action.payload);\n      // state = {\n      //   ...state,\n      //   unreadNotifications: {\n      //     ...state.unreadNotifications,\n      //     docs: [\n      //       action.payload,\n      //       ...state.unreadNotifications.docs\n      //     ],\n      //     totalDocs: state.unreadNotifications.totalDocs + 1,\n      //   },\n      //   notifications: {\n      //     ...state.notifications,\n      //     docs: [\n      //       action.payload,\n      //       ...state.notifications.docs\n      //     ],\n      //     totalDocs: state.notifications.totalDocs + 1,\n      //   },\n      // };\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default notificationsReducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}