{"ast":null,"code":"import{normalizedData}from\"./priceData\";// DatafeedConfiguration implementation\nconst configurationData={// Represents the resolutions for bars supported by your datafeed\n// supported_resolutions: [\"1\", \"5\", \"15\", \"30\", \"1H\", \"1D\", \"1W\", \"1M\"],\nsupported_resolutions:[\"1\"],// The `exchanges` arguments are used for the `searchSymbols` method if a user selects the exchange\nexchanges:[{value:\"Binance\",name:\"Binance\",desc:\"Binance\"},{value:\"Bitfinex\",name:\"Bitfinex\",desc:\"Bitfinex\"},{value:\"Kraken\",name:\"Kraken\",desc:\"Kraken bitcoin exchange\"},{value:\"CME\",name:\"CME\",desc:\"Chicago Merchentile Exchange\"}],// The `symbols_types` arguments are used for the `searchSymbols` method if a user selects this symbol type\nsymbols_types:[{name:\"crypto\",value:\"crypto\"},{name:\"fx\",value:\"fx\"},{name:\"cfd\",value:\"cfd\"}]};const dummySymbols=[{symbol:\"ETH/USDT\",full_name:\"ETHER vs USDT\",description:\"\",exchange:\"Binance\",type:\"crypto\",pricescale:100,minmov:1},{symbol:\"EUR/USD\",full_name:\"EURO VS USD\",description:\"\",exchange:\"CME\",type:\"fx\"},{symbol:\"GBP/USD\",full_name:\"GBP VS USD\",description:\"\",exchange:\"CME\",type:\"fx\"},{symbol:\"AUD/USD\",full_name:\"AUD VS USD\",description:\"\",exchange:\"CME\",type:\"fx\"}];function onReady(callback){console.log(\"[onReady]: Method call\");setTimeout(()=>callback(configurationData));}async function searchSymbols(userInput,exchange,symbolType,onResultReadyCallback){console.log(\"[searchSymbols]: Method call\");// const symbols = await getAllSymbols();\nconst symbols=dummySymbols;const newSymbols=symbols.filter(symbol=>{const isExchangeValid=exchange===\"\"||symbol.exchange===exchange;const isFullSymbolContainsInput=symbol.full_name.toLowerCase().indexOf(userInput.toLowerCase())!==-1;return isExchangeValid&&isFullSymbolContainsInput;});onResultReadyCallback(newSymbols);}async function resolveSymbol(symbolName,onSymbolResolvedCallback,onResolveErrorCallback,extension){console.log(\"[resolveSymbol]: Method call\",symbolName);const symbols=dummySymbols;const symbolItem=symbols.find(_ref=>{let{full_name,symbol}=_ref;return symbolName===full_name||symbolName===symbol;});if(!symbolItem){console.log(\"[resolveSymbol]: Cannot resolve symbol\",symbolName);onResolveErrorCallback(\"Cannot resolve symbol\");return;}// Symbol information object\nconst symbolInfo={ticker:symbolItem.full_name,name:symbolItem.symbol,description:symbolItem.description,type:symbolItem.type,session:\"24x7\",timezone:\"Etc/UTC\",exchange:symbolItem.exchange,minmov:1,pricescale:100,has_intraday:true,has_no_volume:true,has_weekly_and_monthly:false,supported_resolutions:configurationData.supported_resolutions,volume_precision:2,//data_status: \"streaming\",\ndata_status:\"historical\"};console.log(\"[resolveSymbol]: Symbol resolved\",symbolName);onSymbolResolvedCallback(symbolInfo);}async function getBars(symbolInfo,resolution,periodParams,onHistoryCallback,onErrorCallback){const bars=normalizedData;console.log({bars});const{from,to,firstDataRequest}=periodParams;console.log(\"[getBars]: Method call\",symbolInfo,resolution,from,to);try{//priceData;\nconsole.log(\"[getBars]: bars=> \",{bars});if(!bars)onHistoryCallback([],{noData:true});else{console.log(\"[getBars]: returned \".concat(bars.length,\" bar(s)\"));onHistoryCallback(bars,{noData:false});}}catch(error){console.log(\"[getBars]: Get error\",error);onErrorCallback(error);}}function subscribeBars(symbolInfo,resolution,onRealtimeCallback,subscriberUID,onResetCacheNeededCallback){console.log(\"[subscribeBars]: Method call with subscriberUID:\",subscriberUID);}function unsubscribeBars(subscriberUID){console.log(\"[unsubscribeBars]: Method call with subscriberUID:\",subscriberUID);}export default{onReady:onReady,searchSymbols:searchSymbols,resolveSymbol:resolveSymbol,getBars:getBars,subscribeBars:subscribeBars,unsubscribeBars:unsubscribeBars};","map":{"version":3,"names":["normalizedData","configurationData","supported_resolutions","exchanges","value","name","desc","symbols_types","dummySymbols","symbol","full_name","description","exchange","type","pricescale","minmov","onReady","callback","console","log","setTimeout","searchSymbols","userInput","symbolType","onResultReadyCallback","symbols","newSymbols","filter","isExchangeValid","isFullSymbolContainsInput","toLowerCase","indexOf","resolveSymbol","symbolName","onSymbolResolvedCallback","onResolveErrorCallback","extension","symbolItem","find","_ref","symbolInfo","ticker","session","timezone","has_intraday","has_no_volume","has_weekly_and_monthly","volume_precision","data_status","getBars","resolution","periodParams","onHistoryCallback","onErrorCallback","bars","from","to","firstDataRequest","noData","concat","length","error","subscribeBars","onRealtimeCallback","subscriberUID","onResetCacheNeededCallback","unsubscribeBars"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/pages/Forex/Tradingview/datafeed.js"],"sourcesContent":["import {\n\tnormalizedData\n} from \"./priceData\";\n\n// DatafeedConfiguration implementation\nconst configurationData = {\n\t// Represents the resolutions for bars supported by your datafeed\n\t// supported_resolutions: [\"1\", \"5\", \"15\", \"30\", \"1H\", \"1D\", \"1W\", \"1M\"],\n\tsupported_resolutions: [\"1\"],\n\t// The `exchanges` arguments are used for the `searchSymbols` method if a user selects the exchange\n\texchanges: [\n\t\t{\n\t\t\tvalue: \"Binance\",\n\t\t\tname: \"Binance\",\n\t\t\tdesc: \"Binance\"\n\t\t},\n\t\t{\n\t\t\tvalue: \"Bitfinex\",\n\t\t\tname: \"Bitfinex\",\n\t\t\tdesc: \"Bitfinex\"\n\t\t},\n\t\t{\n\t\t\tvalue: \"Kraken\",\n\t\t\tname: \"Kraken\",\n\t\t\tdesc: \"Kraken bitcoin exchange\"\n\t\t},\n\t\t{\n\t\t\tvalue: \"CME\",\n\t\t\tname: \"CME\",\n\t\t\tdesc: \"Chicago Merchentile Exchange\"\n\t\t},\n\t],\n\t// The `symbols_types` arguments are used for the `searchSymbols` method if a user selects this symbol type\n\tsymbols_types: [\n\t\t{\n\t\t\tname: \"crypto\",\n\t\t\tvalue: \"crypto\"\n\t\t},\n\t\t{\n\t\t\tname: \"fx\",\n\t\t\tvalue: \"fx\"\n\t\t},\n\t\t{\n\t\t\tname: \"cfd\",\n\t\t\tvalue: \"cfd\"\n\t\t},\n\t]\n};\nconst dummySymbols = [{\n\tsymbol: \"ETH/USDT\",\n\tfull_name: \"ETHER vs USDT\",\n\tdescription: \"\",\n\texchange: \"Binance\",\n\ttype: \"crypto\",\n\tpricescale: 100,\n\tminmov: 1,\n}, {\n\tsymbol: \"EUR/USD\",\n\tfull_name: \"EURO VS USD\",\n\tdescription: \"\",\n\texchange: \"CME\",\n\ttype: \"fx\"\n}, {\n\tsymbol: \"GBP/USD\",\n\tfull_name: \"GBP VS USD\",\n\tdescription: \"\",\n\texchange: \"CME\",\n\ttype: \"fx\"\n}, {\n\tsymbol: \"AUD/USD\",\n\tfull_name: \"AUD VS USD\",\n\tdescription: \"\",\n\texchange: \"CME\",\n\ttype: \"fx\"\n},\n\n];\nfunction onReady(callback) {\n\tconsole.log(\"[onReady]: Method call\");\n\tsetTimeout(() => callback(configurationData));\n}\nasync function searchSymbols(userInput, exchange, symbolType, onResultReadyCallback) {\n\tconsole.log(\"[searchSymbols]: Method call\");\n\t// const symbols = await getAllSymbols();\n\tconst symbols = dummySymbols;\n\tconst newSymbols = symbols.filter(symbol => {\n\t\tconst isExchangeValid = exchange === \"\" || symbol.exchange === exchange;\n\t\tconst isFullSymbolContainsInput = symbol.full_name\n\t\t\t.toLowerCase()\n\t\t\t.indexOf(userInput.toLowerCase()) !== -1;\n\t\treturn isExchangeValid && isFullSymbolContainsInput;\n\t});\n\tonResultReadyCallback(newSymbols);\n}\nasync function resolveSymbol(symbolName, onSymbolResolvedCallback, onResolveErrorCallback, extension) {\n\tconsole.log(\"[resolveSymbol]: Method call\", symbolName);\n\tconst symbols = dummySymbols;\n\tconst symbolItem = symbols.find(({ full_name, symbol }) => { return (symbolName === full_name || symbolName === symbol) });\n\tif (!symbolItem) {\n\t\tconsole.log(\"[resolveSymbol]: Cannot resolve symbol\", symbolName);\n\t\tonResolveErrorCallback(\"Cannot resolve symbol\");\n\t\treturn;\n\t}\n\t// Symbol information object\n\tconst symbolInfo = {\n\t\tticker: symbolItem.full_name,\n\t\tname: symbolItem.symbol,\n\t\tdescription: symbolItem.description,\n\t\ttype: symbolItem.type,\n\t\tsession: \"24x7\",\n\t\ttimezone: \"Etc/UTC\",\n\t\texchange: symbolItem.exchange,\n\t\tminmov: 1,\n\t\tpricescale: 100,\n\t\thas_intraday: true,\n\t\thas_no_volume: true,\n\t\thas_weekly_and_monthly: false,\n\t\tsupported_resolutions: configurationData.supported_resolutions,\n\t\tvolume_precision: 2,\n\t\t//data_status: \"streaming\",\n\t\tdata_status: \"historical\",\n\t};\n\tconsole.log(\"[resolveSymbol]: Symbol resolved\", symbolName);\n\tonSymbolResolvedCallback(symbolInfo);\n}\nasync function getBars(symbolInfo, resolution, periodParams, onHistoryCallback, onErrorCallback) {\n\tconst bars = normalizedData;\n\tconsole.log({ bars });\n\tconst { from, to, firstDataRequest } = periodParams;\n\tconsole.log(\"[getBars]: Method call\", symbolInfo, resolution, from, to);\n\ttry {\n\t\t//priceData;\n\t\tconsole.log(\"[getBars]: bars=> \", { bars });\n\t\tif (!bars) onHistoryCallback([], { noData: true });\n\t\telse {\n\t\t\tconsole.log(`[getBars]: returned ${bars.length} bar(s)`);\n\t\t\tonHistoryCallback(bars, { noData: false });\n\t\t}\n\n\t} catch (error) {\n\t\tconsole.log(\"[getBars]: Get error\", error);\n\t\tonErrorCallback(error);\n\t}\n}\nfunction subscribeBars(symbolInfo, resolution, onRealtimeCallback, subscriberUID, onResetCacheNeededCallback) {\n\tconsole.log(\"[subscribeBars]: Method call with subscriberUID:\", subscriberUID);\n}\nfunction unsubscribeBars(subscriberUID) {\n\tconsole.log(\"[unsubscribeBars]: Method call with subscriberUID:\", subscriberUID);\n}\nexport default ({\n\tonReady: onReady,\n\tsearchSymbols: searchSymbols,\n\tresolveSymbol: resolveSymbol,\n\tgetBars: getBars,\n\tsubscribeBars: subscribeBars,\n\tunsubscribeBars: unsubscribeBars\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}