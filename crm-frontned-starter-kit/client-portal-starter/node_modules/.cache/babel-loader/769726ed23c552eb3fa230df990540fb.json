{"ast":null,"code":"import{getIbClientsAPI,getIbClientAccountsAPI,getIbClientAccountActivitiesAPI,getClientIbAccountAPI,getAllClientsIbAccountAPI}from\"apis/forex/ib\";import{put,call,takeEvery}from\"redux-saga/effects\";import{GET_IB_CLIENTS_START,GET_IB_CLIENTS_SUCCESS,GET_IB_CLIENT_ACCOUNTS_START,GET_IB_CLIENT_ACCOUNTS_SUCCESS,GET_IB_CLIENT_ACCOUNT_ACTIVITIES_START,GET_IB_CLIENT_ACCOUNT_ACTIVITIES_SUCCESS,GET_CLIENT_IB_ACCOUNTS_START,GET_ALL_CLIENTS_IB_ACCOUNTS_START}from\"./actionTypes\";import{getClientIbAccountsSuccess,getClientIbAccountsFailure,getAllClientsIbAccountsSuccess,getAllClientsIbAccountsFailure}from\"./actions\";function getClients(_ref){let{payload}=_ref;return function*(){const{result}=yield call(getIbClientsAPI,payload);yield put({type:GET_IB_CLIENTS_SUCCESS,payload:result});}();}function getClientAccounts(_ref2){let{payload}=_ref2;return function*(){const{result}=yield call(getIbClientAccountsAPI,payload);yield put({type:GET_IB_CLIENT_ACCOUNTS_SUCCESS,payload:result});}();}function getClientAccountActivities(_ref3){let{payload}=_ref3;return function*(){if(!payload.type)return;const{result}=yield call(getIbClientAccountActivitiesAPI,payload);if(result)yield put({type:GET_IB_CLIENT_ACCOUNT_ACTIVITIES_SUCCESS,payload:result});}();}// get ib client accounts (owned by the client ibMT4 + ibMT5)\nfunction*getClientIbAccounts(){try{const data=yield call(getClientIbAccountAPI);if(data.status){yield put(getClientIbAccountsSuccess(data));}}catch(error){yield put(getClientIbAccountsFailure(error));}}// get all clients accounts\nfunction*getAllClientsIbAccounts(payload){try{const data=yield call(getAllClientsIbAccountAPI,payload);if(data.status){yield put(getAllClientsIbAccountsSuccess(data));}}catch(error){yield put(getAllClientsIbAccountsFailure(error));}}function*clientsSaga(){yield takeEvery(GET_IB_CLIENTS_START,getClients);yield takeEvery(GET_IB_CLIENT_ACCOUNTS_START,getClientAccounts);yield takeEvery(GET_IB_CLIENT_ACCOUNT_ACTIVITIES_START,getClientAccountActivities);yield takeEvery(GET_CLIENT_IB_ACCOUNTS_START,getClientIbAccounts);yield takeEvery(GET_ALL_CLIENTS_IB_ACCOUNTS_START,getAllClientsIbAccounts);}export default clientsSaga;","map":{"version":3,"names":["getIbClientsAPI","getIbClientAccountsAPI","getIbClientAccountActivitiesAPI","getClientIbAccountAPI","getAllClientsIbAccountAPI","put","call","takeEvery","GET_IB_CLIENTS_START","GET_IB_CLIENTS_SUCCESS","GET_IB_CLIENT_ACCOUNTS_START","GET_IB_CLIENT_ACCOUNTS_SUCCESS","GET_IB_CLIENT_ACCOUNT_ACTIVITIES_START","GET_IB_CLIENT_ACCOUNT_ACTIVITIES_SUCCESS","GET_CLIENT_IB_ACCOUNTS_START","GET_ALL_CLIENTS_IB_ACCOUNTS_START","getClientIbAccountsSuccess","getClientIbAccountsFailure","getAllClientsIbAccountsSuccess","getAllClientsIbAccountsFailure","getClients","_ref","payload","result","type","getClientAccounts","_ref2","getClientAccountActivities","_ref3","getClientIbAccounts","data","status","error","getAllClientsIbAccounts","clientsSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/forex/ib/clients/saga.js"],"sourcesContent":["import {\n  getIbClientsAPI, \n  getIbClientAccountsAPI, \n  getIbClientAccountActivitiesAPI,\n  getClientIbAccountAPI,\n  getAllClientsIbAccountAPI\n} from \"apis/forex/ib\";\nimport {\n  put, call, takeEvery, \n} from \"redux-saga/effects\";\nimport {\n  GET_IB_CLIENTS_START,\n  GET_IB_CLIENTS_SUCCESS,\n  GET_IB_CLIENT_ACCOUNTS_START,\n  GET_IB_CLIENT_ACCOUNTS_SUCCESS, \n  GET_IB_CLIENT_ACCOUNT_ACTIVITIES_START,\n  GET_IB_CLIENT_ACCOUNT_ACTIVITIES_SUCCESS,\n\n  GET_CLIENT_IB_ACCOUNTS_START,\n  GET_ALL_CLIENTS_IB_ACCOUNTS_START,\n} from \"./actionTypes\";\nimport {\n  getClientIbAccountsSuccess,\n  getClientIbAccountsFailure,\n  getAllClientsIbAccountsSuccess,\n  getAllClientsIbAccountsFailure\n} from \"./actions\";\n\nfunction* getClients({ payload }) {\n  const { result } = yield call(getIbClientsAPI, payload);\n  yield put({\n    type: GET_IB_CLIENTS_SUCCESS,\n    payload: result \n  });\n}\n\nfunction* getClientAccounts({ payload }) {\n  const { result } = yield call(getIbClientAccountsAPI, payload);\n  yield put({\n    type: GET_IB_CLIENT_ACCOUNTS_SUCCESS,\n    payload: result \n  });\n}\n\nfunction* getClientAccountActivities({ payload }) {\n  if (!payload.type) return ;\n  const { result } = yield call(getIbClientAccountActivitiesAPI, payload);\n  if (result)\n    yield put({\n      type: GET_IB_CLIENT_ACCOUNT_ACTIVITIES_SUCCESS,\n      payload: result \n    });\n}\n\n// get ib client accounts (owned by the client ibMT4 + ibMT5)\nfunction * getClientIbAccounts() {\n  try {\n    const data  = yield call(getClientIbAccountAPI);\n    if (data.status) {\n      yield put(getClientIbAccountsSuccess(data));\n    }\n  } catch (error) {\n    yield put(getClientIbAccountsFailure(error));\n  }\n}\n\n// get all clients accounts\nfunction * getAllClientsIbAccounts(payload) {\n  try {\n    const data  = yield call(getAllClientsIbAccountAPI, payload);\n    if (data.status) {\n      yield put(getAllClientsIbAccountsSuccess(data));\n    }\n  } catch (error) {\n    yield put(getAllClientsIbAccountsFailure(error));\n  }\n}\n\nfunction* clientsSaga() {\n  yield takeEvery(GET_IB_CLIENTS_START, getClients);\n  yield takeEvery(GET_IB_CLIENT_ACCOUNTS_START, getClientAccounts);\n  yield takeEvery(GET_IB_CLIENT_ACCOUNT_ACTIVITIES_START, getClientAccountActivities);\n  yield takeEvery(GET_CLIENT_IB_ACCOUNTS_START, getClientIbAccounts);\n  yield takeEvery(GET_ALL_CLIENTS_IB_ACCOUNTS_START, getAllClientsIbAccounts);\n}\n  \nexport default clientsSaga;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}