{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/king/portal/client-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{GET_USERS_SUCCESS,GET_USERS_FAIL,ADD_USER_SUCCESS,ADD_USER_FAIL,UPDATE_USER_SUCCESS,UPDATE_USER_FAIL,DELETE_USER_SUCCESS,DELETE_USER_FAIL,GET_USER_PROFILE_SUCCESS,GET_USER_PROFILE_FAIL}from\"./actionTypes\";const INIT_STATE={users:[],userProfile:{},error:{}};const contacts=function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INIT_STATE;let action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_USERS_SUCCESS:return _objectSpread(_objectSpread({},state),{},{users:action.payload});case GET_USERS_FAIL:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case ADD_USER_SUCCESS:return _objectSpread(_objectSpread({},state),{},{users:[...state.users,action.payload]});case ADD_USER_FAIL:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case GET_USER_PROFILE_SUCCESS:return _objectSpread(_objectSpread({},state),{},{userProfile:action.payload});case UPDATE_USER_SUCCESS:return _objectSpread(_objectSpread({},state),{},{users:state.users.map(user=>user.id.toString()===action.payload.id.toString()?_objectSpread({user},action.payload):user)});case UPDATE_USER_FAIL:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case DELETE_USER_SUCCESS:return _objectSpread(_objectSpread({},state),{},{users:state.users.filter(user=>user.id.toString()!==action.payload.id.toString())});case DELETE_USER_FAIL:return _objectSpread(_objectSpread({},state),{},{error:action.payload});case GET_USER_PROFILE_FAIL:return _objectSpread(_objectSpread({},state),{},{error:action.payload});default:return state;}};export default contacts;","map":{"version":3,"names":["GET_USERS_SUCCESS","GET_USERS_FAIL","ADD_USER_SUCCESS","ADD_USER_FAIL","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","DELETE_USER_SUCCESS","DELETE_USER_FAIL","GET_USER_PROFILE_SUCCESS","GET_USER_PROFILE_FAIL","INIT_STATE","users","userProfile","error","contacts","state","arguments","length","undefined","action","type","_objectSpread","payload","map","user","id","toString","filter"],"sources":["/home/ubuntu/king/portal/client-portal-starter/src/store/crypto/contacts/reducer.js"],"sourcesContent":["import {\n  GET_USERS_SUCCESS,\n  GET_USERS_FAIL,\n  ADD_USER_SUCCESS,\n  ADD_USER_FAIL,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAIL,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAIL,\n  GET_USER_PROFILE_SUCCESS,\n  GET_USER_PROFILE_FAIL,\n} from \"./actionTypes\";\n\nconst INIT_STATE = {\n  users: [],\n  userProfile: {},\n  error: {},\n};\n\nconst contacts = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload,\n      };\n\n    case GET_USERS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case ADD_USER_SUCCESS:\n\n      return {\n        ...state,\n        users: [...state.users, action.payload],\n      };\n\n    case ADD_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case GET_USER_PROFILE_SUCCESS:\n      return {\n        ...state,\n        userProfile: action.payload,\n      };\n\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.map(user =>\n          user.id.toString() === action.payload.id.toString()\n            ? {\n              user,\n              ...action.payload \n            }\n            : user\n        ),\n      };\n\n    case UPDATE_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        users: state.users.filter(\n          user => user.id.toString() !== action.payload.id.toString()\n        ),\n      };\n\n    case DELETE_USER_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case GET_USER_PROFILE_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contacts;\n"],"mappings":"mIAAA,OACEA,iBAAiB,CACjBC,cAAc,CACdC,gBAAgB,CAChBC,aAAa,CACbC,mBAAmB,CACnBC,gBAAgB,CAChBC,mBAAmB,CACnBC,gBAAgB,CAChBC,wBAAwB,CACxBC,qBAAqB,KAChB,eAAe,CAEtB,KAAM,CAAAC,UAAU,CAAG,CACjBC,KAAK,CAAE,EAAE,CACTC,WAAW,CAAE,CAAC,CAAC,CACfC,KAAK,CAAE,CAAC,CACV,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,QAAAA,CAAA,CAAgC,IAA/B,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGN,UAAU,IAAE,CAAAS,MAAM,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CAC1C,OAAQC,MAAM,CAACC,IAAI,EACjB,IAAK,CAAApB,iBAAiB,CACpB,OAAAqB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRJ,KAAK,CAAEQ,MAAM,CAACG,OAAO,GAGzB,IAAK,CAAArB,cAAc,CACjB,OAAAoB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRF,KAAK,CAAEM,MAAM,CAACG,OAAO,GAGzB,IAAK,CAAApB,gBAAgB,CAEnB,OAAAmB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRJ,KAAK,CAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,CAAEQ,MAAM,CAACG,OAAO,CAAC,GAG3C,IAAK,CAAAnB,aAAa,CAChB,OAAAkB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRF,KAAK,CAAEM,MAAM,CAACG,OAAO,GAGzB,IAAK,CAAAd,wBAAwB,CAC3B,OAAAa,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRH,WAAW,CAAEO,MAAM,CAACG,OAAO,GAG/B,IAAK,CAAAlB,mBAAmB,CACtB,OAAAiB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRJ,KAAK,CAAEI,KAAK,CAACJ,KAAK,CAACY,GAAG,CAACC,IAAI,EACzBA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC,GAAKP,MAAM,CAACG,OAAO,CAACG,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAAL,aAAA,EAE/CG,IAAI,EACDL,MAAM,CAACG,OAAO,EAEjBE,IACN,CAAC,GAGL,IAAK,CAAAnB,gBAAgB,CACnB,OAAAgB,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRF,KAAK,CAAEM,MAAM,CAACG,OAAO,GAGzB,IAAK,CAAAhB,mBAAmB,CACtB,OAAAe,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRJ,KAAK,CAAEI,KAAK,CAACJ,KAAK,CAACgB,MAAM,CACvBH,IAAI,EAAIA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC,GAAKP,MAAM,CAACG,OAAO,CAACG,EAAE,CAACC,QAAQ,CAAC,CAC5D,CAAC,GAGL,IAAK,CAAAnB,gBAAgB,CACnB,OAAAc,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRF,KAAK,CAAEM,MAAM,CAACG,OAAO,GAGzB,IAAK,CAAAb,qBAAqB,CACxB,OAAAY,aAAA,CAAAA,aAAA,IACKN,KAAK,MACRF,KAAK,CAAEM,MAAM,CAACG,OAAO,GAGzB,QACE,MAAO,CAAAP,KAAK,CAChB,CACF,CAAC,CAED,cAAe,CAAAD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}