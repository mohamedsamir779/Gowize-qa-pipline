{"ast":null,"code":"/* eslint-disable no-console */// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst LOG_PREFIX=\"[ServiceWorker]\";const isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){console.log(\"\".concat(LOG_PREFIX,\" inside register SW\"));if(\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW.\nconst publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);console.log(\"\".concat(LOG_PREFIX,\" public url: \").concat(publicUrl));console.log(\"\".concat(LOG_PREFIX,\" origin url: \").concat(window.location.origin));console.log(\"\".concat(LOG_PREFIX,\" equality url: \").concat(publicUrl.origin!==window.location.origin));if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",()=>{const swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");console.log(\"\".concat(LOG_PREFIX,\" running localhost: isLocalhost : \").concat(isLocalhost));if(isLocalhost){console.log(\"\".concat(LOG_PREFIX,\" running localhost: isLocalhost : \").concat(isLocalhost,\", swUrl: \").concat(swUrl));// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(()=>{console.log(\"This web app is being served cache-first by a service \"+\"worker. To learn more, visit https://cra.link/PWA\");});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log(LOG_PREFIX,\"New content is available and will be used when all \"+\"tabs for this page are closed. See https://cra.link/PWA.\");// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log(\"[\".concat(LOG_PREFIX,\"] Content is cached for offline use.\"));// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(error=>{console.error(\"[\".concat(LOG_PREFIX,\"] Error during service worker registration:\"),error);});}function checkValidServiceWorker(swUrl,config){console.log(\"\".concat(LOG_PREFIX,\" inside checkValidServiceWorker SW\"));// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{\"Service-Worker\":\"script\"}}).then(response=>{console.log(\"\".concat(LOG_PREFIX,\" inside checkValidServiceWorker SW: response:\"),response);// Ensure service worker exists, and that we really are getting a JS file.\nconst contentType=response.headers.get(\"content-type\");console.log(\"\".concat(LOG_PREFIX,\" inside checkValidServiceWorker SW: contentType:\"),contentType);console.log(\"\".concat(LOG_PREFIX,\" inside checkValidServiceWorker SW: response.status:\"),response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1);if(response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1){console.log(\"\".concat(LOG_PREFIX,\" inside checkValidServiceWorker SW: unregistering SW\"));// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(()=>{console.log(\"[\".concat(LOG_PREFIX,\"] No internet connection found. App is running in offline mode.\"));});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}export function subscribeUserToPush(){console.log(\"\".concat(LOG_PREFIX,\" Inside subs to push.\"));return navigator.serviceWorker.ready.then(serviceWorkerReg=>{console.log(\"\".concat(LOG_PREFIX,\" Service Worker Ready\"));return serviceWorkerReg.pushManager.getSubscription().then(subscription=>{console.log(\"\".concat(LOG_PREFIX,\" Service Worker Ready: subscription:\"),subscription);if(subscription===null){return serviceWorkerReg.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:\"BJT_vxXDhe1RmUxC_e7oGoHj5L2aPNHxhGtDqPAQmlyfnX3ldlHPaC8Bhy1hu8WzAG_2F3qsiBLm-Z7I7pE3zYE\"}).then(newSubs=>{console.log(\"\".concat(LOG_PREFIX,\" User is subscribed.\"));console.log(LOG_PREFIX,newSubs);return newSubs;}).catch(err=>{console.log(\"\".concat(LOG_PREFIX,\" Failed to subscribe the user: \"),err);});}else{console.log(\"\".concat(LOG_PREFIX,\" User is already subscribed.\"));return subscription;}});});// const subscription = serviceWorkerReg.pushManager.getSubscription();\n// console.log(`${LOG_PREFIX} Service Worker Ready: subscription:`, subscription);\n// if (subscription === null) {\n//   serviceWorkerReg.pushManager.subscribe({\n//     userVisibleOnly: true,\n//     applicationServerKey: \"BKemtwM7irZVq7QiMjpIvx_pioe-DDN-T2mdceu_bE57MjttTD_BPmZYrnUfyNaQsOJ28oub9l_-UW8yqBDo\",\n//   }).then((subscription) => {\n//     console.log(`${LOG_PREFIX} User is subscribed.`);\n//     console.log(LOG_PREFIX, subscription);\n//   }).catch((err) => {\n//     console.log(`${LOG_PREFIX} Failed to subscribe the user: `, err);\n//   });\n// }\n}export function checkPushNotificationSubscription(){console.log(\"\".concat(LOG_PREFIX,\" Inside check subs to push.\"));return navigator.serviceWorker.ready.then(serviceWorkerReg=>{return serviceWorkerReg.pushManager.getSubscription().then(subscription=>{console.log(\"\".concat(LOG_PREFIX,\" Service Worker Ready: subscription:\"),subscription);if(subscription===null){console.log(\"\".concat(LOG_PREFIX,\" User is not subscribed.\"));return false;}else{console.log(\"\".concat(LOG_PREFIX,\" User is already subscribed.\"));return true;}});});}export function unsubscribeFromPushNotification(){console.log(\"\".concat(LOG_PREFIX,\" Inside unsub to push.\"));return navigator.serviceWorker.ready.then(serviceWorkerReg=>{return serviceWorkerReg.pushManager.getSubscription().then(subscription=>{if(subscription){return subscription.unsubscribe().then(()=>{console.log(\"\".concat(LOG_PREFIX,\" User is unsubscribed.\"));return subscription;}).catch(err=>{console.log(\"\".concat(LOG_PREFIX,\" Failed to unsubscribe the user: \"),err);});}});});}","map":{"version":3,"names":["LOG_PREFIX","isLocalhost","Boolean","window","location","hostname","match","register","config","console","log","concat","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message","subscribeUserToPush","serviceWorkerReg","pushManager","getSubscription","subscription","subscribe","userVisibleOnly","applicationServerKey","newSubs","err","checkPushNotificationSubscription","unsubscribeFromPushNotification","unsubscribe"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/serviceWorkerRegistration.js"],"sourcesContent":["/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst LOG_PREFIX = \"[ServiceWorker]\";\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  console.log(`${LOG_PREFIX} inside register SW`);\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    console.log(`${LOG_PREFIX} public url: ${publicUrl}`);\n    console.log(`${LOG_PREFIX} origin url: ${window.location.origin}`);\n    console.log(`${LOG_PREFIX} equality url: ${publicUrl.origin !== window.location.origin}`);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(`${LOG_PREFIX} running localhost: isLocalhost : ${isLocalhost}`);\n      if (isLocalhost) {\n        console.log(`${LOG_PREFIX} running localhost: isLocalhost : ${isLocalhost}, swUrl: ${swUrl}`);\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(LOG_PREFIX,\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(`[${LOG_PREFIX}] Content is cached for offline use.`);\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(`[${LOG_PREFIX}] Error during service worker registration:`, error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  console.log(`${LOG_PREFIX} inside checkValidServiceWorker SW`);\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      console.log(`${LOG_PREFIX} inside checkValidServiceWorker SW: response:`, response);\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      console.log(`${LOG_PREFIX} inside checkValidServiceWorker SW: contentType:`, contentType);\n      console.log(`${LOG_PREFIX} inside checkValidServiceWorker SW: response.status:`, response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1));\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        console.log(`${LOG_PREFIX} inside checkValidServiceWorker SW: unregistering SW`);\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(`[${LOG_PREFIX}] No internet connection found. App is running in offline mode.`);\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n\nexport function subscribeUserToPush() {\n  console.log(`${LOG_PREFIX} Inside subs to push.`);\n  return navigator.serviceWorker.ready.then((serviceWorkerReg) => {\n    console.log(`${LOG_PREFIX} Service Worker Ready`);\n    return serviceWorkerReg.pushManager.getSubscription().then((subscription) => {\n      console.log(`${LOG_PREFIX} Service Worker Ready: subscription:`, subscription);\n      if (subscription === null) {\n        return serviceWorkerReg.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: \"BJT_vxXDhe1RmUxC_e7oGoHj5L2aPNHxhGtDqPAQmlyfnX3ldlHPaC8Bhy1hu8WzAG_2F3qsiBLm-Z7I7pE3zYE\",\n        }).then((newSubs) => {\n          console.log(`${LOG_PREFIX} User is subscribed.`);\n          console.log(LOG_PREFIX, newSubs);\n          return newSubs;\n        }).catch((err) => {\n          console.log(`${LOG_PREFIX} Failed to subscribe the user: `, err);\n        });\n      } else {\n        console.log(`${LOG_PREFIX} User is already subscribed.`);\n        return subscription;\n      }\n    });\n  });\n  // const subscription = serviceWorkerReg.pushManager.getSubscription();\n  // console.log(`${LOG_PREFIX} Service Worker Ready: subscription:`, subscription);\n  // if (subscription === null) {\n  //   serviceWorkerReg.pushManager.subscribe({\n  //     userVisibleOnly: true,\n  //     applicationServerKey: \"BKemtwM7irZVq7QiMjpIvx_pioe-DDN-T2mdceu_bE57MjttTD_BPmZYrnUfyNaQsOJ28oub9l_-UW8yqBDo\",\n  //   }).then((subscription) => {\n  //     console.log(`${LOG_PREFIX} User is subscribed.`);\n  //     console.log(LOG_PREFIX, subscription);\n  //   }).catch((err) => {\n  //     console.log(`${LOG_PREFIX} Failed to subscribe the user: `, err);\n  //   });\n  // }\n}\n\nexport function checkPushNotificationSubscription() {\n  console.log(`${LOG_PREFIX} Inside check subs to push.`);\n  return navigator.serviceWorker.ready.then((serviceWorkerReg) => {\n    return serviceWorkerReg.pushManager.getSubscription().then((subscription) => {\n      console.log(`${LOG_PREFIX} Service Worker Ready: subscription:`, subscription);\n      if (subscription === null) {\n        console.log(`${LOG_PREFIX} User is not subscribed.`);\n        return false;\n      } else {\n        console.log(`${LOG_PREFIX} User is already subscribed.`);\n        return true;\n      }\n    });\n  });\n}\n\nexport function unsubscribeFromPushNotification() {\n  console.log(`${LOG_PREFIX} Inside unsub to push.`);\n  return navigator.serviceWorker.ready.then((serviceWorkerReg) => {\n    return serviceWorkerReg.pushManager.getSubscription().then((subscription) => {\n      if (subscription) {\n        return subscription.unsubscribe().then(() => {\n          console.log(`${LOG_PREFIX} User is unsubscribed.`);\n          return subscription;\n        }).catch((err) => {\n          console.log(`${LOG_PREFIX} Failed to unsubscribe the user: `, err);\n        });\n      }\n    });\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}