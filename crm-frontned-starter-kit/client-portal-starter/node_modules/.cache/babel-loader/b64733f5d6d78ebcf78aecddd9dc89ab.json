{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _linkedList = _interopRequireDefault(require(\"./linkedList\"));\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new _linkedList[\"default\"]();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0; // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    } else if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    } // perfect match\n\n    return 0;\n  } // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  } // The main loop of the algorithm\n\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness;\n    var currentLine = 0;\n    var tmpSum;\n    var currentClass = 0;\n    var fitnessClass;\n    var candidate;\n    var newNode; // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }]; // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine); // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        } // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3); // Positive penalty\n\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2); // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2); // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          } // Calculate the fitness class for this candidate active node.\n\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          } // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          } // Add the total demerits of the active node to get the total demerits of this candidate node.\n\n          demerits += active.data.demerits; // Only store the best candidate for each fitness class\n\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n        active = next; // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new _linkedList[\"default\"].Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  } // Add an active node for the start of the paragraph.\n\n  activeNodes.push(new _linkedList[\"default\"].Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\nvar _default = linebreak;\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","_linkedList","linebreak","nodes","lines","settings","options","demerits","line","flagged","fitness","tolerance","activeNodes","sum","width","stretch","shrink","lineLengths","breaks","tmp","data","Infinity","breakpoint","position","ratio","fitnessClass","totals","previous","computeCost","start","end","active","currentLine","lineLength","length","type","infinity","computeSum","breakPointIndex","result","i","penalty","mainLoop","node","index","first","next","candidates","badness","tmpSum","currentClass","candidate","newNode","remove","Math","pow","abs","Node","insertBefore","push","undefined","forEach","size","reverse","glue","value","box","hyphenated","_default"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/node_modules/@react-pdf/textkit/engines/linebreaker/linebreak.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _linkedList = _interopRequireDefault(require(\"./linkedList\"));\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new _linkedList[\"default\"]();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0; // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n\n      return linebreak.infinity;\n    } else if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n\n      return linebreak.infinity;\n    } // perfect match\n\n\n    return 0;\n  } // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n\n\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n\n    return result;\n  } // The main loop of the algorithm\n\n\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness;\n    var currentLine = 0;\n    var tmpSum;\n    var currentClass = 0;\n    var fitnessClass;\n    var candidate;\n    var newNode; // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }]; // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine); // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        } // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n\n\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3); // Positive penalty\n\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2); // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2); // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          } // Calculate the fitness class for this candidate active node.\n\n\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          } // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n\n\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          } // Add the total demerits of the active node to get the total demerits of this candidate node.\n\n\n          demerits += active.data.demerits; // Only store the best candidate for each fitness class\n\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n\n        active = next; // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n\n      tmpSum = computeSum(index);\n\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n\n        if (candidate.demerits < Infinity) {\n          newNode = new _linkedList[\"default\"].Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  } // Add an active node for the start of the paragraph.\n\n\n  activeNodes.push(new _linkedList[\"default\"].Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n\n    return breaks.reverse();\n  }\n\n  return [];\n};\n\nlinebreak.infinity = 10000;\n\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\n\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\n\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\n\nvar _default = linebreak;\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}