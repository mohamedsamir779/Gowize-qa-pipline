{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _copy = _interopRequireDefault(require(\"./copy\"));\nvar _slice = _interopRequireDefault(require(\"./slice\"));\nvar _concat = _interopRequireDefault(require(\"./concat\"));\nvar _append = _interopRequireDefault(require(\"./append\"));\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy[\"default\"])(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice[\"default\"])(0, index, run);\n  var trailingRun = (0, _slice[\"default\"])(index, Infinity, run);\n  return (0, _concat[\"default\"])((0, _append[\"default\"])(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont[\"default\"])(run);\n  var glyph = (0, _isNumber[\"default\"])(value) ? (0, _fromCodePoint[\"default\"])(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\nvar _default = R.curryN(3, insert);\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_copy","_slice","_concat","_append","_getFont","_isNumber","_fromCodePoint","insertGlyph","index","glyph","run","leadingRun","trailingRun","Infinity","insert","value","font","_default","curryN"],"sources":["/home/ubuntu/king/portal/client-portal-starter/node_modules/@react-pdf/textkit/run/insert.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _copy = _interopRequireDefault(require(\"./copy\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice\"));\n\nvar _concat = _interopRequireDefault(require(\"./concat\"));\n\nvar _append = _interopRequireDefault(require(\"./append\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\n\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy[\"default\"])(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice[\"default\"])(0, index, run);\n  var trailingRun = (0, _slice[\"default\"])(index, Infinity, run);\n  return (0, _concat[\"default\"])((0, _append[\"default\"])(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont[\"default\"])(run);\n  var glyph = (0, _isNumber[\"default\"])(value) ? (0, _fromCodePoint[\"default\"])(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\n\nvar _default = R.curryN(3, insert);\n\nexports[\"default\"] = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAEpF,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAA+C,CAAC;AAEtFE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AAE3B,IAAIE,CAAC,GAAGH,uBAAuB,CAACD,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAErD,IAAIM,MAAM,GAAGP,sBAAsB,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;AAEvD,IAAIO,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AAEzD,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AAEzD,IAAIS,QAAQ,GAAGV,sBAAsB,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;AAE3D,IAAIU,SAAS,GAAGX,sBAAsB,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAEpE,IAAIW,cAAc,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,wBAAwB,CAAC,CAAC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIY,WAAW,GAAG,SAASA,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAE;EACxD,IAAI,CAACD,KAAK,EAAE,OAAO,CAAC,CAAC,EAAET,KAAK,CAAC,SAAS,CAAC,EAAEU,GAAG,CAAC,CAAC,CAAC;;EAE/C,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAEV,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,EAAEO,KAAK,EAAEE,GAAG,CAAC;EACtD,IAAIE,WAAW,GAAG,CAAC,CAAC,EAAEX,MAAM,CAAC,SAAS,CAAC,EAAEO,KAAK,EAAEK,QAAQ,EAAEH,GAAG,CAAC;EAC9D,OAAO,CAAC,CAAC,EAAER,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEC,OAAO,CAAC,SAAS,CAAC,EAAEM,KAAK,EAAEE,UAAU,CAAC,EAAEC,WAAW,CAAC;AACzF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIE,MAAM,GAAG,SAASA,MAAMA,CAACN,KAAK,EAAEO,KAAK,EAAEL,GAAG,EAAE;EAC9C,IAAIM,IAAI,GAAG,CAAC,CAAC,EAAEZ,QAAQ,CAAC,SAAS,CAAC,EAAEM,GAAG,CAAC;EACxC,IAAID,KAAK,GAAG,CAAC,CAAC,EAAEJ,SAAS,CAAC,SAAS,CAAC,EAAEU,KAAK,CAAC,GAAG,CAAC,CAAC,EAAET,cAAc,CAAC,SAAS,CAAC,EAAES,KAAK,EAAEC,IAAI,CAAC,GAAGD,KAAK;EAClG,OAAOR,WAAW,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;AACvC,CAAC;AAED,IAAIO,QAAQ,GAAGlB,CAAC,CAACmB,MAAM,CAAC,CAAC,EAAEJ,MAAM,CAAC;AAElCjB,OAAO,CAAC,SAAS,CAAC,GAAGoB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}