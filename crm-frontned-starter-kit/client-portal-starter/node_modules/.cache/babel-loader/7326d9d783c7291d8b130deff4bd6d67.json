{"ast":null,"code":"import stream from 'stream';\nimport zlib from 'zlib';\nimport fontkit from '@react-pdf/fontkit';\nimport LZString from 'lz-string';\nimport PNG from '@react-pdf/png-js';\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\nvar PDFReference = function (_stream$Writable) {\n  inherits(PDFReference, _stream$Writable);\n  function PDFReference(document, id, data) {\n    classCallCheck(this, PDFReference);\n    var _this = possibleConstructorReturn(this, (PDFReference.__proto__ || Object.getPrototypeOf(PDFReference)).call(this, {\n      decodeStrings: false\n    }));\n    _this.finalize = _this.finalize.bind(_this);\n    _this.document = document;\n    _this.id = id;\n    if (data == null) {\n      data = {};\n    }\n    _this.data = data;\n    _this.gen = 0;\n    _this.deflate = null;\n    _this.compress = _this.document.compress && !_this.data.Filter;\n    _this.uncompressedLength = 0;\n    _this.chunks = [];\n    return _this;\n  }\n  createClass(PDFReference, [{\n    key: 'initDeflate',\n    value: function initDeflate() {\n      var _this2 = this;\n      this.data.Filter = 'FlateDecode';\n      this.deflate = zlib.createDeflate();\n      this.deflate.on('data', function (chunk) {\n        _this2.chunks.push(chunk);\n        return _this2.data.Length += chunk.length;\n      });\n      return this.deflate.on('end', this.finalize);\n    }\n  }, {\n    key: '_write',\n    value: function _write(chunk, encoding, callback) {\n      if (!Buffer.isBuffer(chunk)) {\n        chunk = new Buffer(chunk + '\\n', 'binary');\n      }\n      this.uncompressedLength += chunk.length;\n      if (this.data.Length == null) {\n        this.data.Length = 0;\n      }\n      if (this.compress) {\n        if (!this.deflate) {\n          this.initDeflate();\n        }\n        this.deflate.write(chunk);\n      } else {\n        this.chunks.push(chunk);\n        this.data.Length += chunk.length;\n      }\n      return callback();\n    }\n  }, {\n    key: 'end',\n    value: function end(chunk) {\n      get(PDFReference.prototype.__proto__ || Object.getPrototypeOf(PDFReference.prototype), 'end', this).apply(this, arguments);\n      if (this.deflate) {\n        return this.deflate.end();\n      } else {\n        return this.finalize();\n      }\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      this.offset = this.document._offset;\n      this.document._write(this.id + ' ' + this.gen + ' obj');\n      this.document._write(PDFObject.convert(this.data));\n      if (this.chunks.length) {\n        this.document._write('stream');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = Array.from(this.chunks)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var chunk = _step.value;\n            this.document._write(chunk);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        this.chunks.length = 0; // free up memory\n        this.document._write('\\nendstream');\n      }\n      this.document._write('endobj');\n      return this.document._refEnd(this);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return this.id + ' ' + this.gen + ' R';\n    }\n  }]);\n  return PDFReference;\n}(stream.Writable);\n\n/*\nPDFNameTree - represents a name tree object\n*/\n\nvar PDFNameTree = function () {\n  function PDFNameTree() {\n    classCallCheck(this, PDFNameTree);\n    this._items = {};\n  }\n  createClass(PDFNameTree, [{\n    key: 'add',\n    value: function add(key, val) {\n      return this._items[key] = val;\n    }\n  }, {\n    key: 'get',\n    value: function get$$1(key) {\n      return this._items[key];\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      // Needs to be sorted by key\n      var sortedKeys = Object.keys(this._items).sort(function (a, b) {\n        return a.localeCompare(b);\n      });\n      var out = ['<<'];\n      if (sortedKeys.length > 1) {\n        var first = sortedKeys[0],\n          last = sortedKeys[sortedKeys.length - 1];\n        out.push('  /Limits ' + PDFObject.convert([new String(first), new String(last)]));\n      }\n      out.push('  /Names [');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          out.push('    ' + PDFObject.convert(new String(key)) + ' ' + PDFObject.convert(this._items[key]));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      out.push(']');\n      out.push('>>');\n      return out.join('\\n');\n    }\n  }]);\n  return PDFNameTree;\n}();\nvar escapableRe = /[\\n\\r\\t\\b\\f\\(\\)\\\\]/g;\nvar escapable = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\\\': '\\\\\\\\',\n  '(': '\\\\(',\n  ')': '\\\\)'\n};\nvar pad = function pad(str, length) {\n  return (Array(length + 1).join('0') + str).slice(-length);\n};\n\n// Convert little endian UTF-16 to big endian\nvar swapBytes = function swapBytes(buff) {\n  var l = buff.length;\n  if (l & 0x01) {\n    throw new Error('Buffer length must be even');\n  } else {\n    for (var i = 0, end = l - 1; i < end; i += 2) {\n      var a = buff[i];\n      buff[i] = buff[i + 1];\n      buff[i + 1] = a;\n    }\n  }\n  return buff;\n};\nvar PDFObject = function () {\n  function PDFObject() {\n    classCallCheck(this, PDFObject);\n  }\n  createClass(PDFObject, null, [{\n    key: 'convert',\n    value: function convert(object) {\n      // String literals are converted to the PDF name type\n      if (typeof object === 'string') {\n        return '/' + object;\n\n        // String objects are converted to PDF strings (UTF-16)\n      } else if (object instanceof String) {\n        var string = object;\n        // Detect if this is a unicode string\n        var isUnicode = false;\n        for (var i = 0, end = string.length; i < end; i++) {\n          if (string.charCodeAt(i) > 0x7f) {\n            isUnicode = true;\n            break;\n          }\n        }\n\n        // If so, encode it as big endian UTF-16\n        if (isUnicode) {\n          string = swapBytes(new Buffer('\\uFEFF' + string, 'utf16le')).toString('binary');\n        }\n\n        // Escape characters as required by the spec\n        string = string.replace(escapableRe, function (c) {\n          return escapable[c];\n        });\n        return '(' + string + ')';\n\n        // Buffers are converted to PDF hex strings\n      } else if (Buffer.isBuffer(object)) {\n        return '<' + object.toString('hex') + '>';\n      } else if (object instanceof PDFReference || object instanceof PDFNameTree) {\n        return object.toString();\n      } else if (object instanceof Date) {\n        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';\n      } else if (Array.isArray(object)) {\n        var items = Array.from(object).map(function (e) {\n          return PDFObject.convert(e);\n        }).join(' ');\n        return '[' + items + ']';\n      } else if ({}.toString.call(object) === '[object Object]') {\n        var out = ['<<'];\n        for (var key in object) {\n          var val = object[key];\n          out.push('/' + key + ' ' + PDFObject.convert(val));\n        }\n        out.push('>>');\n        return out.join('\\n');\n      } else if (typeof object === 'number') {\n        return PDFObject.number(object);\n      } else {\n        return '' + object;\n      }\n    }\n  }, {\n    key: 'number',\n    value: function number(n) {\n      if (n > -1e21 && n < 1e21) {\n        return Math.round(n * 1e6) / 1e6;\n      }\n      throw new Error('unsupported number: ' + n);\n    }\n  }]);\n  return PDFObject;\n}();\nvar SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n};\nvar PDFPage = function () {\n  function PDFPage(document, options) {\n    var _this = this;\n    classCallCheck(this, PDFPage);\n    this.document = document;\n    if (options == null) {\n      options = {};\n    }\n    this.size = options.size || 'letter';\n    this.layout = options.layout || 'portrait';\n\n    // calculate page dimensions\n    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];\n    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];\n    this.content = this.document.ref();\n\n    // Initialize the Font, XObject, and ExtGState dictionaries\n    this.resources = this.document.ref({\n      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']\n    });\n\n    // Lazily create these dictionaries\n    Object.defineProperties(this, {\n      fonts: {\n        get: function get$$1() {\n          return _this.resources.data.Font != null ? _this.resources.data.Font : _this.resources.data.Font = {};\n        }\n      },\n      xobjects: {\n        get: function get$$1() {\n          return _this.resources.data.XObject != null ? _this.resources.data.XObject : _this.resources.data.XObject = {};\n        }\n      },\n      ext_gstates: {\n        get: function get$$1() {\n          return _this.resources.data.ExtGState != null ? _this.resources.data.ExtGState : _this.resources.data.ExtGState = {};\n        }\n      },\n      patterns: {\n        get: function get$$1() {\n          return _this.resources.data.Pattern != null ? _this.resources.data.Pattern : _this.resources.data.Pattern = {};\n        }\n      },\n      annotations: {\n        get: function get$$1() {\n          return _this.dictionary.data.Annots != null ? _this.dictionary.data.Annots : _this.dictionary.data.Annots = [];\n        }\n      }\n    });\n\n    // The page dictionary\n    this.dictionary = this.document.ref({\n      Type: 'Page',\n      Parent: this.document._root.data.Pages,\n      MediaBox: [0, 0, this.width, this.height],\n      Contents: this.content,\n      Resources: this.resources\n    });\n  }\n  createClass(PDFPage, [{\n    key: 'maxY',\n    value: function maxY() {\n      return this.height;\n    }\n  }, {\n    key: 'write',\n    value: function write(chunk) {\n      return this.content.write(chunk);\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.dictionary.end();\n      this.resources.end();\n      return this.content.end();\n    }\n  }]);\n  return PDFPage;\n}();\nvar number = PDFObject.number;\nvar PDFGradient$1 = function () {\n  function PDFGradient(doc) {\n    classCallCheck(this, PDFGradient);\n    this.doc = doc;\n    this.stops = [];\n    this.embedded = false;\n    this.transform = [1, 0, 0, 1, 0, 0];\n  }\n  createClass(PDFGradient, [{\n    key: 'stop',\n    value: function stop(pos, color, opacity) {\n      if (opacity == null) {\n        opacity = 1;\n      }\n      color = this.doc._normalizeColor(color);\n      if (this.stops.length === 0) {\n        if (color.length === 3) {\n          this._colorSpace = 'DeviceRGB';\n        } else if (color.length === 4) {\n          this._colorSpace = 'DeviceCMYK';\n        } else if (color.length === 1) {\n          this._colorSpace = 'DeviceGray';\n        } else {\n          throw new Error('Unknown color space');\n        }\n      } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {\n        throw new Error('All gradient stops must use the same color space');\n      }\n      opacity = Math.max(0, Math.min(1, opacity));\n      this.stops.push([pos, color, opacity]);\n      return this;\n    }\n  }, {\n    key: 'setTransform',\n    value: function setTransform(m11, m12, m21, m22, dx, dy) {\n      this.transform = [m11, m12, m21, m22, dx, dy];\n      return this;\n    }\n  }, {\n    key: 'embed',\n    value: function embed(m) {\n      var fn = void 0;\n      var stopsLength = this.stops.length;\n      if (stopsLength === 0) {\n        return;\n      }\n      this.embedded = true;\n      this.matrix = m;\n\n      // if the last stop comes before 100%, add a copy at 100%\n      var last = this.stops[stopsLength - 1];\n      if (last[0] < 1) {\n        this.stops.push([1, last[1], last[2]]);\n      }\n      var bounds = [];\n      var encode = [];\n      var stops = [];\n      for (var i = 0; i < stopsLength - 1; i++) {\n        encode.push(0, 1);\n        if (i + 2 !== stopsLength) {\n          bounds.push(this.stops[i + 1][0]);\n        }\n        fn = this.doc.ref({\n          FunctionType: 2,\n          Domain: [0, 1],\n          C0: this.stops[i + 0][1],\n          C1: this.stops[i + 1][1],\n          N: 1\n        });\n        stops.push(fn);\n        fn.end();\n      }\n\n      // if there are only two stops, we don't need a stitching function\n      if (stopsLength === 1) {\n        fn = stops[0];\n      } else {\n        fn = this.doc.ref({\n          FunctionType: 3,\n          // stitching function\n          Domain: [0, 1],\n          Functions: stops,\n          Bounds: bounds,\n          Encode: encode\n        });\n        fn.end();\n      }\n      this.id = 'Sh' + ++this.doc._gradCount;\n      var shader = this.shader(fn);\n      shader.end();\n      var pattern = this.doc.ref({\n        Type: 'Pattern',\n        PatternType: 2,\n        Shading: shader,\n        Matrix: this.matrix.map(number)\n      });\n      pattern.end();\n      if (this.stops.some(function (stop) {\n        return stop[2] < 1;\n      })) {\n        var grad = this.opacityGradient();\n        grad._colorSpace = 'DeviceGray';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = this.stops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var stop = _step.value;\n            grad.stop(stop[0], [stop[2]]);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        grad = grad.embed(this.matrix);\n        var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];\n        var form = this.doc.ref({\n          Type: 'XObject',\n          Subtype: 'Form',\n          FormType: 1,\n          BBox: pageBBox,\n          Group: {\n            Type: 'Group',\n            S: 'Transparency',\n            CS: 'DeviceGray'\n          },\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: grad\n            }\n          }\n        });\n        form.write('/Pattern cs /Sh1 scn');\n        form.end(pageBBox.join(' ') + ' re f');\n        var gstate = this.doc.ref({\n          Type: 'ExtGState',\n          SMask: {\n            Type: 'Mask',\n            S: 'Luminosity',\n            G: form\n          }\n        });\n        gstate.end();\n        var opacityPattern = this.doc.ref({\n          Type: 'Pattern',\n          PatternType: 1,\n          PaintType: 1,\n          TilingType: 2,\n          BBox: pageBBox,\n          XStep: pageBBox[2],\n          YStep: pageBBox[3],\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: pattern\n            },\n            ExtGState: {\n              Gs1: gstate\n            }\n          }\n        });\n        opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');\n        opacityPattern.end(pageBBox.join(' ') + ' re f');\n        this.doc.page.patterns[this.id] = opacityPattern;\n      } else {\n        this.doc.page.patterns[this.id] = pattern;\n      }\n      return pattern;\n    }\n  }, {\n    key: 'apply',\n    value: function apply(op) {\n      // apply gradient transform to existing document ctm\n      var _doc$_ctm = slicedToArray(this.doc._ctm, 6),\n        m0 = _doc$_ctm[0],\n        m1 = _doc$_ctm[1],\n        m2 = _doc$_ctm[2],\n        m3 = _doc$_ctm[3],\n        m4 = _doc$_ctm[4],\n        m5 = _doc$_ctm[5];\n      var _transform = slicedToArray(this.transform, 6),\n        m11 = _transform[0],\n        m12 = _transform[1],\n        m21 = _transform[2],\n        m22 = _transform[3],\n        dx = _transform[4],\n        dy = _transform[5];\n      var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];\n      if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {\n        this.embed(m);\n      }\n      return this.doc.addContent('/' + this.id + ' ' + op);\n    }\n  }]);\n  return PDFGradient;\n}();\nvar PDFLinearGradient$1 = function (_PDFGradient) {\n  inherits(PDFLinearGradient, _PDFGradient);\n  function PDFLinearGradient(doc, x1, y1, x2, y2) {\n    classCallCheck(this, PDFLinearGradient);\n    var _this = possibleConstructorReturn(this, (PDFLinearGradient.__proto__ || Object.getPrototypeOf(PDFLinearGradient)).call(this, doc));\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n  createClass(PDFLinearGradient, [{\n    key: 'shader',\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 2,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.x2, this.y2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: 'opacityGradient',\n    value: function opacityGradient() {\n      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n    }\n  }]);\n  return PDFLinearGradient;\n}(PDFGradient$1);\nvar PDFRadialGradient$1 = function (_PDFGradient2) {\n  inherits(PDFRadialGradient, _PDFGradient2);\n  function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {\n    classCallCheck(this, PDFRadialGradient);\n    var _this2 = possibleConstructorReturn(this, (PDFRadialGradient.__proto__ || Object.getPrototypeOf(PDFRadialGradient)).call(this, doc));\n    _this2.doc = doc;\n    _this2.x1 = x1;\n    _this2.y1 = y1;\n    _this2.r1 = r1;\n    _this2.x2 = x2;\n    _this2.y2 = y2;\n    _this2.r2 = r2;\n    return _this2;\n  }\n  createClass(PDFRadialGradient, [{\n    key: 'shader',\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 3,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: 'opacityGradient',\n    value: function opacityGradient() {\n      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n    }\n  }]);\n  return PDFRadialGradient;\n}(PDFGradient$1);\nvar Gradient = {\n  PDFGradient: PDFGradient$1,\n  PDFLinearGradient: PDFLinearGradient$1,\n  PDFRadialGradient: PDFRadialGradient$1\n};\nvar PDFGradient = Gradient.PDFGradient;\nvar PDFLinearGradient = Gradient.PDFLinearGradient;\nvar PDFRadialGradient = Gradient.PDFRadialGradient;\nvar Color = {\n  initColor: function initColor() {\n    // The opacity dictionaries\n    this._opacityRegistry = {};\n    this._opacityCount = 0;\n    return this._gradCount = 0;\n  },\n  _normalizeColor: function _normalizeColor(color) {\n    if (color instanceof PDFGradient) {\n      return color;\n    }\n    var part = void 0;\n    if (typeof color === 'string') {\n      if (color.charAt(0) === '#') {\n        if (color.length === 4) {\n          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');\n        }\n        var hex = parseInt(color.slice(1), 16);\n        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];\n      } else if (namedColors[color]) {\n        color = namedColors[color];\n      }\n    }\n    if (Array.isArray(color)) {\n      // RGB\n      if (color.length === 3) {\n        color = function () {\n          var result = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n          try {\n            for (var _iterator = Array.from(color)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              part = _step.value;\n              result.push(part / 255);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n          return result;\n        }();\n\n        // CMYK\n      } else if (color.length === 4) {\n        color = function () {\n          var result1 = [];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n          try {\n            for (var _iterator2 = Array.from(color)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              part = _step2.value;\n              result1.push(part / 100);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n          return result1;\n        }();\n      }\n      return color;\n    }\n    return null;\n  },\n  _setColor: function _setColor(color, stroke) {\n    color = this._normalizeColor(color);\n    if (!color) {\n      return false;\n    }\n    var op = stroke ? 'SCN' : 'scn';\n    if (color instanceof PDFGradient) {\n      this._setColorSpace('Pattern', stroke);\n      color.apply(op);\n    } else {\n      var space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';\n      this._setColorSpace(space, stroke);\n      color = color.join(' ');\n      this.addContent(color + ' ' + op);\n    }\n    return true;\n  },\n  _setColorSpace: function _setColorSpace(space, stroke) {\n    var op = stroke ? 'CS' : 'cs';\n    return this.addContent('/' + space + ' ' + op);\n  },\n  fillColor: function fillColor(color, opacity) {\n    var set$$1 = this._setColor(color, false);\n    if (set$$1) {\n      this.fillOpacity(opacity);\n    }\n\n    // save this for text wrapper, which needs to reset\n    // the fill color on new pages\n    this._fillColor = [color, opacity];\n    return this;\n  },\n  strokeColor: function strokeColor(color, opacity) {\n    var set$$1 = this._setColor(color, true);\n    if (set$$1) {\n      this.strokeOpacity(opacity);\n    }\n    return this;\n  },\n  opacity: function opacity(_opacity) {\n    this._doOpacity(_opacity, _opacity);\n    return this;\n  },\n  fillOpacity: function fillOpacity(opacity) {\n    this._doOpacity(opacity, null);\n    return this;\n  },\n  strokeOpacity: function strokeOpacity(opacity) {\n    this._doOpacity(null, opacity);\n    return this;\n  },\n  _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {\n    var dictionary = void 0,\n      name = void 0;\n    if (fillOpacity == null && strokeOpacity == null) {\n      return;\n    }\n    if (fillOpacity != null) {\n      fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n    }\n    if (strokeOpacity != null) {\n      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n    }\n    var key = fillOpacity + '_' + strokeOpacity;\n    if (this._opacityRegistry[key]) {\n      var _Array$from = Array.from(this._opacityRegistry[key]);\n      var _Array$from2 = slicedToArray(_Array$from, 2);\n      dictionary = _Array$from2[0];\n      name = _Array$from2[1];\n    } else {\n      dictionary = {\n        Type: 'ExtGState'\n      };\n      if (fillOpacity != null) {\n        dictionary.ca = fillOpacity;\n      }\n      if (strokeOpacity != null) {\n        dictionary.CA = strokeOpacity;\n      }\n      dictionary = this.ref(dictionary);\n      dictionary.end();\n      var id = ++this._opacityCount;\n      name = 'Gs' + id;\n      this._opacityRegistry[key] = [dictionary, name];\n    }\n    this.page.ext_gstates[name] = dictionary;\n    return this.addContent('/' + name + ' gs');\n  },\n  linearGradient: function linearGradient(x1, y1, x2, y2) {\n    return new PDFLinearGradient(this, x1, y1, x2, y2);\n  },\n  radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {\n    return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);\n  }\n};\nvar namedColors = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\nvar SVGPath = function () {\n  var parameters = undefined;\n  var parse = undefined;\n  var cx = undefined;\n  var _apply = undefined;\n  var runners = undefined;\n  var solveArc = undefined;\n  var arcToSegments = undefined;\n  var segmentToBezier = undefined;\n  SVGPath = function () {\n    function SVGPath() {\n      classCallCheck(this, SVGPath);\n    }\n    createClass(SVGPath, null, [{\n      key: 'initClass',\n      value: function initClass() {\n        var cy = void 0,\n          px = void 0,\n          py = void 0,\n          sx = void 0,\n          sy = void 0;\n        parameters = {\n          A: 7,\n          a: 7,\n          C: 6,\n          c: 6,\n          H: 1,\n          h: 1,\n          L: 2,\n          l: 2,\n          M: 2,\n          m: 2,\n          Q: 4,\n          q: 4,\n          S: 4,\n          s: 4,\n          T: 2,\n          t: 2,\n          V: 1,\n          v: 1,\n          Z: 0,\n          z: 0\n        };\n        parse = function parse(path) {\n          var cmd = void 0;\n          var ret = [];\n          var args = [];\n          var curArg = '';\n          var foundDecimal = false;\n          var params = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n          try {\n            for (var _iterator = Array.from(path)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var c = _step.value;\n              if (parameters[c] != null) {\n                params = parameters[c];\n                if (cmd) {\n                  // save existing command\n                  if (curArg.length > 0) {\n                    args[args.length] = +curArg;\n                  }\n                  ret[ret.length] = {\n                    cmd: cmd,\n                    args: args\n                  };\n                  args = [];\n                  curArg = '';\n                  foundDecimal = false;\n                }\n                cmd = c;\n              } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {\n                if (curArg.length === 0) {\n                  continue;\n                }\n                if (args.length === params) {\n                  // handle reused commands\n                  ret[ret.length] = {\n                    cmd: cmd,\n                    args: args\n                  };\n                  args = [+curArg];\n\n                  // handle assumed commands\n                  if (cmd === 'M') {\n                    cmd = 'L';\n                  }\n                  if (cmd === 'm') {\n                    cmd = 'l';\n                  }\n                } else {\n                  args[args.length] = +curArg;\n                }\n                foundDecimal = c === '.';\n\n                // fix for negative numbers or repeated decimals with no delimeter between commands\n                curArg = ['-', '.'].includes(c) ? c : '';\n              } else {\n                curArg += c;\n                if (c === '.') {\n                  foundDecimal = true;\n                }\n              }\n            }\n\n            // add the last command\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n          if (curArg.length > 0) {\n            if (args.length === params) {\n              // handle reused commands\n              ret[ret.length] = {\n                cmd: cmd,\n                args: args\n              };\n              args = [+curArg];\n\n              // handle assumed commands\n              if (cmd === 'M') {\n                cmd = 'L';\n              }\n              if (cmd === 'm') {\n                cmd = 'l';\n              }\n            } else {\n              args[args.length] = +curArg;\n            }\n          }\n          ret[ret.length] = {\n            cmd: cmd,\n            args: args\n          };\n          return ret;\n        };\n        cx = cy = px = py = sx = sy = 0;\n        _apply = function _apply(commands, doc) {\n          // current point, control point, and subpath starting point\n          cx = cy = px = py = sx = sy = 0;\n\n          // run the commands\n          for (var i = 0; i < commands.length; i++) {\n            var c = commands[i];\n            if (typeof runners[c.cmd] === 'function') {\n              runners[c.cmd](doc, c.args);\n            }\n          }\n          return cx = cy = px = py = 0;\n        };\n        runners = {\n          M: function M(doc, a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return doc.moveTo(cx, cy);\n          },\n          m: function m(doc, a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return doc.moveTo(cx, cy);\n          },\n          C: function C(doc, a) {\n            cx = a[4];\n            cy = a[5];\n            px = a[2];\n            py = a[3];\n            return doc.bezierCurveTo.apply(doc, toConsumableArray(Array.from(a || [])));\n          },\n          c: function c(doc, a) {\n            doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n            px = cx + a[2];\n            py = cy + a[3];\n            cx += a[4];\n            return cy += a[5];\n          },\n          S: function S(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            }\n            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            return cy = a[3];\n          },\n          s: function s(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            }\n            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            return cy += a[3];\n          },\n          Q: function Q(doc, a) {\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            cy = a[3];\n            return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n          },\n          q: function q(doc, a) {\n            doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            return cy += a[3];\n          },\n          T: function T(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            } else {\n              px = cx - (px - cx);\n              py = cy - (py - cy);\n            }\n            doc.quadraticCurveTo(px, py, a[0], a[1]);\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n            cx = a[0];\n            return cy = a[1];\n          },\n          t: function t(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            } else {\n              px = cx - (px - cx);\n              py = cy - (py - cy);\n            }\n            doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n            cx += a[0];\n            return cy += a[1];\n          },\n          A: function A(doc, a) {\n            solveArc(doc, cx, cy, a);\n            cx = a[5];\n            return cy = a[6];\n          },\n          a: function a(doc, _a) {\n            _a[5] += cx;\n            _a[6] += cy;\n            solveArc(doc, cx, cy, _a);\n            cx = _a[5];\n            return cy = _a[6];\n          },\n          L: function L(doc, a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          l: function l(doc, a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          H: function H(doc, a) {\n            cx = a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          h: function h(doc, a) {\n            cx += a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          V: function V(doc, a) {\n            cy = a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          v: function v(doc, a) {\n            cy += a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          Z: function Z(doc) {\n            doc.closePath();\n            cx = sx;\n            return cy = sy;\n          },\n          z: function z(doc) {\n            doc.closePath();\n            cx = sx;\n            return cy = sy;\n          }\n        };\n        solveArc = function solveArc(doc, x, y, coords) {\n          var _Array$from = Array.from(coords),\n            _Array$from2 = slicedToArray(_Array$from, 7),\n            rx = _Array$from2[0],\n            ry = _Array$from2[1],\n            rot = _Array$from2[2],\n            large = _Array$from2[3],\n            sweep = _Array$from2[4],\n            ex = _Array$from2[5],\n            ey = _Array$from2[6];\n          var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n          return function () {\n            var result = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (var _iterator2 = Array.from(segs)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var seg = _step2.value;\n                var bez = segmentToBezier.apply(undefined, toConsumableArray(Array.from(seg || [])));\n                result.push(doc.bezierCurveTo.apply(doc, toConsumableArray(Array.from(bez || []))));\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n            return result;\n          }();\n        };\n\n        // from Inkscape svgtopdf, thanks!\n        arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n          var th = rotateX * (Math.PI / 180);\n          var sin_th = Math.sin(th);\n          var cos_th = Math.cos(th);\n          rx = Math.abs(rx);\n          ry = Math.abs(ry);\n          px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n          py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n          var pl = px * px / (rx * rx) + py * py / (ry * ry);\n          if (pl > 1) {\n            pl = Math.sqrt(pl);\n            rx *= pl;\n            ry *= pl;\n          }\n          var a00 = cos_th / rx;\n          var a01 = sin_th / rx;\n          var a10 = -sin_th / ry;\n          var a11 = cos_th / ry;\n          var x0 = a00 * ox + a01 * oy;\n          var y0 = a10 * ox + a11 * oy;\n          var x1 = a00 * x + a01 * y;\n          var y1 = a10 * x + a11 * y;\n          var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n          var sfactor_sq = 1 / d - 0.25;\n          if (sfactor_sq < 0) {\n            sfactor_sq = 0;\n          }\n          var sfactor = Math.sqrt(sfactor_sq);\n          if (sweep === large) {\n            sfactor = -sfactor;\n          }\n          var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n          var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n          var th0 = Math.atan2(y0 - yc, x0 - xc);\n          var th1 = Math.atan2(y1 - yc, x1 - xc);\n          var th_arc = th1 - th0;\n          if (th_arc < 0 && sweep === 1) {\n            th_arc += 2 * Math.PI;\n          } else if (th_arc > 0 && sweep === 0) {\n            th_arc -= 2 * Math.PI;\n          }\n          var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n          var result = [];\n          for (var i = 0, end = segments, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n            var th2 = th0 + i * th_arc / segments;\n            var th3 = th0 + (i + 1) * th_arc / segments;\n            result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n          }\n          return result;\n        };\n        segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n          var a00 = cos_th * rx;\n          var a01 = -sin_th * ry;\n          var a10 = sin_th * rx;\n          var a11 = cos_th * ry;\n          var th_half = 0.5 * (th1 - th0);\n          var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n          var x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n          var y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n          var x3 = cx + Math.cos(th1);\n          var y3 = cy + Math.sin(th1);\n          var x2 = x3 + t * Math.sin(th1);\n          var y2 = y3 - t * Math.cos(th1);\n          return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];\n        };\n      }\n    }, {\n      key: 'apply',\n      value: function apply(doc, path) {\n        var commands = parse(path);\n        return _apply(commands, doc);\n      }\n    }]);\n    return SVGPath;\n  }();\n  SVGPath.initClass();\n  return SVGPath;\n}();\nvar SVGPath$1 = SVGPath;\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar Vector = {\n  initVector: function initVector() {\n    this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix\n    return this._ctmStack = [];\n  },\n  save: function save() {\n    this._ctmStack.push(this._ctm.slice());\n    // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n    return this.addContent('q');\n  },\n  restore: function restore() {\n    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];\n    return this.addContent('Q');\n  },\n  closePath: function closePath() {\n    return this.addContent('h');\n  },\n  lineWidth: function lineWidth(w) {\n    return this.addContent(PDFObject.number(w) + ' w');\n  },\n  _CAP_STYLES: {\n    BUTT: 0,\n    ROUND: 1,\n    SQUARE: 2\n  },\n  lineCap: function lineCap(c) {\n    if (typeof c === 'string') {\n      c = this._CAP_STYLES[c.toUpperCase()];\n    }\n    return this.addContent(c + ' J');\n  },\n  _JOIN_STYLES: {\n    MITER: 0,\n    ROUND: 1,\n    BEVEL: 2\n  },\n  lineJoin: function lineJoin(j) {\n    if (typeof j === 'string') {\n      j = this._JOIN_STYLES[j.toUpperCase()];\n    }\n    return this.addContent(j + ' j');\n  },\n  miterLimit: function miterLimit(m) {\n    return this.addContent(PDFObject.number(m) + ' M');\n  },\n  dash: function dash(length, options) {\n    var phase = void 0;\n    if (options == null) {\n      options = {};\n    }\n    if (length == null) {\n      return this;\n    }\n    if (Array.isArray(length)) {\n      length = Array.from(length).map(function (v) {\n        return PDFObject.number(v);\n      }).join(' ');\n      phase = options.phase || 0;\n      return this.addContent('[' + length + '] ' + PDFObject.number(phase) + ' d');\n    } else {\n      var space = options.space != null ? options.space : length;\n      phase = options.phase || 0;\n      return this.addContent('[' + PDFObject.number(length) + ' ' + PDFObject.number(space) + '] ' + PDFObject.number(phase) + ' d');\n    }\n  },\n  undash: function undash() {\n    return this.addContent('[] 0 d');\n  },\n  moveTo: function moveTo(x, y) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' m');\n  },\n  lineTo: function lineTo(x, y) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' l');\n  },\n  bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.addContent(PDFObject.number(cp1x) + ' ' + PDFObject.number(cp1y) + ' ' + PDFObject.number(cp2x) + ' ' + PDFObject.number(cp2y) + ' ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' c');\n  },\n  quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {\n    return this.addContent(PDFObject.number(cpx) + ' ' + PDFObject.number(cpy) + ' ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' v');\n  },\n  rect: function rect(x, y, w, h) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' ' + PDFObject.number(w) + ' ' + PDFObject.number(h) + ' re');\n  },\n  roundedRect: function roundedRect(x, y, w, h, r) {\n    if (r == null) {\n      r = 0;\n    }\n    r = Math.min(r, 0.5 * w, 0.5 * h);\n\n    // amount to inset control points from corners (see `ellipse`)\n    var c = r * (1.0 - KAPPA);\n    this.moveTo(x + r, y);\n    this.lineTo(x + w - r, y);\n    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n    this.lineTo(x + w, y + h - r);\n    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n    this.lineTo(x + r, y + h);\n    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n    this.lineTo(x, y + r);\n    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n    return this.closePath();\n  },\n  ellipse: function ellipse(x, y, r1, r2) {\n    // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n    if (r2 == null) {\n      r2 = r1;\n    }\n    x -= r1;\n    y -= r2;\n    var ox = r1 * KAPPA;\n    var oy = r2 * KAPPA;\n    var xe = x + r1 * 2;\n    var ye = y + r2 * 2;\n    var xm = x + r1;\n    var ym = y + r2;\n    this.moveTo(x, ym);\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    return this.closePath();\n  },\n  circle: function circle(x, y, radius) {\n    return this.ellipse(x, y, radius);\n  },\n  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    if (anticlockwise == null) {\n      anticlockwise = false;\n    }\n    var TWO_PI = 2.0 * Math.PI;\n    var HALF_PI = 0.5 * Math.PI;\n    var deltaAng = endAngle - startAngle;\n    if (Math.abs(deltaAng) > TWO_PI) {\n      // draw only full circle if more than that is specified\n      deltaAng = TWO_PI;\n    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n      // necessary to flip direction of rendering\n      var dir = anticlockwise ? -1 : 1;\n      deltaAng = dir * TWO_PI + deltaAng;\n    }\n    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n    var segAng = deltaAng / numSegs;\n    var handleLen = segAng / HALF_PI * KAPPA * radius;\n    var curAng = startAngle;\n\n    // component distances between anchor point and control point\n    var deltaCx = -Math.sin(curAng) * handleLen;\n    var deltaCy = Math.cos(curAng) * handleLen;\n\n    // anchor point\n    var ax = x + Math.cos(curAng) * radius;\n    var ay = y + Math.sin(curAng) * radius;\n\n    // calculate and render segments\n    this.moveTo(ax, ay);\n    for (var segIdx = 0, end = numSegs, asc = 0 <= end; asc ? segIdx < end : segIdx > end; asc ? segIdx++ : segIdx--) {\n      // starting control point\n      var cp1x = ax + deltaCx;\n      var cp1y = ay + deltaCy;\n\n      // step angle\n      curAng += segAng;\n\n      // next anchor point\n      ax = x + Math.cos(curAng) * radius;\n      ay = y + Math.sin(curAng) * radius;\n\n      // next control point delta\n      deltaCx = -Math.sin(curAng) * handleLen;\n      deltaCy = Math.cos(curAng) * handleLen;\n\n      // ending control point\n      var cp2x = ax - deltaCx;\n      var cp2y = ay - deltaCy;\n\n      // render segment\n      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n    }\n    return this;\n  },\n  polygon: function polygon() {\n    for (var _len = arguments.length, points = Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    this.moveTo.apply(this, toConsumableArray(Array.from(points.shift() || [])));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n      for (var _iterator = Array.from(points)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var point = _step.value;\n        this.lineTo.apply(this, toConsumableArray(Array.from(point || [])));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    return this.closePath();\n  },\n  path: function path(_path) {\n    SVGPath$1.apply(this, _path);\n    return this;\n  },\n  _windingRule: function _windingRule(rule) {\n    if (/even-?odd/.test(rule)) {\n      return '*';\n    }\n    return '';\n  },\n  fill: function fill(color, rule) {\n    if (/(even-?odd)|(non-?zero)/.test(color)) {\n      rule = color;\n      color = null;\n    }\n    if (color) {\n      this.fillColor(color);\n    }\n    return this.addContent('f' + this._windingRule(rule));\n  },\n  stroke: function stroke(color) {\n    if (color) {\n      this.strokeColor(color);\n    }\n    return this.addContent('S');\n  },\n  fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {\n    if (strokeColor == null) {\n      strokeColor = fillColor;\n    }\n    var isFillRule = /(even-?odd)|(non-?zero)/;\n    if (isFillRule.test(fillColor)) {\n      rule = fillColor;\n      fillColor = null;\n    }\n    if (isFillRule.test(strokeColor)) {\n      rule = strokeColor;\n      strokeColor = fillColor;\n    }\n    if (fillColor) {\n      this.fillColor(fillColor);\n      this.strokeColor(strokeColor);\n    }\n    return this.addContent('B' + this._windingRule(rule));\n  },\n  clip: function clip(rule) {\n    return this.addContent('W' + this._windingRule(rule) + ' n');\n  },\n  transform: function transform(m11, m12, m21, m22, dx, dy) {\n    // keep track of the current transformation matrix\n    var m = this._ctm;\n    var _Array$from = Array.from(m),\n      _Array$from2 = slicedToArray(_Array$from, 6),\n      m0 = _Array$from2[0],\n      m1 = _Array$from2[1],\n      m2 = _Array$from2[2],\n      m3 = _Array$from2[3],\n      m4 = _Array$from2[4],\n      m5 = _Array$from2[5];\n    m[0] = m0 * m11 + m2 * m12;\n    m[1] = m1 * m11 + m3 * m12;\n    m[2] = m0 * m21 + m2 * m22;\n    m[3] = m1 * m21 + m3 * m22;\n    m[4] = m0 * dx + m2 * dy + m4;\n    m[5] = m1 * dx + m3 * dy + m5;\n    var values = [m11, m12, m21, m22, dx, dy].map(function (v) {\n      return PDFObject.number(v);\n    }).join(' ');\n    return this.addContent(values + ' cm');\n  },\n  translate: function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  },\n  rotate: function rotate(angle, options) {\n    var y = void 0;\n    if (options == null) {\n      options = {};\n    }\n    var rad = angle * Math.PI / 180;\n    var cos = Math.cos(rad);\n    var sin = Math.sin(rad);\n    var x = y = 0;\n    if (options.origin != null) {\n      var _Array$from3 = Array.from(options.origin);\n      var _Array$from4 = slicedToArray(_Array$from3, 2);\n      x = _Array$from4[0];\n      y = _Array$from4[1];\n      var x1 = x * cos - y * sin;\n      var y1 = x * sin + y * cos;\n      x -= x1;\n      y -= y1;\n    }\n    return this.transform(cos, sin, -sin, cos, x, y);\n  },\n  scale: function scale(xFactor, yFactor, options) {\n    var y = void 0;\n    if (yFactor == null) {\n      yFactor = xFactor;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if ((typeof yFactor === 'undefined' ? 'undefined' : _typeof(yFactor)) === 'object') {\n      options = yFactor;\n      yFactor = xFactor;\n    }\n    var x = y = 0;\n    if (options.origin != null) {\n      var _Array$from5 = Array.from(options.origin);\n      var _Array$from6 = slicedToArray(_Array$from5, 2);\n      x = _Array$from6[0];\n      y = _Array$from6[1];\n      x -= xFactor * x;\n      y -= yFactor * y;\n    }\n    return this.transform(xFactor, 0, 0, yFactor, x, y);\n  }\n};\nvar fs = {};\nvar range = function range(left, right, inclusive) {\n  var range = [];\n  var ascending = left < right;\n  var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n  for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n  return range;\n};\nvar WIN_ANSI_MAP = {\n  402: 131,\n  8211: 150,\n  8212: 151,\n  8216: 145,\n  8217: 146,\n  8218: 130,\n  8220: 147,\n  8221: 148,\n  8222: 132,\n  8224: 134,\n  8225: 135,\n  8226: 149,\n  8230: 133,\n  8364: 128,\n  8240: 137,\n  8249: 139,\n  8250: 155,\n  710: 136,\n  8482: 153,\n  338: 140,\n  339: 156,\n  732: 152,\n  352: 138,\n  353: 154,\n  376: 159,\n  381: 142,\n  382: 158\n};\nvar characters = '.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n\\nspace         exclam         quotedbl       numbersign\\ndollar        percent        ampersand      quotesingle\\nparenleft     parenright     asterisk       plus\\ncomma         hyphen         period         slash\\nzero          one            two            three\\nfour          five           six            seven\\neight         nine           colon          semicolon\\nless          equal          greater        question\\n\\nat            A              B              C\\nD             E              F              G\\nH             I              J              K\\nL             M              N              O\\nP             Q              R              S\\nT             U              V              W\\nX             Y              Z              bracketleft\\nbackslash     bracketright   asciicircum    underscore\\n\\ngrave         a              b              c\\nd             e              f              g\\nh             i              j              k\\nl             m              n              o\\np             q              r              s\\nt             u              v              w\\nx             y              z              braceleft\\nbar           braceright     asciitilde     .notdef\\n\\nEuro          .notdef        quotesinglbase florin\\nquotedblbase  ellipsis       dagger         daggerdbl\\ncircumflex    perthousand    Scaron         guilsinglleft\\nOE            .notdef        Zcaron         .notdef\\n.notdef       quoteleft      quoteright     quotedblleft\\nquotedblright bullet         endash         emdash\\ntilde         trademark      scaron         guilsinglright\\noe            .notdef        zcaron         ydieresis\\n\\nspace         exclamdown     cent           sterling\\ncurrency      yen            brokenbar      section\\ndieresis      copyright      ordfeminine    guillemotleft\\nlogicalnot    hyphen         registered     macron\\ndegree        plusminus      twosuperior    threesuperior\\nacute         mu             paragraph      periodcentered\\ncedilla       onesuperior    ordmasculine   guillemotright\\nonequarter    onehalf        threequarters  questiondown\\n\\nAgrave        Aacute         Acircumflex    Atilde\\nAdieresis     Aring          AE             Ccedilla\\nEgrave        Eacute         Ecircumflex    Edieresis\\nIgrave        Iacute         Icircumflex    Idieresis\\nEth           Ntilde         Ograve         Oacute\\nOcircumflex   Otilde         Odieresis      multiply\\nOslash        Ugrave         Uacute         Ucircumflex\\nUdieresis     Yacute         Thorn          germandbls\\n\\nagrave        aacute         acircumflex    atilde\\nadieresis     aring          ae             ccedilla\\negrave        eacute         ecircumflex    edieresis\\nigrave        iacute         icircumflex    idieresis\\neth           ntilde         ograve         oacute\\nocircumflex   otilde         odieresis      divide\\noslash        ugrave         uacute         ucircumflex\\nudieresis     yacute         thorn          ydieresis'.split(/\\s+/);\nvar AFMFont = function () {\n  createClass(AFMFont, null, [{\n    key: 'open',\n    value: function open(filename) {\n      {\n        throw new Error('AFMFont.open not available on browser build');\n      }\n      return new AFMFont(fs.readFileSync(filename, 'utf8'));\n    }\n  }]);\n  function AFMFont(contents) {\n    var _this = this;\n    classCallCheck(this, AFMFont);\n    this.contents = contents;\n    this.attributes = {};\n    this.glyphWidths = {};\n    this.boundingBoxes = {};\n    this.kernPairs = {};\n    this.parse();\n    this.charWidths = range(0, 255, true).map(function (i) {\n      return _this.glyphWidths[characters[i]];\n    });\n    this.bbox = Array.from(this.attributes['FontBBox'].split(/\\s+/)).map(function (e) {\n      return +e;\n    });\n    this.ascender = +(this.attributes['Ascender'] || 0);\n    this.descender = +(this.attributes['Descender'] || 0);\n    this.xHeight = +(this.attributes['XHeight'] || 0);\n    this.capHeight = +(this.attributes['CapHeight'] || 0);\n    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n  }\n  createClass(AFMFont, [{\n    key: 'parse',\n    value: function parse() {\n      var section = '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = Array.from(this.contents.split('\\n'))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var line = _step.value;\n          var match;\n          var a;\n          if (match = line.match(/^Start(\\w+)/)) {\n            section = match[1];\n            continue;\n          } else if (match = line.match(/^End(\\w+)/)) {\n            section = '';\n            continue;\n          }\n          switch (section) {\n            case 'FontMetrics':\n              match = line.match(/(^\\w+)\\s+(.*)/);\n              var key = match[1];\n              var value = match[2];\n              if (a = this.attributes[key]) {\n                if (!Array.isArray(a)) {\n                  a = this.attributes[key] = [a];\n                }\n                a.push(value);\n              } else {\n                this.attributes[key] = value;\n              }\n              break;\n            case 'CharMetrics':\n              if (!/^CH?\\s/.test(line)) {\n                continue;\n              }\n              var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n              this.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n              break;\n            case 'KernPairs':\n              match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n              if (match) {\n                this.kernPairs[match[1] + '\\0' + match[2]] = parseInt(match[3]);\n              }\n              break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'encodeText',\n    value: function encodeText(text) {\n      var res = [];\n      for (var i = 0, end = text.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        var char = text.charCodeAt(i);\n        char = WIN_ANSI_MAP[char] || char;\n        res.push(char.toString(16));\n      }\n      return res;\n    }\n  }, {\n    key: 'glyphsForString',\n    value: function glyphsForString(string) {\n      var glyphs = [];\n      for (var i = 0, end = string.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        var charCode = string.charCodeAt(i);\n        glyphs.push(this.characterToGlyph(charCode));\n      }\n      return glyphs;\n    }\n  }, {\n    key: 'characterToGlyph',\n    value: function characterToGlyph(character) {\n      return characters[WIN_ANSI_MAP[character] || character] || '.notdef';\n    }\n  }, {\n    key: 'widthOfGlyph',\n    value: function widthOfGlyph(glyph) {\n      return this.glyphWidths[glyph] || 0;\n    }\n  }, {\n    key: 'getKernPair',\n    value: function getKernPair(left, right) {\n      return this.kernPairs[left + '\\0' + right] || 0;\n    }\n  }, {\n    key: 'advancesForGlyphs',\n    value: function advancesForGlyphs(glyphs) {\n      var advances = [];\n      for (var index = 0; index < glyphs.length; index++) {\n        var left = glyphs[index];\n        var right = glyphs[index + 1];\n        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n      }\n      return advances;\n    }\n  }]);\n  return AFMFont;\n}();\nvar Courier = \"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=\";\nvar CourierBold = \"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\";\nvar CourierOblique = \"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=\";\nvar Helvetica = \"\";\nvar HelveticaBold = \"=\";\nvar HelveticaOblique = \"\";\nvar TimesRoman = \"\";\nvar TimesBold = \"=\";\nvar TimesItalic = \"\";\nvar STANDARD_FONTS = {\n  Courier: LZString.decompressFromBase64(Courier),\n  'Courier-Bold': LZString.decompressFromBase64(CourierBold),\n  'Courier-Oblique': LZString.decompressFromBase64(CourierOblique),\n  Helvetica: LZString.decompressFromBase64(Helvetica),\n  'Helvetica-Bold': LZString.decompressFromBase64(HelveticaBold),\n  'Helvetica-Oblique': LZString.decompressFromBase64(HelveticaOblique),\n  'Times-Roman': LZString.decompressFromBase64(TimesRoman),\n  'Times-Bold': LZString.decompressFromBase64(TimesBold),\n  'Times-Italic': LZString.decompressFromBase64(TimesItalic)\n};\nvar createStandardFont = function createStandardFont(PDFFont) {\n  return function (_PDFFont) {\n    inherits(StandardFont, _PDFFont);\n    function StandardFont(document, name, id) {\n      classCallCheck(this, StandardFont);\n      var _this = possibleConstructorReturn(this, (StandardFont.__proto__ || Object.getPrototypeOf(StandardFont)).call(this));\n      _this.document = document;\n      _this.name = name;\n      _this.id = id;\n      _this.font = new AFMFont(STANDARD_FONTS[_this.name]);\n      _this.ascender = _this.font.ascender;\n      _this.descender = _this.font.descender;\n      _this.bbox = _this.font.bbox;\n      _this.lineGap = _this.font.lineGap;\n      return _this;\n    }\n    createClass(StandardFont, [{\n      key: 'embed',\n      value: function embed() {\n        this.dictionary.data = {\n          Type: 'Font',\n          BaseFont: this.name,\n          Subtype: 'Type1',\n          Encoding: 'WinAnsiEncoding'\n        };\n        return this.dictionary.end();\n      }\n    }, {\n      key: 'encode',\n      value: function encode(text) {\n        var encoded = this.font.encodeText(text);\n        var glyphs = this.font.glyphsForString('' + text);\n        var advances = this.font.advancesForGlyphs(glyphs);\n        var positions = [];\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          positions.push({\n            xAdvance: advances[i],\n            yAdvance: 0,\n            xOffset: 0,\n            yOffset: 0,\n            advanceWidth: this.font.widthOfGlyph(glyph)\n          });\n        }\n        return [encoded, positions];\n      }\n    }, {\n      key: 'encodeGlyphs',\n      value: function encodeGlyphs(glyphs) {\n        var res = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = Array.from(glyphs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var glyph = _step.value;\n            res.push(('00' + glyph.id.toString(16)).slice(-2));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return res;\n      }\n    }, {\n      key: 'widthOfString',\n      value: function widthOfString(string, size) {\n        var glyphs = this.font.glyphsForString('' + string);\n        var advances = this.font.advancesForGlyphs(glyphs);\n        var width = 0;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n        try {\n          for (var _iterator2 = Array.from(advances)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var advance = _step2.value;\n            width += advance;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        var scale = size / 1000;\n        return width * scale;\n      }\n    }], [{\n      key: 'isStandardFont',\n      value: function isStandardFont(name) {\n        return name in STANDARD_FONTS;\n      }\n    }]);\n    return StandardFont;\n  }(PDFFont);\n};\nvar toHex = function toHex() {\n  for (var _len = arguments.length, codePoints = Array(_len), _key = 0; _key < _len; _key++) {\n    codePoints[_key] = arguments[_key];\n  }\n  var codes = Array.from(codePoints).map(function (code) {\n    return ('0000' + code.toString(16)).slice(-4);\n  });\n  return codes.join('');\n};\nvar createEmbeddedFont = function createEmbeddedFont(PDFFont) {\n  return function (_PDFFont) {\n    inherits(EmbeddedFont, _PDFFont);\n    function EmbeddedFont(document, font, id) {\n      classCallCheck(this, EmbeddedFont);\n      var _this = possibleConstructorReturn(this, (EmbeddedFont.__proto__ || Object.getPrototypeOf(EmbeddedFont)).call(this));\n      _this.document = document;\n      _this.font = font;\n      _this.id = id;\n      _this.subset = _this.font.createSubset();\n      _this.unicode = [[0]];\n      _this.widths = [_this.font.getGlyph(0).advanceWidth];\n      _this.name = _this.font.postscriptName;\n      _this.scale = 1000 / _this.font.unitsPerEm;\n      _this.ascender = _this.font.ascent * _this.scale;\n      _this.descender = _this.font.descent * _this.scale;\n      _this.xHeight = _this.font.xHeight * _this.scale;\n      _this.capHeight = _this.font.capHeight * _this.scale;\n      _this.lineGap = _this.font.lineGap * _this.scale;\n      _this.bbox = _this.font.bbox;\n      _this.layoutCache = Object.create(null);\n      return _this;\n    }\n    createClass(EmbeddedFont, [{\n      key: 'layoutRun',\n      value: function layoutRun(text, features) {\n        var run = this.font.layout(text, features);\n\n        // Normalize position values\n        for (var i = 0; i < run.positions.length; i++) {\n          var position = run.positions[i];\n          for (var key in position) {\n            position[key] *= this.scale;\n          }\n          position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n        }\n        return run;\n      }\n    }, {\n      key: 'layoutCached',\n      value: function layoutCached(text) {\n        var cached = void 0;\n        if (cached = this.layoutCache[text]) {\n          return cached;\n        }\n        var run = this.layoutRun(text);\n        this.layoutCache[text] = run;\n        return run;\n      }\n    }, {\n      key: 'layout',\n      value: function layout(text, features, onlyWidth) {\n        // Skip the cache if any user defined features are applied\n        if (onlyWidth == null) {\n          onlyWidth = false;\n        }\n        if (features) {\n          return this.layoutRun(text, features);\n        }\n        var glyphs = onlyWidth ? null : [];\n        var positions = onlyWidth ? null : [];\n        var advanceWidth = 0;\n\n        // Split the string by words to increase cache efficiency.\n        // For this purpose, spaces and tabs are a good enough delimeter.\n        var last = 0;\n        var index = 0;\n        while (index <= text.length) {\n          var needle;\n          if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\\t'].includes(needle))) {\n            var run = this.layoutCached(text.slice(last, ++index));\n            if (!onlyWidth) {\n              glyphs.push.apply(glyphs, toConsumableArray(Array.from(run.glyphs || [])));\n              positions.push.apply(positions, toConsumableArray(Array.from(run.positions || [])));\n            }\n            advanceWidth += run.advanceWidth;\n            last = index;\n          } else {\n            index++;\n          }\n        }\n        return {\n          glyphs: glyphs,\n          positions: positions,\n          advanceWidth: advanceWidth\n        };\n      }\n    }, {\n      key: 'encode',\n      value: function encode(text, features) {\n        var _layout = this.layout(text, features),\n          glyphs = _layout.glyphs,\n          positions = _layout.positions;\n        var res = [];\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var gid = this.subset.includeGlyph(glyph.id);\n          res.push(('0000' + gid.toString(16)).slice(-4));\n          if (this.widths[gid] == null) {\n            this.widths[gid] = glyph.advanceWidth * this.scale;\n          }\n          if (this.unicode[gid] == null) {\n            this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);\n          }\n        }\n        return [res, positions];\n      }\n    }, {\n      key: 'encodeGlyphs',\n      value: function encodeGlyphs(glyphs) {\n        var res = [];\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var gid = this.subset.includeGlyph(glyph.id);\n          res.push(('0000' + gid.toString(16)).slice(-4));\n          if (this.widths[gid] == null) {\n            this.widths[gid] = glyph.advanceWidth * this.scale;\n          }\n          if (this.unicode[gid] == null) {\n            this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);\n          }\n        }\n        return res;\n      }\n    }, {\n      key: 'widthOfString',\n      value: function widthOfString(string, size, features) {\n        var width = this.layout(string, features, true).advanceWidth;\n        var scale = size / 1000;\n        return width * scale;\n      }\n    }, {\n      key: 'embed',\n      value: function embed() {\n        var isCFF = this.subset.cff != null;\n        var fontFile = this.document.ref();\n        if (isCFF) {\n          fontFile.data.Subtype = 'CIDFontType0C';\n        }\n        this.subset.encodeStream().pipe(fontFile);\n        var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;\n        var flags = 0;\n        if (this.font.post.isFixedPitch) {\n          flags |= 1 << 0;\n        }\n        if (1 <= familyClass && familyClass <= 7) {\n          flags |= 1 << 1;\n        }\n        flags |= 1 << 2; // assume the font uses non-latin characters\n        if (familyClass === 10) {\n          flags |= 1 << 3;\n        }\n        if (this.font.head.macStyle.italic) {\n          flags |= 1 << 6;\n        }\n\n        // generate a random tag (6 uppercase letters. 65 is the char code for 'A')\n        var tag = [0, 1, 2, 3, 4, 5].map(function (i) {\n          return String.fromCharCode(Math.random() * 26 + 65);\n        }).join('');\n        var name = tag + '+' + this.font.postscriptName;\n        var bbox = this.font.bbox;\n        var descriptor = this.document.ref({\n          Type: 'FontDescriptor',\n          FontName: name,\n          Flags: flags,\n          FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],\n          ItalicAngle: this.font.italicAngle,\n          Ascent: this.ascender,\n          Descent: this.descender,\n          CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n          XHeight: (this.font.xHeight || 0) * this.scale,\n          StemV: 0\n        }); // not sure how to calculate this\n\n        if (isCFF) {\n          descriptor.data.FontFile3 = fontFile;\n        } else {\n          descriptor.data.FontFile2 = fontFile;\n        }\n        descriptor.end();\n        var descendantFont = this.document.ref({\n          Type: 'Font',\n          Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',\n          BaseFont: name,\n          CIDSystemInfo: {\n            Registry: new String('Adobe'),\n            Ordering: new String('Identity'),\n            Supplement: 0\n          },\n          FontDescriptor: descriptor,\n          W: [0, this.widths]\n        });\n        descendantFont.end();\n        this.dictionary.data = {\n          Type: 'Font',\n          Subtype: 'Type0',\n          BaseFont: name,\n          Encoding: 'Identity-H',\n          DescendantFonts: [descendantFont],\n          ToUnicode: this.toUnicodeCmap()\n        };\n        return this.dictionary.end();\n      }\n\n      // Maps the glyph ids encoded in the PDF back to unicode strings\n      // Because of ligature substitutions and the like, there may be one or more\n      // unicode characters represented by each glyph.\n    }, {\n      key: 'toUnicodeCmap',\n      value: function toUnicodeCmap() {\n        var cmap = this.document.ref();\n        var entries = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = Array.from(this.unicode)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _codePoints = _step.value;\n            var encoded = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (var _iterator2 = Array.from(_codePoints)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var value = _step2.value;\n                if (value > 0xffff) {\n                  value -= 0x10000;\n                  encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n                  value = 0xdc00 | value & 0x3ff;\n                }\n                encoded.push(toHex(value));\n                entries.push('<' + encoded.join(' ') + '>');\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        cmap.end('  /CIDInit /ProcSet findresource begin\\n  12 dict begin\\n  begincmap\\n  /CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n  >> def\\n  /CMapName /Adobe-Identity-UCS def\\n  /CMapType 2 def\\n  1 begincodespacerange\\n  <0000><ffff>\\n  endcodespacerange\\n  1 beginbfrange\\n  <0000> <' + toHex(entries.length - 1) + '> [' + entries.join(' ') + ']\\n  endbfrange\\n  endcmap\\n  CMapName currentdict /CMap defineresource pop\\n  end\\n  end  ');\n        return cmap;\n      }\n    }]);\n    return EmbeddedFont;\n  }(PDFFont);\n};\nvar PDFFont = function () {\n  function PDFFont() {\n    classCallCheck(this, PDFFont);\n  }\n  createClass(PDFFont, [{\n    key: 'encode',\n    value: function encode(text) {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'widthOfString',\n    value: function widthOfString(text) {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'ref',\n    value: function ref() {\n      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      if (this.embedded || this.dictionary == null) {\n        return;\n      }\n      this.embed();\n      return this.embedded = true;\n    }\n  }, {\n    key: 'embed',\n    value: function embed() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'lineHeight',\n    value: function lineHeight(size, includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n      var gap = includeGap ? this.lineGap : 0;\n      return (this.ascender + gap - this.descender) / 1000 * size;\n    }\n  }], [{\n    key: 'open',\n    value: function open(document, src, family, id) {\n      var font = void 0;\n      if (typeof src === 'string') {\n        if (StandardFont.isStandardFont(src)) {\n          return new StandardFont(document, src, id);\n        }\n        font = fontkit.openSync(src, family);\n      } else if (Buffer.isBuffer(src)) {\n        font = fontkit.create(src, family);\n      } else if (src instanceof Uint8Array) {\n        font = fontkit.create(new Buffer(src), family);\n      } else if (src instanceof ArrayBuffer) {\n        font = fontkit.create(new Buffer(new Uint8Array(src)), family);\n      } else if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n        font = src;\n      }\n      if (font == null) {\n        throw new Error('Not a supported font format or standard PDF font.');\n      }\n      return new EmbeddedFont(document, font, id);\n    }\n  }]);\n  return PDFFont;\n}();\nvar StandardFont = createStandardFont(PDFFont);\nvar EmbeddedFont = createEmbeddedFont(PDFFont);\nvar Fonts = {\n  initFonts: function initFonts() {\n    // Lookup table for embedded fonts\n    this._fontFamilies = {};\n    this._fontCount = 0;\n\n    // Font state\n    this._fontSize = 12;\n    this._font = null;\n    this._registeredFonts = {};\n\n    // Set the default font\n    return this.font('Helvetica');\n  },\n  font: function font(src, family, size) {\n    var cacheKey = void 0,\n      font = void 0;\n    if (typeof family === 'number') {\n      size = family;\n      family = null;\n    }\n\n    // check registered fonts if src is a string\n    if (typeof src === 'string' && this._registeredFonts[src]) {\n      cacheKey = src;\n      var _registeredFonts$src = this._registeredFonts[src];\n      src = _registeredFonts$src.src;\n      family = _registeredFonts$src.family;\n    } else {\n      cacheKey = family || src;\n      if (typeof cacheKey !== 'string') {\n        cacheKey = null;\n      }\n    }\n    if (size != null) {\n      this.fontSize(size);\n    }\n\n    // fast path: check if the font is already in the PDF\n    if (font = this._fontFamilies[cacheKey]) {\n      this._font = font;\n      return this;\n    }\n\n    // load the font\n    var id = 'F' + ++this._fontCount;\n    this._font = PDFFont.open(this, src, family, id);\n\n    // check for existing font familes with the same name already in the PDF\n    // useful if the font was passed as a buffer\n    if (font = this._fontFamilies[this._font.name]) {\n      this._font = font;\n      return this;\n    }\n\n    // save the font for reuse later\n    if (cacheKey) {\n      this._fontFamilies[cacheKey] = this._font;\n    }\n    if (this._font.name) {\n      this._fontFamilies[this._font.name] = this._font;\n    }\n    return this;\n  },\n  fontSize: function fontSize(_fontSize) {\n    this._fontSize = _fontSize;\n    return this;\n  },\n  currentLineHeight: function currentLineHeight(includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n    return this._font.lineHeight(this._fontSize, includeGap);\n  },\n  registerFont: function registerFont(name, src, family) {\n    this._registeredFonts[name] = {\n      src: src,\n      family: family\n    };\n    return this;\n  }\n};\nvar Text = {\n  initText: function initText() {\n    // Current coordinates\n    this.x = 0;\n    this.y = 0;\n    return this._lineGap = 0;\n  },\n  text: function text(_text, x, y, options) {\n    options = this._initOptions(x, y, options);\n\n    // if the wordSpacing option is specified, remove multiple consecutive spaces\n    if (options.wordSpacing) {\n      _text = _text.replace(/\\s{2,}/g, ' ');\n    }\n\n    // render paragraphs as single lines\n    var lines = _text.split('\\n');\n    for (var i = 0; i < lines.length; i++) {\n      this._line(lines[i], options);\n    }\n    return this;\n  },\n  _initOptions: function _initOptions() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var y = arguments[1];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {\n      options = x;\n      x = null;\n    }\n\n    // Update the current position\n    if (x) this.x = x;\n    if (y) this.y = y;\n    options.columns = options.columns || 0;\n    options.columnGap = options.columnGap || 18; // 1/4 inch\n\n    return options;\n  },\n  _line: function _line(text) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._fragment(text, this.x, this.y, options);\n  },\n  _fragment: function _fragment(text, x, y, options) {\n    text = ('' + text).replace(/\\n/g, '');\n    if (text.length === 0) return;\n\n    // add current font to page if necessary\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    }\n\n    // Glyph encoding and positioning\n\n    var _font$encode = this._font.encode(text, options.features),\n      _font$encode2 = slicedToArray(_font$encode, 2),\n      encoded = _font$encode2[0],\n      positions = _font$encode2[1];\n\n    // Pass down spacings to _glyphs method\n\n    options.wordSpacing = options.wordSpacing || 0;\n    options.characterSpacing = options.characterSpacing || 0;\n\n    // Adjust y to match coordinate flipping\n    y = this.page.height - y - this._font.ascender / 1000 * this._fontSize;\n    this._glyphs(encoded, positions, x, y, options);\n  },\n  _addGlyphs: function _addGlyphs(glyphs, positions, x, y, options) {\n    // add current font to page if necessary\n    if (options == null) {\n      options = {};\n    }\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    }\n\n    // Adjust y to match coordinate flipping\n    y = this.page.height - y;\n    var scale = 1000 / this._fontSize;\n    var unitsPerEm = this._font.font.unitsPerEm || 1000;\n    var advanceWidthScale = 1000 / unitsPerEm;\n\n    // Glyph encoding and positioning\n    var encodedGlyphs = this._font.encodeGlyphs(glyphs);\n    var encodedPositions = positions.map(function (pos, i) {\n      return {\n        xAdvance: pos.xAdvance * scale,\n        yAdvance: pos.yAdvance * scale,\n        xOffset: pos.xOffset,\n        yOffset: pos.yOffset,\n        advanceWidth: glyphs[i].advanceWidth * advanceWidthScale\n      };\n    });\n    return this._glyphs(encodedGlyphs, encodedPositions, x, y, options);\n  },\n  _glyphs: function _glyphs(encoded, positions, x, y, options) {\n    var _this = this;\n\n    // flip coordinate system\n    var i = void 0;\n    this.save();\n    this.transform(1, 0, 0, -1, 0, this.page.height);\n\n    // begin the text object\n    this.addContent('BT');\n\n    // text position\n    this.addContent('1 0 0 1 ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' Tm');\n\n    // font and font size\n    this.addContent('/' + this._font.id + ' ' + PDFObject.number(this._fontSize) + ' Tf');\n\n    // rendering mode\n    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n    if (mode) {\n      this.addContent(mode + ' Tr');\n    }\n\n    // Character spacing\n    if (options.characterSpacing) {\n      this.addContent(PDFObject.number(options.characterSpacing) + ' Tc');\n    }\n    var scale = this._fontSize / 1000;\n    var commands = [];\n    var last = 0;\n    var hadOffset = false;\n\n    // Adds a segment of text to the TJ command buffer\n    var addSegment = function addSegment(cur) {\n      if (last < cur) {\n        var hex = encoded.slice(last, cur).join('');\n        var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n        commands.push('<' + hex + '> ' + PDFObject.number(-advance));\n      }\n      return last = cur;\n    };\n\n    // Flushes the current TJ commands to the output stream\n    var flush = function flush(i) {\n      addSegment(i);\n      if (commands.length > 0) {\n        _this.addContent('[' + commands.join(' ') + '] TJ');\n        return commands.length = 0;\n      }\n    };\n    for (i = 0; i < positions.length; i++) {\n      // If we have an x or y offset, we have to break out of the current TJ command\n      // so we can move the text position.\n      var pos = positions[i];\n      if (pos.xOffset || pos.yOffset) {\n        // Flush the current buffer\n        flush(i);\n\n        // Move the text position and flush just the current character\n        this.addContent('1 0 0 1 ' + PDFObject.number(x + pos.xOffset * scale) + ' ' + PDFObject.number(y + pos.yOffset * scale) + ' Tm');\n        flush(i + 1);\n        hadOffset = true;\n      } else {\n        // If the last character had an offset, reset the text position\n        if (hadOffset) {\n          this.addContent('1 0 0 1 ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' Tm');\n          hadOffset = false;\n        }\n\n        // Group segments that don't have any advance adjustments\n        if (pos.xAdvance - pos.advanceWidth !== 0) {\n          addSegment(i + 1);\n        }\n      }\n      x += pos.xAdvance * scale;\n    }\n\n    // Flush any remaining commands\n    flush(i);\n\n    // end the text object\n    this.addContent('ET');\n\n    // restore flipped coordinate system\n    return this.restore();\n  }\n};\nvar Data = function () {\n  function Data() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, Data);\n    this.pos = 0;\n    this.data = data;\n    this.length = this.data.length;\n  }\n  createClass(Data, [{\n    key: 'readByte',\n    value: function readByte() {\n      return this.data[this.pos++];\n    }\n  }, {\n    key: 'writeByte',\n    value: function writeByte(byte) {\n      return this.data[this.pos++] = byte;\n    }\n  }, {\n    key: 'byteAt',\n    value: function byteAt(index) {\n      return this.data[index];\n    }\n  }, {\n    key: 'readBool',\n    value: function readBool() {\n      return !!this.readByte();\n    }\n  }, {\n    key: 'writeBool',\n    value: function writeBool(val) {\n      return this.writeByte(val ? 1 : 0);\n    }\n  }, {\n    key: 'readUInt32',\n    value: function readUInt32() {\n      var b1 = this.readByte() * 0x1000000;\n      var b2 = this.readByte() << 16;\n      var b3 = this.readByte() << 8;\n      var b4 = this.readByte();\n      return b1 + b2 + b3 + b4;\n    }\n  }, {\n    key: 'writeUInt32',\n    value: function writeUInt32(val) {\n      this.writeByte(val >>> 24 & 0xff);\n      this.writeByte(val >> 16 & 0xff);\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    }\n  }, {\n    key: 'readInt32',\n    value: function readInt32() {\n      var int = this.readUInt32();\n      if (int >= 0x80000000) {\n        return int - 0x100000000;\n      }\n      return int;\n    }\n  }, {\n    key: 'writeInt32',\n    value: function writeInt32(val) {\n      if (val < 0) {\n        val += 0x100000000;\n      }\n      return this.writeUInt32(val);\n    }\n  }, {\n    key: 'readUInt16',\n    value: function readUInt16() {\n      var b1 = this.readByte() << 8;\n      var b2 = this.readByte();\n      return b1 | b2;\n    }\n  }, {\n    key: 'writeUInt16',\n    value: function writeUInt16(val) {\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    }\n  }, {\n    key: 'readInt16',\n    value: function readInt16() {\n      var int = this.readUInt16();\n      if (int >= 0x8000) {\n        return int - 0x10000;\n      }\n      return int;\n    }\n  }, {\n    key: 'writeInt16',\n    value: function writeInt16(val) {\n      if (val < 0) {\n        val += 0x10000;\n      }\n      return this.writeUInt16(val);\n    }\n  }, {\n    key: 'readString',\n    value: function readString(length) {\n      var ret = [];\n      for (var i = 0, end = length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        ret[i] = String.fromCharCode(this.readByte());\n      }\n      return ret.join('');\n    }\n  }, {\n    key: 'writeString',\n    value: function writeString(val) {\n      var _this = this;\n      return range(0, val.length, false).map(function (i) {\n        return _this.writeByte(val.charCodeAt(i));\n      });\n    }\n  }, {\n    key: 'stringAt',\n    value: function stringAt(pos, length) {\n      this.pos = pos;\n      return this.readString(length);\n    }\n  }, {\n    key: 'readShort',\n    value: function readShort() {\n      return this.readInt16();\n    }\n  }, {\n    key: 'writeShort',\n    value: function writeShort(val) {\n      return this.writeInt16(val);\n    }\n  }, {\n    key: 'readLongLong',\n    value: function readLongLong() {\n      var b1 = this.readByte();\n      var b2 = this.readByte();\n      var b3 = this.readByte();\n      var b4 = this.readByte();\n      var b5 = this.readByte();\n      var b6 = this.readByte();\n      var b7 = this.readByte();\n      var b8 = this.readByte();\n      if (b1 & 0x80) {\n        // sign -> avoid overflow\n        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;\n      }\n      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;\n    }\n  }, {\n    key: 'writeLongLong',\n    value: function writeLongLong(val) {\n      var high = Math.floor(val / 0x100000000);\n      var low = val & 0xffffffff;\n      this.writeByte(high >> 24 & 0xff);\n      this.writeByte(high >> 16 & 0xff);\n      this.writeByte(high >> 8 & 0xff);\n      this.writeByte(high & 0xff);\n      this.writeByte(low >> 24 & 0xff);\n      this.writeByte(low >> 16 & 0xff);\n      this.writeByte(low >> 8 & 0xff);\n      return this.writeByte(low & 0xff);\n    }\n  }, {\n    key: 'readInt',\n    value: function readInt() {\n      return this.readInt32();\n    }\n  }, {\n    key: 'writeInt',\n    value: function writeInt(val) {\n      return this.writeInt32(val);\n    }\n  }, {\n    key: 'slice',\n    value: function slice(start, end) {\n      return this.data.slice(start, end);\n    }\n  }, {\n    key: 'read',\n    value: function read(bytes) {\n      var buf = [];\n      for (var i = 0, end = bytes, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        buf.push(this.readByte());\n      }\n      return buf;\n    }\n  }, {\n    key: 'write',\n    value: function write(bytes) {\n      var _this2 = this;\n      return Array.from(bytes).map(function (byte) {\n        return _this2.writeByte(byte);\n      });\n    }\n  }]);\n  return Data;\n}();\nvar MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\nvar JPEG = function () {\n  function JPEG(data, label) {\n    classCallCheck(this, JPEG);\n    var marker = void 0;\n    this.data = data;\n    this.label = label;\n    if (this.data.readUInt16BE(0) !== 0xffd8) {\n      throw 'SOI not found in JPEG';\n    }\n    var pos = 2;\n    while (pos < this.data.length) {\n      marker = this.data.readUInt16BE(pos);\n      pos += 2;\n      if (Array.from(MARKERS).includes(marker)) {\n        break;\n      }\n      pos += this.data.readUInt16BE(pos);\n    }\n    if (!Array.from(MARKERS).includes(marker)) {\n      throw 'Invalid JPEG.';\n    }\n    pos += 2;\n    this.bits = this.data[pos++];\n    this.height = this.data.readUInt16BE(pos);\n    pos += 2;\n    this.width = this.data.readUInt16BE(pos);\n    pos += 2;\n    var channels = this.data[pos++];\n    this.colorSpace = function () {\n      switch (channels) {\n        case 1:\n          return 'DeviceGray';\n        case 3:\n          return 'DeviceRGB';\n        case 4:\n          return 'DeviceCMYK';\n      }\n    }();\n    this.obj = null;\n  }\n  createClass(JPEG, [{\n    key: 'embed',\n    value: function embed(document) {\n      if (this.obj) {\n        return;\n      }\n      this.obj = document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.bits,\n        Width: this.width,\n        Height: this.height,\n        ColorSpace: this.colorSpace,\n        Filter: 'DCTDecode'\n      });\n\n      // add extra decode params for CMYK images. By swapping the\n      // min and max values from the default, we invert the colors. See\n      // section 4.8.4 of the spec.\n      if (this.colorSpace === 'DeviceCMYK') {\n        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];\n      }\n      this.obj.end(this.data);\n\n      // free memory\n      return this.data = null;\n    }\n  }]);\n  return JPEG;\n}();\nvar PNGImage = function () {\n  function PNGImage(data, label) {\n    classCallCheck(this, PNGImage);\n    this.label = label;\n    this.image = new PNG(data);\n    this.width = this.image.width;\n    this.height = this.image.height;\n    this.imgData = this.image.imgData;\n    this.obj = null;\n  }\n  createClass(PNGImage, [{\n    key: 'embed',\n    value: function embed(document) {\n      this.document = document;\n      if (this.obj) {\n        return;\n      }\n      this.obj = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.image.bits,\n        Width: this.width,\n        Height: this.height,\n        Filter: 'FlateDecode'\n      });\n      if (!this.image.hasAlphaChannel) {\n        var params = this.document.ref({\n          Predictor: 15,\n          Colors: this.image.colors,\n          BitsPerComponent: this.image.bits,\n          Columns: this.width\n        });\n        this.obj.data['DecodeParms'] = params;\n        params.end();\n      }\n      if (this.image.palette.length === 0) {\n        this.obj.data['ColorSpace'] = this.image.colorSpace;\n      } else {\n        // embed the color palette in the PDF as an object stream\n        var palette = this.document.ref();\n        palette.end(new Buffer(this.image.palette));\n\n        // build the color space array for the image\n        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];\n      }\n\n      // For PNG color types 0, 2 and 3, the transparency data is stored in\n      // a dedicated PNG chunk.\n      if (this.image.transparency.grayscale) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var val = this.image.transparency.greyscale;\n        return this.obj.data['Mask'] = [val, val];\n      } else if (this.image.transparency.rgb) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var rgb = this.image.transparency.rgb;\n        var mask = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = Array.from(rgb)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var x = _step.value;\n            mask.push(x, x);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return this.obj.data['Mask'] = mask;\n      } else if (this.image.transparency.indexed) {\n        // Create a transparency SMask for the image based on the data\n        // in the PLTE and tRNS sections. See below for details on SMasks.\n        return this.loadIndexedAlphaChannel();\n      } else if (this.image.hasAlphaChannel) {\n        // For PNG color types 4 and 6, the transparency data is stored as a alpha\n        // channel mixed in with the main image data. Separate this data out into an\n        // SMask object and store it separately in the PDF.\n        return this.splitAlphaChannel();\n      } else {\n        return this.finalize();\n      }\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      if (this.alphaChannel) {\n        var sMask = this.document.ref({\n          Type: 'XObject',\n          Subtype: 'Image',\n          Height: this.height,\n          Width: this.width,\n          BitsPerComponent: 8,\n          Filter: 'FlateDecode',\n          ColorSpace: 'DeviceGray',\n          Decode: [0, 1]\n        });\n        sMask.end(this.alphaChannel);\n        this.obj.data['SMask'] = sMask;\n      }\n\n      // add the actual image data\n      this.obj.end(this.imgData);\n\n      // free memory\n      this.image = null;\n      return this.imgData = null;\n    }\n  }, {\n    key: 'splitAlphaChannel',\n    value: function splitAlphaChannel() {\n      var _this = this;\n      return this.image.decodePixels(function (pixels) {\n        var a = void 0,\n          p = void 0;\n        var colorByteSize = _this.image.colors * _this.image.bits / 8;\n        var pixelCount = _this.width * _this.height;\n        var imgData = new Buffer(pixelCount * colorByteSize);\n        var alphaChannel = new Buffer(pixelCount);\n        var i = p = a = 0;\n        var len = pixels.length;\n        while (i < len) {\n          imgData[p++] = pixels[i++];\n          imgData[p++] = pixels[i++];\n          imgData[p++] = pixels[i++];\n          alphaChannel[a++] = pixels[i++];\n        }\n        var done = 0;\n        zlib.deflate(imgData, function (err, imgData1) {\n          _this.imgData = imgData1;\n          if (err) {\n            throw err;\n          }\n          if (++done === 2) {\n            return _this.finalize();\n          }\n        });\n        return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n          _this.alphaChannel = alphaChannel1;\n          if (err) {\n            throw err;\n          }\n          if (++done === 2) {\n            return _this.finalize();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'loadIndexedAlphaChannel',\n    value: function loadIndexedAlphaChannel(fn) {\n      var _this2 = this;\n      var transparency = this.image.transparency.indexed;\n      return this.image.decodePixels(function (pixels) {\n        var alphaChannel = new Buffer(_this2.width * _this2.height);\n        var i = 0;\n        for (var j = 0, end = pixels.length; j < end; j++) {\n          alphaChannel[i++] = transparency[pixels[j]];\n        }\n        return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n          _this2.alphaChannel = alphaChannel1;\n          if (err) {\n            throw err;\n          }\n          return _this2.finalize();\n        });\n      });\n    }\n  }]);\n  return PNGImage;\n}();\nvar PDFImage = function () {\n  function PDFImage() {\n    classCallCheck(this, PDFImage);\n  }\n  createClass(PDFImage, null, [{\n    key: 'open',\n    value: function open(src, label) {\n      var data = void 0;\n      if (Buffer.isBuffer(src)) {\n        data = src;\n      } else if (src instanceof ArrayBuffer) {\n        data = new Buffer(new Uint8Array(src));\n      } else {\n        var match = /^data:.+;base64,(.*)$/.exec(src);\n        if (match) {\n          data = new Buffer(match[1], 'base64');\n        } else {}\n      }\n      if (data[0] === 0xff && data[1] === 0xd8) {\n        return new JPEG(data, label);\n      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {\n        return new PNGImage(data, label);\n      } else {\n        throw new Error('Unknown image format.');\n      }\n    }\n  }]);\n  return PDFImage;\n}();\nvar Images = {\n  initImages: function initImages() {\n    this._imageRegistry = {};\n    return this._imageCount = 0;\n  },\n  image: function image(src, x, y, options) {\n    var bh = void 0,\n      bp = void 0,\n      bw = void 0,\n      image = void 0,\n      ip = void 0,\n      left = void 0,\n      left1 = void 0;\n    if (options == null) {\n      options = {};\n    }\n    if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {\n      options = x;\n      x = null;\n    }\n    x = (left = x != null ? x : options.x) != null ? left : this.x;\n    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n    if (!image) {\n      if (src.width && src.height) {\n        image = src;\n      } else {\n        image = this.openImage(src);\n      }\n    }\n    if (!image.obj) {\n      image.embed(this);\n    }\n    if (this.page.xobjects[image.label] == null) {\n      this.page.xobjects[image.label] = image.obj;\n    }\n    var w = options.width || image.width;\n    var h = options.height || image.height;\n    if (options.width && !options.height) {\n      var wp = w / image.width;\n      w = image.width * wp;\n      h = image.height * wp;\n    } else if (options.height && !options.width) {\n      var hp = h / image.height;\n      w = image.width * hp;\n      h = image.height * hp;\n    } else if (options.scale) {\n      w = image.width * options.scale;\n      h = image.height * options.scale;\n    } else if (options.fit) {\n      var _Array$from = Array.from(options.fit);\n      var _Array$from2 = slicedToArray(_Array$from, 2);\n      bw = _Array$from2[0];\n      bh = _Array$from2[1];\n      bp = bw / bh;\n      ip = image.width / image.height;\n      if (ip > bp) {\n        w = bw;\n        h = bw / ip;\n      } else {\n        h = bh;\n        w = bh * ip;\n      }\n    } else if (options.cover) {\n      var _Array$from3 = Array.from(options.cover);\n      var _Array$from4 = slicedToArray(_Array$from3, 2);\n      bw = _Array$from4[0];\n      bh = _Array$from4[1];\n      bp = bw / bh;\n      ip = image.width / image.height;\n      if (ip > bp) {\n        h = bh;\n        w = bh * ip;\n      } else {\n        w = bw;\n        h = bw / ip;\n      }\n    }\n    if (options.fit || options.cover) {\n      if (options.align === 'center') {\n        x = x + bw / 2 - w / 2;\n      } else if (options.align === 'right') {\n        x = x + bw - w;\n      }\n      if (options.valign === 'center') {\n        y = y + bh / 2 - h / 2;\n      } else if (options.valign === 'bottom') {\n        y = y + bh - h;\n      }\n    }\n\n    // create link annotations if the link option is given\n    if (options.link != null) {\n      this.link(x, y, w, h, options.link);\n    }\n    if (options.goTo != null) {\n      this.goTo(x, y, w, h, options.goTo);\n    }\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    }\n\n    // Set the current y position to below the image if it is in the document flow\n    if (this.y === y) {\n      this.y += h;\n    }\n    this.save();\n    this.transform(w, 0, 0, -h, x, y + h);\n    this.addContent('/' + image.label + ' Do');\n    this.restore();\n    return this;\n  },\n  openImage: function openImage(src) {\n    var image = void 0;\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n    if (!image) {\n      image = PDFImage.open(src, 'I' + ++this._imageCount);\n      if (typeof src === 'string') {\n        this._imageRegistry[src] = image;\n      }\n    }\n    return image;\n  }\n};\nvar Annotations = {\n  annotate: function annotate(x, y, w, h, options) {\n    options.Type = 'Annot';\n    options.Rect = this._convertRect(x, y, w, h);\n    options.Border = [0, 0, 0];\n    if (options.Subtype !== 'Link') {\n      if (options.C == null) {\n        options.C = this._normalizeColor(options.color || [0, 0, 0]);\n      }\n    } // convert colors\n    delete options.color;\n    if (typeof options.Dest === 'string') {\n      options.Dest = new String(options.Dest);\n    }\n\n    // Capitalize keys\n    for (var key in options) {\n      var val = options[key];\n      options[key[0].toUpperCase() + key.slice(1)] = val;\n    }\n    var ref = this.ref(options);\n    this.page.annotations.push(ref);\n    ref.end();\n    return this;\n  },\n  note: function note(x, y, w, h, contents, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Text';\n    options.Contents = new String(contents);\n    options.Name = 'Comment';\n    if (options.color == null) {\n      options.color = [243, 223, 92];\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  goTo: function goTo(x, y, w, h, name, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Link';\n    options.A = this.ref({\n      S: 'GoTo',\n      D: new String(name)\n    });\n    options.A.end();\n    return this.annotate(x, y, w, h, options);\n  },\n  link: function link(x, y, w, h, url, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Link';\n    if (typeof url === 'number') {\n      // Link to a page in the document (the page must already exist)\n      var pages = this._root.data.Pages.data;\n      if (url >= 0 && url < pages.Kids.length) {\n        options.A = this.ref({\n          S: 'GoTo',\n          D: [pages.Kids[url], 'XYZ', null, null, null]\n        });\n        options.A.end();\n      } else {\n        throw new Error('The document has no page ' + url);\n      }\n    } else {\n      // Link to an external url\n      options.A = this.ref({\n        S: 'URI',\n        URI: new String(url)\n      });\n      options.A.end();\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  _markup: function _markup(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    var _Array$from = Array.from(this._convertRect(x, y, w, h)),\n      _Array$from2 = slicedToArray(_Array$from, 4),\n      x1 = _Array$from2[0],\n      y1 = _Array$from2[1],\n      x2 = _Array$from2[2],\n      y2 = _Array$from2[3];\n    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  highlight: function highlight(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Highlight';\n    if (options.color == null) {\n      options.color = [241, 238, 148];\n    }\n    return this._markup(x, y, w, h, options);\n  },\n  underline: function underline(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Underline';\n    return this._markup(x, y, w, h, options);\n  },\n  strike: function strike(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'StrikeOut';\n    return this._markup(x, y, w, h, options);\n  },\n  lineAnnotation: function lineAnnotation(x1, y1, x2, y2, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Line';\n    options.Contents = new String();\n    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];\n    return this.annotate(x1, y1, x2, y2, options);\n  },\n  rectAnnotation: function rectAnnotation(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Square';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  ellipseAnnotation: function ellipseAnnotation(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Circle';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  textAnnotation: function textAnnotation(x, y, w, h, text, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'FreeText';\n    options.Contents = new String(text);\n    options.DA = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  _convertRect: function _convertRect(x1, y1, w, h) {\n    // flip y1 and y2\n    var y2 = y1;\n    y1 += h;\n\n    // make x2\n    var x2 = x1 + w;\n\n    // apply current transformation matrix to points\n\n    var _Array$from3 = Array.from(this._ctm),\n      _Array$from4 = slicedToArray(_Array$from3, 6),\n      m0 = _Array$from4[0],\n      m1 = _Array$from4[1],\n      m2 = _Array$from4[2],\n      m3 = _Array$from4[3],\n      m4 = _Array$from4[4],\n      m5 = _Array$from4[5];\n    x1 = m0 * x1 + m2 * y1 + m4;\n    y1 = m1 * x1 + m3 * y1 + m5;\n    x2 = m0 * x2 + m2 * y2 + m4;\n    y2 = m1 * x2 + m3 * y2 + m5;\n    return [x1, y1, x2, y2];\n  }\n};\nvar PDFDocument$1 = function (_stream$Readable) {\n  inherits(PDFDocument, _stream$Readable);\n  function PDFDocument() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, PDFDocument);\n    var _this = possibleConstructorReturn(this, (PDFDocument.__proto__ || Object.getPrototypeOf(PDFDocument)).call(this));\n    _this.options = options;\n    _this.version = 1.3;\n    _this.compress = true;\n    _this._pageBuffer = [];\n    _this._pageBufferStart = 0;\n\n    // The PDF object store\n    _this._offsets = [];\n    _this._waiting = 0;\n    _this._ended = false;\n    _this._offset = 0;\n    var Names = _this.ref({\n      Dests: new PDFNameTree()\n    });\n    _this._root = _this.ref({\n      Type: 'Catalog',\n      Pages: _this.ref({\n        Type: 'Pages',\n        Count: 0,\n        Kids: []\n      }),\n      Names: Names\n    });\n\n    // The current page\n    _this.page = null;\n\n    // Initialize mixins\n    _this.initColor();\n    _this.initVector();\n    _this.initFonts();\n    _this.initText();\n    _this.initImages();\n\n    // Initialize the metadata\n    _this.info = {\n      Producer: 'PDFKit',\n      Creator: 'PDFKit',\n      CreationDate: new Date()\n    };\n    if (_this.options.info) {\n      for (var key in _this.options.info) {\n        var val = _this.options.info[key];\n        _this.info[key] = val;\n      }\n    }\n\n    // Write the header PDF version\n    _this._write('%PDF-' + _this.version);\n\n    // 4 binary chars, as recommended by the spec\n    _this._write('%\\xFF\\xFF\\xFF\\xFF');\n\n    // Add the first page\n    if (_this.options.autoFirstPage !== false) {\n      _this.addPage();\n    }\n    return _this;\n  }\n  createClass(PDFDocument, [{\n    key: 'addPage',\n    value: function addPage(options) {\n      // end the current page if needed\n      if (options == null) {\n        options = this.options;\n      }\n      if (!this.options.bufferPages) {\n        this.flushPages();\n      }\n\n      // create a page object\n      this.page = new PDFPage(this, options);\n      this._pageBuffer.push(this.page);\n\n      // add the page to the object store\n      var pages = this._root.data.Pages.data;\n      pages.Kids.push(this.page.dictionary);\n      pages.Count++;\n\n      // flip PDF coordinate system so that the origin is in\n      // the top left rather than the bottom left\n      this._ctm = [1, 0, 0, 1, 0, 0];\n      this.transform(1, 0, 0, -1, 0, this.page.height);\n      return this;\n    }\n  }, {\n    key: 'flushPages',\n    value: function flushPages() {\n      // this local variable exists so we're future-proof against\n      // reentrant calls to flushPages.\n      var pages = this._pageBuffer;\n      this._pageBuffer = [];\n      this._pageBufferStart += pages.length;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = Array.from(pages)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var page = _step.value;\n          page.end();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addNamedDestination',\n    value: function addNamedDestination(name) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      if (args.length === 0) {\n        args = ['XYZ', null, null, null];\n      }\n      if (args[0] === 'XYZ' && args[2] !== null) {\n        args[2] = this.page.height - args[2];\n      }\n      args.unshift(this.page.dictionary);\n      this._root.data.Names.data.Dests.add(name, args);\n    }\n  }, {\n    key: 'ref',\n    value: function ref(data) {\n      var ref = new PDFReference(this, this._offsets.length + 1, data);\n      this._offsets.push(null); // placeholder for this object's offset once it is finalized\n      this._waiting++;\n      return ref;\n    }\n  }, {\n    key: '_read',\n    value: function _read() {\n      // do nothing, but this method is required by node\n    }\n  }, {\n    key: '_write',\n    value: function _write(data) {\n      if (!Buffer.isBuffer(data)) {\n        data = new Buffer(data + '\\n', 'binary');\n      }\n      this.push(data);\n      return this._offset += data.length;\n    }\n  }, {\n    key: 'addContent',\n    value: function addContent(data) {\n      this.page.write(data);\n      return this;\n    }\n  }, {\n    key: '_refEnd',\n    value: function _refEnd(ref) {\n      this._offsets[ref.id - 1] = ref.offset;\n      if (--this._waiting === 0 && this._ended) {\n        this._finalize();\n        return this._ended = false;\n      }\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.flushPages();\n      this._info = this.ref();\n      for (var key in this.info) {\n        var val = this.info[key];\n        if (typeof val === 'string') {\n          val = new String(val);\n        }\n        this._info.data[key] = val;\n      }\n      this._info.end();\n      for (var name in this._fontFamilies) {\n        var font = this._fontFamilies[name];\n        font.finalize();\n      }\n      this._root.end();\n      this._root.data.Pages.end();\n      this._root.data.Names.end();\n      if (this._waiting === 0) {\n        return this._finalize();\n      } else {\n        return this._ended = true;\n      }\n    }\n  }, {\n    key: '_finalize',\n    value: function _finalize(fn) {\n      // generate xref\n      var xRefOffset = this._offset;\n      this._write('xref');\n      this._write('0 ' + (this._offsets.length + 1));\n      this._write('0000000000 65535 f ');\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = Array.from(this._offsets)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var offset = _step2.value;\n          offset = ('0000000000' + offset).slice(-10);\n          this._write(offset + ' 00000 n ');\n        }\n\n        // trailer\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      this._write('trailer');\n      this._write(PDFObject.convert({\n        Size: this._offsets.length + 1,\n        Root: this._root,\n        Info: this._info\n      }));\n      this._write('startxref');\n      this._write('' + xRefOffset);\n      this._write('%%EOF');\n\n      // end the stream\n      return this.push(null);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[object PDFDocument]';\n    }\n  }]);\n  return PDFDocument;\n}(stream.Readable);\nvar mixin = function mixin(methods) {\n  return function () {\n    var result = [];\n    for (var name in methods) {\n      var method = methods[name];\n      result.push(PDFDocument$1.prototype[name] = method);\n    }\n    return result;\n  }();\n};\n\n// Load mixins\nmixin(Color);\nmixin(Vector);\nmixin(Fonts);\nmixin(Text);\nmixin(Images);\nmixin(Annotations);\nexport { PDFFont, StandardFont, EmbeddedFont };\nexport default PDFDocument$1;","map":{"version":3,"names":["stream","zlib","fontkit","LZString","PNG","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","inherits","subClass","superClass","create","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_i","_s","next","done","push","err","Array","isArray","toConsumableArray","arr2","from","PDFReference","_stream$Writable","document","id","data","_this","decodeStrings","finalize","bind","gen","deflate","compress","Filter","uncompressedLength","chunks","initDeflate","_this2","createDeflate","on","chunk","Length","_write","encoding","callback","Buffer","isBuffer","write","end","apply","arguments","offset","_offset","PDFObject","convert","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","return","_refEnd","toString","Writable","PDFNameTree","_items","add","val","get$$1","sortedKeys","keys","sort","a","b","localeCompare","out","first","last","String","join","escapableRe","escapable","pad","str","slice","swapBytes","buff","l","Error","string","isUnicode","charCodeAt","replace","c","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","items","map","e","number","n","Math","round","SIZES","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","PDFPage","options","size","layout","dimensions","toUpperCase","width","height","content","ref","resources","ProcSet","fonts","Font","xobjects","XObject","ext_gstates","ExtGState","patterns","Pattern","annotations","dictionary","Annots","Type","Parent","_root","Pages","MediaBox","Contents","Resources","maxY","PDFGradient$1","PDFGradient","doc","stops","embedded","transform","stop","pos","color","opacity","_normalizeColor","_colorSpace","max","min","setTransform","m11","m12","m21","m22","dx","dy","embed","m","fn","stopsLength","matrix","bounds","encode","FunctionType","Domain","N","Functions","Bounds","Encode","_gradCount","shader","pattern","PatternType","Shading","Matrix","some","grad","opacityGradient","pageBBox","page","form","Subtype","FormType","BBox","Group","S","CS","Sh1","gstate","SMask","G","opacityPattern","PaintType","TilingType","XStep","YStep","Gs1","op","_doc$_ctm","_ctm","m0","m1","m2","m3","m4","m5","_transform","addContent","PDFLinearGradient$1","_PDFGradient","PDFLinearGradient","x1","y1","x2","y2","ShadingType","ColorSpace","Coords","Extend","PDFRadialGradient$1","_PDFGradient2","PDFRadialGradient","r1","r2","Gradient","Color","initColor","_opacityRegistry","_opacityCount","part","charAt","hex","parseInt","namedColors","result","result1","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_setColor","stroke","_setColorSpace","space","fillColor","set$$1","fillOpacity","_fillColor","strokeColor","strokeOpacity","_opacity","_doOpacity","name","_Array$from","_Array$from2","ca","CA","linearGradient","radialGradient","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","SVGPath","parameters","parse","cx","_apply","runners","solveArc","arcToSegments","segmentToBezier","initClass","cy","px","py","sx","sy","A","C","H","h","L","M","Q","q","s","T","t","V","v","Z","z","path","cmd","ret","args","curArg","foundDecimal","params","includes","commands","moveTo","bezierCurveTo","quadraticCurveTo","_a","lineTo","closePath","x","y","coords","rx","ry","rot","large","sweep","ex","ey","segs","seg","bez","rotateX","ox","oy","th","PI","sin_th","sin","cos_th","cos","abs","pl","sqrt","a00","a01","a10","a11","x0","y0","d","sfactor_sq","sfactor","xc","yc","th0","atan2","th1","th_arc","segments","ceil","asc","th2","th3","th_half","x3","y3","SVGPath$1","KAPPA","Vector","initVector","_ctmStack","save","restore","pop","lineWidth","w","_CAP_STYLES","BUTT","ROUND","SQUARE","lineCap","_JOIN_STYLES","MITER","BEVEL","lineJoin","j","miterLimit","dash","phase","undash","cp1x","cp1y","cp2x","cp2y","cpx","cpy","rect","roundedRect","r","ellipse","xe","ye","xm","ym","circle","radius","arc","startAngle","endAngle","anticlockwise","TWO_PI","HALF_PI","deltaAng","dir","numSegs","segAng","handleLen","curAng","deltaCx","deltaCy","ax","ay","segIdx","polygon","_len","points","_key","shift","point","_path","_windingRule","rule","test","fill","fillAndStroke","isFillRule","clip","values","translate","rotate","angle","rad","origin","_Array$from3","_Array$from4","scale","xFactor","yFactor","_Array$from5","_Array$from6","fs","range","left","right","inclusive","ascending","WIN_ANSI_MAP","characters","split","AFMFont","open","filename","readFileSync","contents","attributes","glyphWidths","boundingBoxes","kernPairs","charWidths","bbox","ascender","descender","xHeight","capHeight","lineGap","section","line","match","encodeText","text","res","char","glyphsForString","glyphs","charCode","characterToGlyph","character","widthOfGlyph","glyph","getKernPair","advancesForGlyphs","advances","index","Courier","CourierBold","CourierOblique","Helvetica","HelveticaBold","HelveticaOblique","TimesRoman","TimesBold","TimesItalic","STANDARD_FONTS","decompressFromBase64","createStandardFont","PDFFont","_PDFFont","StandardFont","font","BaseFont","Encoding","encoded","positions","xAdvance","yAdvance","xOffset","yOffset","advanceWidth","encodeGlyphs","widthOfString","advance","isStandardFont","toHex","codePoints","codes","code","createEmbeddedFont","EmbeddedFont","subset","createSubset","unicode","widths","getGlyph","postscriptName","unitsPerEm","ascent","descent","layoutCache","layoutRun","features","run","position","layoutCached","cached","onlyWidth","needle","_layout","gid","includeGlyph","_cmapProcessor","codePointsForGlyph","isCFF","cff","fontFile","encodeStream","pipe","familyClass","sFamilyClass","flags","post","isFixedPitch","head","macStyle","italic","tag","fromCharCode","random","FontName","Flags","FontBBox","minX","minY","maxX","ItalicAngle","italicAngle","Ascent","Descent","CapHeight","XHeight","StemV","FontFile3","FontFile2","descendantFont","CIDSystemInfo","Registry","Ordering","Supplement","FontDescriptor","W","DescendantFonts","ToUnicode","toUnicodeCmap","cmap","entries","_codePoints","lineHeight","includeGap","gap","src","family","openSync","Uint8Array","ArrayBuffer","Fonts","initFonts","_fontFamilies","_fontCount","_fontSize","_font","_registeredFonts","cacheKey","_registeredFonts$src","fontSize","currentLineHeight","registerFont","Text","initText","_lineGap","_text","_initOptions","wordSpacing","lines","_line","columns","columnGap","_fragment","_font$encode","_font$encode2","characterSpacing","_glyphs","_addGlyphs","advanceWidthScale","encodedGlyphs","encodedPositions","mode","hadOffset","addSegment","cur","flush","Data","readByte","writeByte","byte","byteAt","readBool","writeBool","readUInt32","b1","b2","b3","b4","writeUInt32","readInt32","int","writeInt32","readUInt16","writeUInt16","readInt16","writeInt16","readString","writeString","stringAt","readShort","writeShort","readLongLong","b5","b6","b7","b8","writeLongLong","high","floor","low","readInt","writeInt","start","read","bytes","buf","MARKERS","JPEG","label","marker","readUInt16BE","bits","channels","colorSpace","BitsPerComponent","Width","Height","PNGImage","image","imgData","hasAlphaChannel","Predictor","Colors","colors","Columns","palette","transparency","grayscale","greyscale","rgb","mask","indexed","loadIndexedAlphaChannel","splitAlphaChannel","alphaChannel","sMask","Decode","decodePixels","pixels","p","colorByteSize","pixelCount","len","imgData1","alphaChannel1","PDFImage","exec","Images","initImages","_imageRegistry","_imageCount","bh","bp","bw","ip","left1","openImage","wp","hp","fit","cover","align","valign","link","goTo","destination","addNamedDestination","Annotations","annotate","Rect","_convertRect","Border","Dest","note","Name","D","url","pages","Kids","URI","_markup","QuadPoints","highlight","underline","strike","lineAnnotation","rectAnnotation","ellipseAnnotation","textAnnotation","DA","PDFDocument$1","_stream$Readable","PDFDocument","version","_pageBuffer","_pageBufferStart","_offsets","_waiting","_ended","Names","Dests","Count","info","Producer","Creator","CreationDate","autoFirstPage","addPage","bufferPages","flushPages","unshift","_read","_finalize","_info","xRefOffset","Size","Root","Info","Readable","mixin","methods","method"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/node_modules/@react-pdf/pdfkit/dist/pdfkit.browser.es.js"],"sourcesContent":["import stream from 'stream';\nimport zlib from 'zlib';\nimport fontkit from '@react-pdf/fontkit';\nimport LZString from 'lz-string';\nimport PNG from '@react-pdf/png-js';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar PDFReference = function (_stream$Writable) {\n  inherits(PDFReference, _stream$Writable);\n\n  function PDFReference(document, id, data) {\n    classCallCheck(this, PDFReference);\n\n    var _this = possibleConstructorReturn(this, (PDFReference.__proto__ || Object.getPrototypeOf(PDFReference)).call(this, { decodeStrings: false }));\n\n    _this.finalize = _this.finalize.bind(_this);\n    _this.document = document;\n    _this.id = id;\n    if (data == null) {\n      data = {};\n    }\n    _this.data = data;\n\n    _this.gen = 0;\n    _this.deflate = null;\n    _this.compress = _this.document.compress && !_this.data.Filter;\n    _this.uncompressedLength = 0;\n    _this.chunks = [];\n    return _this;\n  }\n\n  createClass(PDFReference, [{\n    key: 'initDeflate',\n    value: function initDeflate() {\n      var _this2 = this;\n\n      this.data.Filter = 'FlateDecode';\n\n      this.deflate = zlib.createDeflate();\n      this.deflate.on('data', function (chunk) {\n        _this2.chunks.push(chunk);\n        return _this2.data.Length += chunk.length;\n      });\n\n      return this.deflate.on('end', this.finalize);\n    }\n  }, {\n    key: '_write',\n    value: function _write(chunk, encoding, callback) {\n      if (!Buffer.isBuffer(chunk)) {\n        chunk = new Buffer(chunk + '\\n', 'binary');\n      }\n\n      this.uncompressedLength += chunk.length;\n      if (this.data.Length == null) {\n        this.data.Length = 0;\n      }\n\n      if (this.compress) {\n        if (!this.deflate) {\n          this.initDeflate();\n        }\n        this.deflate.write(chunk);\n      } else {\n        this.chunks.push(chunk);\n        this.data.Length += chunk.length;\n      }\n\n      return callback();\n    }\n  }, {\n    key: 'end',\n    value: function end(chunk) {\n      get(PDFReference.prototype.__proto__ || Object.getPrototypeOf(PDFReference.prototype), 'end', this).apply(this, arguments);\n\n      if (this.deflate) {\n        return this.deflate.end();\n      } else {\n        return this.finalize();\n      }\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      this.offset = this.document._offset;\n\n      this.document._write(this.id + ' ' + this.gen + ' obj');\n      this.document._write(PDFObject.convert(this.data));\n\n      if (this.chunks.length) {\n        this.document._write('stream');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(this.chunks)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var chunk = _step.value;\n\n            this.document._write(chunk);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.chunks.length = 0; // free up memory\n        this.document._write('\\nendstream');\n      }\n\n      this.document._write('endobj');\n      return this.document._refEnd(this);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return this.id + ' ' + this.gen + ' R';\n    }\n  }]);\n  return PDFReference;\n}(stream.Writable);\n\n/*\nPDFNameTree - represents a name tree object\n*/\n\nvar PDFNameTree = function () {\n    function PDFNameTree() {\n        classCallCheck(this, PDFNameTree);\n\n        this._items = {};\n    }\n\n    createClass(PDFNameTree, [{\n        key: 'add',\n        value: function add(key, val) {\n            return this._items[key] = val;\n        }\n    }, {\n        key: 'get',\n        value: function get$$1(key) {\n            return this._items[key];\n        }\n    }, {\n        key: 'toString',\n        value: function toString() {\n            // Needs to be sorted by key\n            var sortedKeys = Object.keys(this._items).sort(function (a, b) {\n                return a.localeCompare(b);\n            });\n\n            var out = ['<<'];\n            if (sortedKeys.length > 1) {\n                var first = sortedKeys[0],\n                    last = sortedKeys[sortedKeys.length - 1];\n                out.push('  /Limits ' + PDFObject.convert([new String(first), new String(last)]));\n            }\n            out.push('  /Names [');\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var key = _step.value;\n\n                    out.push('    ' + PDFObject.convert(new String(key)) + ' ' + PDFObject.convert(this._items[key]));\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            out.push(']');\n            out.push('>>');\n            return out.join('\\n');\n        }\n    }]);\n    return PDFNameTree;\n}();\n\nvar escapableRe = /[\\n\\r\\t\\b\\f\\(\\)\\\\]/g;\nvar escapable = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\\\': '\\\\\\\\',\n  '(': '\\\\(',\n  ')': '\\\\)'\n};\n\nvar pad = function pad(str, length) {\n  return (Array(length + 1).join('0') + str).slice(-length);\n};\n\n// Convert little endian UTF-16 to big endian\nvar swapBytes = function swapBytes(buff) {\n  var l = buff.length;\n  if (l & 0x01) {\n    throw new Error('Buffer length must be even');\n  } else {\n    for (var i = 0, end = l - 1; i < end; i += 2) {\n      var a = buff[i];\n      buff[i] = buff[i + 1];\n      buff[i + 1] = a;\n    }\n  }\n\n  return buff;\n};\n\nvar PDFObject = function () {\n  function PDFObject() {\n    classCallCheck(this, PDFObject);\n  }\n\n  createClass(PDFObject, null, [{\n    key: 'convert',\n    value: function convert(object) {\n      // String literals are converted to the PDF name type\n      if (typeof object === 'string') {\n        return '/' + object;\n\n        // String objects are converted to PDF strings (UTF-16)\n      } else if (object instanceof String) {\n        var string = object;\n        // Detect if this is a unicode string\n        var isUnicode = false;\n        for (var i = 0, end = string.length; i < end; i++) {\n          if (string.charCodeAt(i) > 0x7f) {\n            isUnicode = true;\n            break;\n          }\n        }\n\n        // If so, encode it as big endian UTF-16\n        if (isUnicode) {\n          string = swapBytes(new Buffer('\\uFEFF' + string, 'utf16le')).toString('binary');\n        }\n\n        // Escape characters as required by the spec\n        string = string.replace(escapableRe, function (c) {\n          return escapable[c];\n        });\n\n        return '(' + string + ')';\n\n        // Buffers are converted to PDF hex strings\n      } else if (Buffer.isBuffer(object)) {\n        return '<' + object.toString('hex') + '>';\n      } else if (object instanceof PDFReference || object instanceof PDFNameTree) {\n        return object.toString();\n      } else if (object instanceof Date) {\n        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';\n      } else if (Array.isArray(object)) {\n        var items = Array.from(object).map(function (e) {\n          return PDFObject.convert(e);\n        }).join(' ');\n        return '[' + items + ']';\n      } else if ({}.toString.call(object) === '[object Object]') {\n        var out = ['<<'];\n        for (var key in object) {\n          var val = object[key];\n          out.push('/' + key + ' ' + PDFObject.convert(val));\n        }\n\n        out.push('>>');\n        return out.join('\\n');\n      } else if (typeof object === 'number') {\n        return PDFObject.number(object);\n      } else {\n        return '' + object;\n      }\n    }\n  }, {\n    key: 'number',\n    value: function number(n) {\n      if (n > -1e21 && n < 1e21) {\n        return Math.round(n * 1e6) / 1e6;\n      }\n\n      throw new Error('unsupported number: ' + n);\n    }\n  }]);\n  return PDFObject;\n}();\n\nvar SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n};\n\nvar PDFPage = function () {\n  function PDFPage(document, options) {\n    var _this = this;\n\n    classCallCheck(this, PDFPage);\n\n    this.document = document;\n    if (options == null) {\n      options = {};\n    }\n    this.size = options.size || 'letter';\n    this.layout = options.layout || 'portrait';\n\n    // calculate page dimensions\n    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];\n    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];\n\n    this.content = this.document.ref();\n\n    // Initialize the Font, XObject, and ExtGState dictionaries\n    this.resources = this.document.ref({\n      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']\n    });\n\n    // Lazily create these dictionaries\n    Object.defineProperties(this, {\n      fonts: {\n        get: function get$$1() {\n          return _this.resources.data.Font != null ? _this.resources.data.Font : _this.resources.data.Font = {};\n        }\n      },\n      xobjects: {\n        get: function get$$1() {\n          return _this.resources.data.XObject != null ? _this.resources.data.XObject : _this.resources.data.XObject = {};\n        }\n      },\n      ext_gstates: {\n        get: function get$$1() {\n          return _this.resources.data.ExtGState != null ? _this.resources.data.ExtGState : _this.resources.data.ExtGState = {};\n        }\n      },\n      patterns: {\n        get: function get$$1() {\n          return _this.resources.data.Pattern != null ? _this.resources.data.Pattern : _this.resources.data.Pattern = {};\n        }\n      },\n      annotations: {\n        get: function get$$1() {\n          return _this.dictionary.data.Annots != null ? _this.dictionary.data.Annots : _this.dictionary.data.Annots = [];\n        }\n      }\n    });\n\n    // The page dictionary\n    this.dictionary = this.document.ref({\n      Type: 'Page',\n      Parent: this.document._root.data.Pages,\n      MediaBox: [0, 0, this.width, this.height],\n      Contents: this.content,\n      Resources: this.resources\n    });\n  }\n\n  createClass(PDFPage, [{\n    key: 'maxY',\n    value: function maxY() {\n      return this.height;\n    }\n  }, {\n    key: 'write',\n    value: function write(chunk) {\n      return this.content.write(chunk);\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.dictionary.end();\n      this.resources.end();\n      return this.content.end();\n    }\n  }]);\n  return PDFPage;\n}();\n\nvar number = PDFObject.number;\n\nvar PDFGradient$1 = function () {\n  function PDFGradient(doc) {\n    classCallCheck(this, PDFGradient);\n\n    this.doc = doc;\n    this.stops = [];\n    this.embedded = false;\n    this.transform = [1, 0, 0, 1, 0, 0];\n  }\n\n  createClass(PDFGradient, [{\n    key: 'stop',\n    value: function stop(pos, color, opacity) {\n      if (opacity == null) {\n        opacity = 1;\n      }\n      color = this.doc._normalizeColor(color);\n\n      if (this.stops.length === 0) {\n        if (color.length === 3) {\n          this._colorSpace = 'DeviceRGB';\n        } else if (color.length === 4) {\n          this._colorSpace = 'DeviceCMYK';\n        } else if (color.length === 1) {\n          this._colorSpace = 'DeviceGray';\n        } else {\n          throw new Error('Unknown color space');\n        }\n      } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {\n        throw new Error('All gradient stops must use the same color space');\n      }\n\n      opacity = Math.max(0, Math.min(1, opacity));\n      this.stops.push([pos, color, opacity]);\n      return this;\n    }\n  }, {\n    key: 'setTransform',\n    value: function setTransform(m11, m12, m21, m22, dx, dy) {\n      this.transform = [m11, m12, m21, m22, dx, dy];\n      return this;\n    }\n  }, {\n    key: 'embed',\n    value: function embed(m) {\n      var fn = void 0;\n      var stopsLength = this.stops.length;\n      if (stopsLength === 0) {\n        return;\n      }\n      this.embedded = true;\n      this.matrix = m;\n\n      // if the last stop comes before 100%, add a copy at 100%\n      var last = this.stops[stopsLength - 1];\n      if (last[0] < 1) {\n        this.stops.push([1, last[1], last[2]]);\n      }\n\n      var bounds = [];\n      var encode = [];\n      var stops = [];\n\n      for (var i = 0; i < stopsLength - 1; i++) {\n        encode.push(0, 1);\n        if (i + 2 !== stopsLength) {\n          bounds.push(this.stops[i + 1][0]);\n        }\n\n        fn = this.doc.ref({\n          FunctionType: 2,\n          Domain: [0, 1],\n          C0: this.stops[i + 0][1],\n          C1: this.stops[i + 1][1],\n          N: 1\n        });\n\n        stops.push(fn);\n        fn.end();\n      }\n\n      // if there are only two stops, we don't need a stitching function\n      if (stopsLength === 1) {\n        fn = stops[0];\n      } else {\n        fn = this.doc.ref({\n          FunctionType: 3, // stitching function\n          Domain: [0, 1],\n          Functions: stops,\n          Bounds: bounds,\n          Encode: encode\n        });\n\n        fn.end();\n      }\n\n      this.id = 'Sh' + ++this.doc._gradCount;\n\n      var shader = this.shader(fn);\n      shader.end();\n\n      var pattern = this.doc.ref({\n        Type: 'Pattern',\n        PatternType: 2,\n        Shading: shader,\n        Matrix: this.matrix.map(number)\n      });\n\n      pattern.end();\n\n      if (this.stops.some(function (stop) {\n        return stop[2] < 1;\n      })) {\n        var grad = this.opacityGradient();\n        grad._colorSpace = 'DeviceGray';\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.stops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var stop = _step.value;\n\n            grad.stop(stop[0], [stop[2]]);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        grad = grad.embed(this.matrix);\n\n        var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];\n\n        var form = this.doc.ref({\n          Type: 'XObject',\n          Subtype: 'Form',\n          FormType: 1,\n          BBox: pageBBox,\n          Group: {\n            Type: 'Group',\n            S: 'Transparency',\n            CS: 'DeviceGray'\n          },\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: grad\n            }\n          }\n        });\n\n        form.write('/Pattern cs /Sh1 scn');\n        form.end(pageBBox.join(' ') + ' re f');\n\n        var gstate = this.doc.ref({\n          Type: 'ExtGState',\n          SMask: {\n            Type: 'Mask',\n            S: 'Luminosity',\n            G: form\n          }\n        });\n\n        gstate.end();\n\n        var opacityPattern = this.doc.ref({\n          Type: 'Pattern',\n          PatternType: 1,\n          PaintType: 1,\n          TilingType: 2,\n          BBox: pageBBox,\n          XStep: pageBBox[2],\n          YStep: pageBBox[3],\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: pattern\n            },\n            ExtGState: {\n              Gs1: gstate\n            }\n          }\n        });\n\n        opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');\n        opacityPattern.end(pageBBox.join(' ') + ' re f');\n\n        this.doc.page.patterns[this.id] = opacityPattern;\n      } else {\n        this.doc.page.patterns[this.id] = pattern;\n      }\n\n      return pattern;\n    }\n  }, {\n    key: 'apply',\n    value: function apply(op) {\n      // apply gradient transform to existing document ctm\n      var _doc$_ctm = slicedToArray(this.doc._ctm, 6),\n          m0 = _doc$_ctm[0],\n          m1 = _doc$_ctm[1],\n          m2 = _doc$_ctm[2],\n          m3 = _doc$_ctm[3],\n          m4 = _doc$_ctm[4],\n          m5 = _doc$_ctm[5];\n\n      var _transform = slicedToArray(this.transform, 6),\n          m11 = _transform[0],\n          m12 = _transform[1],\n          m21 = _transform[2],\n          m22 = _transform[3],\n          dx = _transform[4],\n          dy = _transform[5];\n\n      var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];\n\n      if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {\n        this.embed(m);\n      }\n      return this.doc.addContent('/' + this.id + ' ' + op);\n    }\n  }]);\n  return PDFGradient;\n}();\n\nvar PDFLinearGradient$1 = function (_PDFGradient) {\n  inherits(PDFLinearGradient, _PDFGradient);\n\n  function PDFLinearGradient(doc, x1, y1, x2, y2) {\n    classCallCheck(this, PDFLinearGradient);\n\n    var _this = possibleConstructorReturn(this, (PDFLinearGradient.__proto__ || Object.getPrototypeOf(PDFLinearGradient)).call(this, doc));\n\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n\n  createClass(PDFLinearGradient, [{\n    key: 'shader',\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 2,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.x2, this.y2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: 'opacityGradient',\n    value: function opacityGradient() {\n      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n    }\n  }]);\n  return PDFLinearGradient;\n}(PDFGradient$1);\n\nvar PDFRadialGradient$1 = function (_PDFGradient2) {\n  inherits(PDFRadialGradient, _PDFGradient2);\n\n  function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {\n    classCallCheck(this, PDFRadialGradient);\n\n    var _this2 = possibleConstructorReturn(this, (PDFRadialGradient.__proto__ || Object.getPrototypeOf(PDFRadialGradient)).call(this, doc));\n\n    _this2.doc = doc;\n    _this2.x1 = x1;\n    _this2.y1 = y1;\n    _this2.r1 = r1;\n    _this2.x2 = x2;\n    _this2.y2 = y2;\n    _this2.r2 = r2;\n    return _this2;\n  }\n\n  createClass(PDFRadialGradient, [{\n    key: 'shader',\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 3,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: 'opacityGradient',\n    value: function opacityGradient() {\n      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n    }\n  }]);\n  return PDFRadialGradient;\n}(PDFGradient$1);\n\nvar Gradient = { PDFGradient: PDFGradient$1, PDFLinearGradient: PDFLinearGradient$1, PDFRadialGradient: PDFRadialGradient$1 };\n\nvar PDFGradient = Gradient.PDFGradient;\nvar PDFLinearGradient = Gradient.PDFLinearGradient;\nvar PDFRadialGradient = Gradient.PDFRadialGradient;\n\n\nvar Color = {\n  initColor: function initColor() {\n    // The opacity dictionaries\n    this._opacityRegistry = {};\n    this._opacityCount = 0;\n    return this._gradCount = 0;\n  },\n  _normalizeColor: function _normalizeColor(color) {\n    if (color instanceof PDFGradient) {\n      return color;\n    }\n\n    var part = void 0;\n    if (typeof color === 'string') {\n      if (color.charAt(0) === '#') {\n        if (color.length === 4) {\n          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');\n        }\n        var hex = parseInt(color.slice(1), 16);\n        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];\n      } else if (namedColors[color]) {\n        color = namedColors[color];\n      }\n    }\n\n    if (Array.isArray(color)) {\n      // RGB\n      if (color.length === 3) {\n        color = function () {\n          var result = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Array.from(color)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              part = _step.value;\n\n              result.push(part / 255);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return result;\n        }();\n\n        // CMYK\n      } else if (color.length === 4) {\n        color = function () {\n          var result1 = [];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = Array.from(color)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              part = _step2.value;\n\n              result1.push(part / 100);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          return result1;\n        }();\n      }\n\n      return color;\n    }\n\n    return null;\n  },\n  _setColor: function _setColor(color, stroke) {\n    color = this._normalizeColor(color);\n    if (!color) {\n      return false;\n    }\n\n    var op = stroke ? 'SCN' : 'scn';\n\n    if (color instanceof PDFGradient) {\n      this._setColorSpace('Pattern', stroke);\n      color.apply(op);\n    } else {\n      var space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';\n      this._setColorSpace(space, stroke);\n\n      color = color.join(' ');\n      this.addContent(color + ' ' + op);\n    }\n\n    return true;\n  },\n  _setColorSpace: function _setColorSpace(space, stroke) {\n    var op = stroke ? 'CS' : 'cs';\n    return this.addContent('/' + space + ' ' + op);\n  },\n  fillColor: function fillColor(color, opacity) {\n    var set$$1 = this._setColor(color, false);\n    if (set$$1) {\n      this.fillOpacity(opacity);\n    }\n\n    // save this for text wrapper, which needs to reset\n    // the fill color on new pages\n    this._fillColor = [color, opacity];\n    return this;\n  },\n  strokeColor: function strokeColor(color, opacity) {\n    var set$$1 = this._setColor(color, true);\n    if (set$$1) {\n      this.strokeOpacity(opacity);\n    }\n    return this;\n  },\n  opacity: function opacity(_opacity) {\n    this._doOpacity(_opacity, _opacity);\n    return this;\n  },\n  fillOpacity: function fillOpacity(opacity) {\n    this._doOpacity(opacity, null);\n    return this;\n  },\n  strokeOpacity: function strokeOpacity(opacity) {\n    this._doOpacity(null, opacity);\n    return this;\n  },\n  _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {\n    var dictionary = void 0,\n        name = void 0;\n    if (fillOpacity == null && strokeOpacity == null) {\n      return;\n    }\n\n    if (fillOpacity != null) {\n      fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n    }\n    if (strokeOpacity != null) {\n      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n    }\n    var key = fillOpacity + '_' + strokeOpacity;\n\n    if (this._opacityRegistry[key]) {\n      var _Array$from = Array.from(this._opacityRegistry[key]);\n\n      var _Array$from2 = slicedToArray(_Array$from, 2);\n\n      dictionary = _Array$from2[0];\n      name = _Array$from2[1];\n    } else {\n      dictionary = { Type: 'ExtGState' };\n\n      if (fillOpacity != null) {\n        dictionary.ca = fillOpacity;\n      }\n      if (strokeOpacity != null) {\n        dictionary.CA = strokeOpacity;\n      }\n\n      dictionary = this.ref(dictionary);\n      dictionary.end();\n      var id = ++this._opacityCount;\n      name = 'Gs' + id;\n      this._opacityRegistry[key] = [dictionary, name];\n    }\n\n    this.page.ext_gstates[name] = dictionary;\n    return this.addContent('/' + name + ' gs');\n  },\n  linearGradient: function linearGradient(x1, y1, x2, y2) {\n    return new PDFLinearGradient(this, x1, y1, x2, y2);\n  },\n  radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {\n    return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);\n  }\n};\n\nvar namedColors = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\nvar SVGPath = function () {\n  var parameters = undefined;\n  var parse = undefined;\n  var cx = undefined;\n  var _apply = undefined;\n  var runners = undefined;\n  var solveArc = undefined;\n  var arcToSegments = undefined;\n  var segmentToBezier = undefined;\n  SVGPath = function () {\n    function SVGPath() {\n      classCallCheck(this, SVGPath);\n    }\n\n    createClass(SVGPath, null, [{\n      key: 'initClass',\n      value: function initClass() {\n        var cy = void 0,\n            px = void 0,\n            py = void 0,\n            sx = void 0,\n            sy = void 0;\n        parameters = {\n          A: 7,\n          a: 7,\n          C: 6,\n          c: 6,\n          H: 1,\n          h: 1,\n          L: 2,\n          l: 2,\n          M: 2,\n          m: 2,\n          Q: 4,\n          q: 4,\n          S: 4,\n          s: 4,\n          T: 2,\n          t: 2,\n          V: 1,\n          v: 1,\n          Z: 0,\n          z: 0\n        };\n\n        parse = function parse(path) {\n          var cmd = void 0;\n          var ret = [];\n          var args = [];\n          var curArg = '';\n          var foundDecimal = false;\n          var params = 0;\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Array.from(path)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var c = _step.value;\n\n              if (parameters[c] != null) {\n                params = parameters[c];\n                if (cmd) {\n                  // save existing command\n                  if (curArg.length > 0) {\n                    args[args.length] = +curArg;\n                  }\n                  ret[ret.length] = { cmd: cmd, args: args };\n\n                  args = [];\n                  curArg = '';\n                  foundDecimal = false;\n                }\n\n                cmd = c;\n              } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {\n                if (curArg.length === 0) {\n                  continue;\n                }\n\n                if (args.length === params) {\n                  // handle reused commands\n                  ret[ret.length] = { cmd: cmd, args: args };\n                  args = [+curArg];\n\n                  // handle assumed commands\n                  if (cmd === 'M') {\n                    cmd = 'L';\n                  }\n                  if (cmd === 'm') {\n                    cmd = 'l';\n                  }\n                } else {\n                  args[args.length] = +curArg;\n                }\n\n                foundDecimal = c === '.';\n\n                // fix for negative numbers or repeated decimals with no delimeter between commands\n                curArg = ['-', '.'].includes(c) ? c : '';\n              } else {\n                curArg += c;\n                if (c === '.') {\n                  foundDecimal = true;\n                }\n              }\n            }\n\n            // add the last command\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          if (curArg.length > 0) {\n            if (args.length === params) {\n              // handle reused commands\n              ret[ret.length] = { cmd: cmd, args: args };\n              args = [+curArg];\n\n              // handle assumed commands\n              if (cmd === 'M') {\n                cmd = 'L';\n              }\n              if (cmd === 'm') {\n                cmd = 'l';\n              }\n            } else {\n              args[args.length] = +curArg;\n            }\n          }\n\n          ret[ret.length] = { cmd: cmd, args: args };\n\n          return ret;\n        };\n\n        cx = cy = px = py = sx = sy = 0;\n        _apply = function _apply(commands, doc) {\n          // current point, control point, and subpath starting point\n          cx = cy = px = py = sx = sy = 0;\n\n          // run the commands\n          for (var i = 0; i < commands.length; i++) {\n            var c = commands[i];\n            if (typeof runners[c.cmd] === 'function') {\n              runners[c.cmd](doc, c.args);\n            }\n          }\n\n          return cx = cy = px = py = 0;\n        };\n\n        runners = {\n          M: function M(doc, a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return doc.moveTo(cx, cy);\n          },\n          m: function m(doc, a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return doc.moveTo(cx, cy);\n          },\n          C: function C(doc, a) {\n            cx = a[4];\n            cy = a[5];\n            px = a[2];\n            py = a[3];\n            return doc.bezierCurveTo.apply(doc, toConsumableArray(Array.from(a || [])));\n          },\n          c: function c(doc, a) {\n            doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n            px = cx + a[2];\n            py = cy + a[3];\n            cx += a[4];\n            return cy += a[5];\n          },\n          S: function S(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            }\n\n            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            return cy = a[3];\n          },\n          s: function s(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            }\n\n            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            return cy += a[3];\n          },\n          Q: function Q(doc, a) {\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            cy = a[3];\n            return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n          },\n          q: function q(doc, a) {\n            doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            return cy += a[3];\n          },\n          T: function T(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            } else {\n              px = cx - (px - cx);\n              py = cy - (py - cy);\n            }\n\n            doc.quadraticCurveTo(px, py, a[0], a[1]);\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n            cx = a[0];\n            return cy = a[1];\n          },\n          t: function t(doc, a) {\n            if (px === null) {\n              px = cx;\n              py = cy;\n            } else {\n              px = cx - (px - cx);\n              py = cy - (py - cy);\n            }\n\n            doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n            cx += a[0];\n            return cy += a[1];\n          },\n          A: function A(doc, a) {\n            solveArc(doc, cx, cy, a);\n            cx = a[5];\n            return cy = a[6];\n          },\n          a: function a(doc, _a) {\n            _a[5] += cx;\n            _a[6] += cy;\n            solveArc(doc, cx, cy, _a);\n            cx = _a[5];\n            return cy = _a[6];\n          },\n          L: function L(doc, a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          l: function l(doc, a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          H: function H(doc, a) {\n            cx = a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          h: function h(doc, a) {\n            cx += a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          V: function V(doc, a) {\n            cy = a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          v: function v(doc, a) {\n            cy += a[0];\n            px = py = null;\n            return doc.lineTo(cx, cy);\n          },\n          Z: function Z(doc) {\n            doc.closePath();\n            cx = sx;\n            return cy = sy;\n          },\n          z: function z(doc) {\n            doc.closePath();\n            cx = sx;\n            return cy = sy;\n          }\n        };\n\n        solveArc = function solveArc(doc, x, y, coords) {\n          var _Array$from = Array.from(coords),\n              _Array$from2 = slicedToArray(_Array$from, 7),\n              rx = _Array$from2[0],\n              ry = _Array$from2[1],\n              rot = _Array$from2[2],\n              large = _Array$from2[3],\n              sweep = _Array$from2[4],\n              ex = _Array$from2[5],\n              ey = _Array$from2[6];\n\n          var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n\n          return function () {\n            var result = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = Array.from(segs)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var seg = _step2.value;\n\n                var bez = segmentToBezier.apply(undefined, toConsumableArray(Array.from(seg || [])));\n                result.push(doc.bezierCurveTo.apply(doc, toConsumableArray(Array.from(bez || []))));\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            return result;\n          }();\n        };\n\n        // from Inkscape svgtopdf, thanks!\n        arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n          var th = rotateX * (Math.PI / 180);\n          var sin_th = Math.sin(th);\n          var cos_th = Math.cos(th);\n          rx = Math.abs(rx);\n          ry = Math.abs(ry);\n          px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n          py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n          var pl = px * px / (rx * rx) + py * py / (ry * ry);\n          if (pl > 1) {\n            pl = Math.sqrt(pl);\n            rx *= pl;\n            ry *= pl;\n          }\n\n          var a00 = cos_th / rx;\n          var a01 = sin_th / rx;\n          var a10 = -sin_th / ry;\n          var a11 = cos_th / ry;\n          var x0 = a00 * ox + a01 * oy;\n          var y0 = a10 * ox + a11 * oy;\n          var x1 = a00 * x + a01 * y;\n          var y1 = a10 * x + a11 * y;\n\n          var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n          var sfactor_sq = 1 / d - 0.25;\n          if (sfactor_sq < 0) {\n            sfactor_sq = 0;\n          }\n          var sfactor = Math.sqrt(sfactor_sq);\n          if (sweep === large) {\n            sfactor = -sfactor;\n          }\n\n          var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n          var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n\n          var th0 = Math.atan2(y0 - yc, x0 - xc);\n          var th1 = Math.atan2(y1 - yc, x1 - xc);\n\n          var th_arc = th1 - th0;\n          if (th_arc < 0 && sweep === 1) {\n            th_arc += 2 * Math.PI;\n          } else if (th_arc > 0 && sweep === 0) {\n            th_arc -= 2 * Math.PI;\n          }\n\n          var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n          var result = [];\n\n          for (var i = 0, end = segments, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n            var th2 = th0 + i * th_arc / segments;\n            var th3 = th0 + (i + 1) * th_arc / segments;\n            result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n          }\n\n          return result;\n        };\n\n        segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n          var a00 = cos_th * rx;\n          var a01 = -sin_th * ry;\n          var a10 = sin_th * rx;\n          var a11 = cos_th * ry;\n\n          var th_half = 0.5 * (th1 - th0);\n          var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n          var x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n          var y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n          var x3 = cx + Math.cos(th1);\n          var y3 = cy + Math.sin(th1);\n          var x2 = x3 + t * Math.sin(th1);\n          var y2 = y3 - t * Math.cos(th1);\n\n          return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];\n        };\n      }\n    }, {\n      key: 'apply',\n      value: function apply(doc, path) {\n        var commands = parse(path);\n        return _apply(commands, doc);\n      }\n    }]);\n    return SVGPath;\n  }();\n  SVGPath.initClass();\n  return SVGPath;\n}();\n\nvar SVGPath$1 = SVGPath;\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar Vector = {\n  initVector: function initVector() {\n    this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix\n    return this._ctmStack = [];\n  },\n  save: function save() {\n    this._ctmStack.push(this._ctm.slice());\n    // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n    return this.addContent('q');\n  },\n  restore: function restore() {\n    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];\n    return this.addContent('Q');\n  },\n  closePath: function closePath() {\n    return this.addContent('h');\n  },\n  lineWidth: function lineWidth(w) {\n    return this.addContent(PDFObject.number(w) + ' w');\n  },\n\n\n  _CAP_STYLES: {\n    BUTT: 0,\n    ROUND: 1,\n    SQUARE: 2\n  },\n\n  lineCap: function lineCap(c) {\n    if (typeof c === 'string') {\n      c = this._CAP_STYLES[c.toUpperCase()];\n    }\n    return this.addContent(c + ' J');\n  },\n\n\n  _JOIN_STYLES: {\n    MITER: 0,\n    ROUND: 1,\n    BEVEL: 2\n  },\n\n  lineJoin: function lineJoin(j) {\n    if (typeof j === 'string') {\n      j = this._JOIN_STYLES[j.toUpperCase()];\n    }\n    return this.addContent(j + ' j');\n  },\n  miterLimit: function miterLimit(m) {\n    return this.addContent(PDFObject.number(m) + ' M');\n  },\n  dash: function dash(length, options) {\n    var phase = void 0;\n    if (options == null) {\n      options = {};\n    }\n    if (length == null) {\n      return this;\n    }\n    if (Array.isArray(length)) {\n      length = Array.from(length).map(function (v) {\n        return PDFObject.number(v);\n      }).join(' ');\n      phase = options.phase || 0;\n      return this.addContent('[' + length + '] ' + PDFObject.number(phase) + ' d');\n    } else {\n      var space = options.space != null ? options.space : length;\n      phase = options.phase || 0;\n      return this.addContent('[' + PDFObject.number(length) + ' ' + PDFObject.number(space) + '] ' + PDFObject.number(phase) + ' d');\n    }\n  },\n  undash: function undash() {\n    return this.addContent('[] 0 d');\n  },\n  moveTo: function moveTo(x, y) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' m');\n  },\n  lineTo: function lineTo(x, y) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' l');\n  },\n  bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.addContent(PDFObject.number(cp1x) + ' ' + PDFObject.number(cp1y) + ' ' + PDFObject.number(cp2x) + ' ' + PDFObject.number(cp2y) + ' ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' c');\n  },\n  quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {\n    return this.addContent(PDFObject.number(cpx) + ' ' + PDFObject.number(cpy) + ' ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' v');\n  },\n  rect: function rect(x, y, w, h) {\n    return this.addContent(PDFObject.number(x) + ' ' + PDFObject.number(y) + ' ' + PDFObject.number(w) + ' ' + PDFObject.number(h) + ' re');\n  },\n  roundedRect: function roundedRect(x, y, w, h, r) {\n    if (r == null) {\n      r = 0;\n    }\n    r = Math.min(r, 0.5 * w, 0.5 * h);\n\n    // amount to inset control points from corners (see `ellipse`)\n    var c = r * (1.0 - KAPPA);\n\n    this.moveTo(x + r, y);\n    this.lineTo(x + w - r, y);\n    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n    this.lineTo(x + w, y + h - r);\n    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n    this.lineTo(x + r, y + h);\n    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n    this.lineTo(x, y + r);\n    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n    return this.closePath();\n  },\n  ellipse: function ellipse(x, y, r1, r2) {\n    // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n    if (r2 == null) {\n      r2 = r1;\n    }\n    x -= r1;\n    y -= r2;\n    var ox = r1 * KAPPA;\n    var oy = r2 * KAPPA;\n    var xe = x + r1 * 2;\n    var ye = y + r2 * 2;\n    var xm = x + r1;\n    var ym = y + r2;\n\n    this.moveTo(x, ym);\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    return this.closePath();\n  },\n  circle: function circle(x, y, radius) {\n    return this.ellipse(x, y, radius);\n  },\n  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    if (anticlockwise == null) {\n      anticlockwise = false;\n    }\n    var TWO_PI = 2.0 * Math.PI;\n    var HALF_PI = 0.5 * Math.PI;\n\n    var deltaAng = endAngle - startAngle;\n\n    if (Math.abs(deltaAng) > TWO_PI) {\n      // draw only full circle if more than that is specified\n      deltaAng = TWO_PI;\n    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n      // necessary to flip direction of rendering\n      var dir = anticlockwise ? -1 : 1;\n      deltaAng = dir * TWO_PI + deltaAng;\n    }\n\n    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n    var segAng = deltaAng / numSegs;\n    var handleLen = segAng / HALF_PI * KAPPA * radius;\n    var curAng = startAngle;\n\n    // component distances between anchor point and control point\n    var deltaCx = -Math.sin(curAng) * handleLen;\n    var deltaCy = Math.cos(curAng) * handleLen;\n\n    // anchor point\n    var ax = x + Math.cos(curAng) * radius;\n    var ay = y + Math.sin(curAng) * radius;\n\n    // calculate and render segments\n    this.moveTo(ax, ay);\n\n    for (var segIdx = 0, end = numSegs, asc = 0 <= end; asc ? segIdx < end : segIdx > end; asc ? segIdx++ : segIdx--) {\n      // starting control point\n      var cp1x = ax + deltaCx;\n      var cp1y = ay + deltaCy;\n\n      // step angle\n      curAng += segAng;\n\n      // next anchor point\n      ax = x + Math.cos(curAng) * radius;\n      ay = y + Math.sin(curAng) * radius;\n\n      // next control point delta\n      deltaCx = -Math.sin(curAng) * handleLen;\n      deltaCy = Math.cos(curAng) * handleLen;\n\n      // ending control point\n      var cp2x = ax - deltaCx;\n      var cp2y = ay - deltaCy;\n\n      // render segment\n      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n    }\n\n    return this;\n  },\n  polygon: function polygon() {\n    for (var _len = arguments.length, points = Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n\n    this.moveTo.apply(this, toConsumableArray(Array.from(points.shift() || [])));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Array.from(points)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var point = _step.value;\n\n        this.lineTo.apply(this, toConsumableArray(Array.from(point || [])));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return this.closePath();\n  },\n  path: function path(_path) {\n    SVGPath$1.apply(this, _path);\n    return this;\n  },\n  _windingRule: function _windingRule(rule) {\n    if (/even-?odd/.test(rule)) {\n      return '*';\n    }\n\n    return '';\n  },\n  fill: function fill(color, rule) {\n    if (/(even-?odd)|(non-?zero)/.test(color)) {\n      rule = color;\n      color = null;\n    }\n\n    if (color) {\n      this.fillColor(color);\n    }\n    return this.addContent('f' + this._windingRule(rule));\n  },\n  stroke: function stroke(color) {\n    if (color) {\n      this.strokeColor(color);\n    }\n    return this.addContent('S');\n  },\n  fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {\n    if (strokeColor == null) {\n      strokeColor = fillColor;\n    }\n    var isFillRule = /(even-?odd)|(non-?zero)/;\n    if (isFillRule.test(fillColor)) {\n      rule = fillColor;\n      fillColor = null;\n    }\n\n    if (isFillRule.test(strokeColor)) {\n      rule = strokeColor;\n      strokeColor = fillColor;\n    }\n\n    if (fillColor) {\n      this.fillColor(fillColor);\n      this.strokeColor(strokeColor);\n    }\n\n    return this.addContent('B' + this._windingRule(rule));\n  },\n  clip: function clip(rule) {\n    return this.addContent('W' + this._windingRule(rule) + ' n');\n  },\n  transform: function transform(m11, m12, m21, m22, dx, dy) {\n    // keep track of the current transformation matrix\n    var m = this._ctm;\n\n    var _Array$from = Array.from(m),\n        _Array$from2 = slicedToArray(_Array$from, 6),\n        m0 = _Array$from2[0],\n        m1 = _Array$from2[1],\n        m2 = _Array$from2[2],\n        m3 = _Array$from2[3],\n        m4 = _Array$from2[4],\n        m5 = _Array$from2[5];\n\n    m[0] = m0 * m11 + m2 * m12;\n    m[1] = m1 * m11 + m3 * m12;\n    m[2] = m0 * m21 + m2 * m22;\n    m[3] = m1 * m21 + m3 * m22;\n    m[4] = m0 * dx + m2 * dy + m4;\n    m[5] = m1 * dx + m3 * dy + m5;\n\n    var values = [m11, m12, m21, m22, dx, dy].map(function (v) {\n      return PDFObject.number(v);\n    }).join(' ');\n    return this.addContent(values + ' cm');\n  },\n  translate: function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  },\n  rotate: function rotate(angle, options) {\n    var y = void 0;\n    if (options == null) {\n      options = {};\n    }\n    var rad = angle * Math.PI / 180;\n    var cos = Math.cos(rad);\n    var sin = Math.sin(rad);\n    var x = y = 0;\n\n    if (options.origin != null) {\n      var _Array$from3 = Array.from(options.origin);\n\n      var _Array$from4 = slicedToArray(_Array$from3, 2);\n\n      x = _Array$from4[0];\n      y = _Array$from4[1];\n\n      var x1 = x * cos - y * sin;\n      var y1 = x * sin + y * cos;\n      x -= x1;\n      y -= y1;\n    }\n\n    return this.transform(cos, sin, -sin, cos, x, y);\n  },\n  scale: function scale(xFactor, yFactor, options) {\n    var y = void 0;\n    if (yFactor == null) {\n      yFactor = xFactor;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if ((typeof yFactor === 'undefined' ? 'undefined' : _typeof(yFactor)) === 'object') {\n      options = yFactor;\n      yFactor = xFactor;\n    }\n\n    var x = y = 0;\n    if (options.origin != null) {\n      var _Array$from5 = Array.from(options.origin);\n\n      var _Array$from6 = slicedToArray(_Array$from5, 2);\n\n      x = _Array$from6[0];\n      y = _Array$from6[1];\n\n      x -= xFactor * x;\n      y -= yFactor * y;\n    }\n\n    return this.transform(xFactor, 0, 0, yFactor, x, y);\n  }\n};\n\nvar fs = {}\n\nvar range = function range(left, right, inclusive) {\n  var range = [];\n  var ascending = left < right;\n  var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n\n  for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i);\n  }\n\n  return range;\n};\n\nvar WIN_ANSI_MAP = {\n  402: 131,\n  8211: 150,\n  8212: 151,\n  8216: 145,\n  8217: 146,\n  8218: 130,\n  8220: 147,\n  8221: 148,\n  8222: 132,\n  8224: 134,\n  8225: 135,\n  8226: 149,\n  8230: 133,\n  8364: 128,\n  8240: 137,\n  8249: 139,\n  8250: 155,\n  710: 136,\n  8482: 153,\n  338: 140,\n  339: 156,\n  732: 152,\n  352: 138,\n  353: 154,\n  376: 159,\n  381: 142,\n  382: 158\n};\n\nvar characters = '.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n\\nspace         exclam         quotedbl       numbersign\\ndollar        percent        ampersand      quotesingle\\nparenleft     parenright     asterisk       plus\\ncomma         hyphen         period         slash\\nzero          one            two            three\\nfour          five           six            seven\\neight         nine           colon          semicolon\\nless          equal          greater        question\\n\\nat            A              B              C\\nD             E              F              G\\nH             I              J              K\\nL             M              N              O\\nP             Q              R              S\\nT             U              V              W\\nX             Y              Z              bracketleft\\nbackslash     bracketright   asciicircum    underscore\\n\\ngrave         a              b              c\\nd             e              f              g\\nh             i              j              k\\nl             m              n              o\\np             q              r              s\\nt             u              v              w\\nx             y              z              braceleft\\nbar           braceright     asciitilde     .notdef\\n\\nEuro          .notdef        quotesinglbase florin\\nquotedblbase  ellipsis       dagger         daggerdbl\\ncircumflex    perthousand    Scaron         guilsinglleft\\nOE            .notdef        Zcaron         .notdef\\n.notdef       quoteleft      quoteright     quotedblleft\\nquotedblright bullet         endash         emdash\\ntilde         trademark      scaron         guilsinglright\\noe            .notdef        zcaron         ydieresis\\n\\nspace         exclamdown     cent           sterling\\ncurrency      yen            brokenbar      section\\ndieresis      copyright      ordfeminine    guillemotleft\\nlogicalnot    hyphen         registered     macron\\ndegree        plusminus      twosuperior    threesuperior\\nacute         mu             paragraph      periodcentered\\ncedilla       onesuperior    ordmasculine   guillemotright\\nonequarter    onehalf        threequarters  questiondown\\n\\nAgrave        Aacute         Acircumflex    Atilde\\nAdieresis     Aring          AE             Ccedilla\\nEgrave        Eacute         Ecircumflex    Edieresis\\nIgrave        Iacute         Icircumflex    Idieresis\\nEth           Ntilde         Ograve         Oacute\\nOcircumflex   Otilde         Odieresis      multiply\\nOslash        Ugrave         Uacute         Ucircumflex\\nUdieresis     Yacute         Thorn          germandbls\\n\\nagrave        aacute         acircumflex    atilde\\nadieresis     aring          ae             ccedilla\\negrave        eacute         ecircumflex    edieresis\\nigrave        iacute         icircumflex    idieresis\\neth           ntilde         ograve         oacute\\nocircumflex   otilde         odieresis      divide\\noslash        ugrave         uacute         ucircumflex\\nudieresis     yacute         thorn          ydieresis'.split(/\\s+/);\n\nvar AFMFont = function () {\n  createClass(AFMFont, null, [{\n    key: 'open',\n    value: function open(filename) {\n      {\n        throw new Error('AFMFont.open not available on browser build');\n      }\n      return new AFMFont(fs.readFileSync(filename, 'utf8'));\n    }\n  }]);\n\n  function AFMFont(contents) {\n    var _this = this;\n\n    classCallCheck(this, AFMFont);\n\n    this.contents = contents;\n    this.attributes = {};\n    this.glyphWidths = {};\n    this.boundingBoxes = {};\n    this.kernPairs = {};\n\n    this.parse();\n    this.charWidths = range(0, 255, true).map(function (i) {\n      return _this.glyphWidths[characters[i]];\n    });\n    this.bbox = Array.from(this.attributes['FontBBox'].split(/\\s+/)).map(function (e) {\n      return +e;\n    });\n    this.ascender = +(this.attributes['Ascender'] || 0);\n    this.descender = +(this.attributes['Descender'] || 0);\n    this.xHeight = +(this.attributes['XHeight'] || 0);\n    this.capHeight = +(this.attributes['CapHeight'] || 0);\n    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n  }\n\n  createClass(AFMFont, [{\n    key: 'parse',\n    value: function parse() {\n      var section = '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Array.from(this.contents.split('\\n'))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var line = _step.value;\n\n          var match;\n          var a;\n          if (match = line.match(/^Start(\\w+)/)) {\n            section = match[1];\n            continue;\n          } else if (match = line.match(/^End(\\w+)/)) {\n            section = '';\n            continue;\n          }\n\n          switch (section) {\n            case 'FontMetrics':\n              match = line.match(/(^\\w+)\\s+(.*)/);\n              var key = match[1];\n              var value = match[2];\n\n              if (a = this.attributes[key]) {\n                if (!Array.isArray(a)) {\n                  a = this.attributes[key] = [a];\n                }\n                a.push(value);\n              } else {\n                this.attributes[key] = value;\n              }\n              break;\n\n            case 'CharMetrics':\n              if (!/^CH?\\s/.test(line)) {\n                continue;\n              }\n              var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n              this.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n              break;\n\n            case 'KernPairs':\n              match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n              if (match) {\n                this.kernPairs[match[1] + '\\0' + match[2]] = parseInt(match[3]);\n              }\n              break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'encodeText',\n    value: function encodeText(text) {\n      var res = [];\n      for (var i = 0, end = text.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        var char = text.charCodeAt(i);\n        char = WIN_ANSI_MAP[char] || char;\n        res.push(char.toString(16));\n      }\n\n      return res;\n    }\n  }, {\n    key: 'glyphsForString',\n    value: function glyphsForString(string) {\n      var glyphs = [];\n\n      for (var i = 0, end = string.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        var charCode = string.charCodeAt(i);\n        glyphs.push(this.characterToGlyph(charCode));\n      }\n\n      return glyphs;\n    }\n  }, {\n    key: 'characterToGlyph',\n    value: function characterToGlyph(character) {\n      return characters[WIN_ANSI_MAP[character] || character] || '.notdef';\n    }\n  }, {\n    key: 'widthOfGlyph',\n    value: function widthOfGlyph(glyph) {\n      return this.glyphWidths[glyph] || 0;\n    }\n  }, {\n    key: 'getKernPair',\n    value: function getKernPair(left, right) {\n      return this.kernPairs[left + '\\0' + right] || 0;\n    }\n  }, {\n    key: 'advancesForGlyphs',\n    value: function advancesForGlyphs(glyphs) {\n      var advances = [];\n\n      for (var index = 0; index < glyphs.length; index++) {\n        var left = glyphs[index];\n        var right = glyphs[index + 1];\n        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n      }\n\n      return advances;\n    }\n  }]);\n  return AFMFont;\n}();\n\nvar Courier = \"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=\";\n\nvar CourierBold = \"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\";\n\nvar CourierOblique = \"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=\";\n\nvar Helvetica = \"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\";\n\nvar HelveticaBold = \"=\";\n\nvar HelveticaOblique = \"\";\n\nvar TimesRoman = \"\";\n\nvar TimesBold = \"=\";\n\nvar TimesItalic = \"\";\n\nvar STANDARD_FONTS = {\n  Courier: LZString.decompressFromBase64(Courier),\n  'Courier-Bold': LZString.decompressFromBase64(CourierBold),\n  'Courier-Oblique': LZString.decompressFromBase64(CourierOblique),\n  Helvetica: LZString.decompressFromBase64(Helvetica),\n  'Helvetica-Bold': LZString.decompressFromBase64(HelveticaBold),\n  'Helvetica-Oblique': LZString.decompressFromBase64(HelveticaOblique),\n  'Times-Roman': LZString.decompressFromBase64(TimesRoman),\n  'Times-Bold': LZString.decompressFromBase64(TimesBold),\n  'Times-Italic': LZString.decompressFromBase64(TimesItalic)\n};\n\nvar createStandardFont = function createStandardFont(PDFFont) {\n  return function (_PDFFont) {\n    inherits(StandardFont, _PDFFont);\n\n    function StandardFont(document, name, id) {\n      classCallCheck(this, StandardFont);\n\n      var _this = possibleConstructorReturn(this, (StandardFont.__proto__ || Object.getPrototypeOf(StandardFont)).call(this));\n\n      _this.document = document;\n      _this.name = name;\n      _this.id = id;\n      _this.font = new AFMFont(STANDARD_FONTS[_this.name]);\n      _this.ascender = _this.font.ascender;\n      _this.descender = _this.font.descender;\n      _this.bbox = _this.font.bbox;\n      _this.lineGap = _this.font.lineGap;\n      return _this;\n    }\n\n    createClass(StandardFont, [{\n      key: 'embed',\n      value: function embed() {\n        this.dictionary.data = {\n          Type: 'Font',\n          BaseFont: this.name,\n          Subtype: 'Type1',\n          Encoding: 'WinAnsiEncoding'\n        };\n\n        return this.dictionary.end();\n      }\n    }, {\n      key: 'encode',\n      value: function encode(text) {\n        var encoded = this.font.encodeText(text);\n        var glyphs = this.font.glyphsForString('' + text);\n        var advances = this.font.advancesForGlyphs(glyphs);\n        var positions = [];\n\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          positions.push({\n            xAdvance: advances[i],\n            yAdvance: 0,\n            xOffset: 0,\n            yOffset: 0,\n            advanceWidth: this.font.widthOfGlyph(glyph)\n          });\n        }\n\n        return [encoded, positions];\n      }\n    }, {\n      key: 'encodeGlyphs',\n      value: function encodeGlyphs(glyphs) {\n        var res = [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(glyphs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var glyph = _step.value;\n\n            res.push(('00' + glyph.id.toString(16)).slice(-2));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return res;\n      }\n    }, {\n      key: 'widthOfString',\n      value: function widthOfString(string, size) {\n        var glyphs = this.font.glyphsForString('' + string);\n        var advances = this.font.advancesForGlyphs(glyphs);\n\n        var width = 0;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = Array.from(advances)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var advance = _step2.value;\n\n            width += advance;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var scale = size / 1000;\n        return width * scale;\n      }\n    }], [{\n      key: 'isStandardFont',\n      value: function isStandardFont(name) {\n        return name in STANDARD_FONTS;\n      }\n    }]);\n    return StandardFont;\n  }(PDFFont);\n};\n\nvar toHex = function toHex() {\n  for (var _len = arguments.length, codePoints = Array(_len), _key = 0; _key < _len; _key++) {\n    codePoints[_key] = arguments[_key];\n  }\n\n  var codes = Array.from(codePoints).map(function (code) {\n    return ('0000' + code.toString(16)).slice(-4);\n  });\n\n  return codes.join('');\n};\n\nvar createEmbeddedFont = function createEmbeddedFont(PDFFont) {\n  return function (_PDFFont) {\n    inherits(EmbeddedFont, _PDFFont);\n\n    function EmbeddedFont(document, font, id) {\n      classCallCheck(this, EmbeddedFont);\n\n      var _this = possibleConstructorReturn(this, (EmbeddedFont.__proto__ || Object.getPrototypeOf(EmbeddedFont)).call(this));\n\n      _this.document = document;\n      _this.font = font;\n      _this.id = id;\n      _this.subset = _this.font.createSubset();\n      _this.unicode = [[0]];\n      _this.widths = [_this.font.getGlyph(0).advanceWidth];\n\n      _this.name = _this.font.postscriptName;\n      _this.scale = 1000 / _this.font.unitsPerEm;\n      _this.ascender = _this.font.ascent * _this.scale;\n      _this.descender = _this.font.descent * _this.scale;\n      _this.xHeight = _this.font.xHeight * _this.scale;\n      _this.capHeight = _this.font.capHeight * _this.scale;\n      _this.lineGap = _this.font.lineGap * _this.scale;\n      _this.bbox = _this.font.bbox;\n\n      _this.layoutCache = Object.create(null);\n      return _this;\n    }\n\n    createClass(EmbeddedFont, [{\n      key: 'layoutRun',\n      value: function layoutRun(text, features) {\n        var run = this.font.layout(text, features);\n\n        // Normalize position values\n        for (var i = 0; i < run.positions.length; i++) {\n          var position = run.positions[i];\n          for (var key in position) {\n            position[key] *= this.scale;\n          }\n\n          position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n        }\n\n        return run;\n      }\n    }, {\n      key: 'layoutCached',\n      value: function layoutCached(text) {\n        var cached = void 0;\n        if (cached = this.layoutCache[text]) {\n          return cached;\n        }\n\n        var run = this.layoutRun(text);\n        this.layoutCache[text] = run;\n        return run;\n      }\n    }, {\n      key: 'layout',\n      value: function layout(text, features, onlyWidth) {\n        // Skip the cache if any user defined features are applied\n        if (onlyWidth == null) {\n          onlyWidth = false;\n        }\n        if (features) {\n          return this.layoutRun(text, features);\n        }\n\n        var glyphs = onlyWidth ? null : [];\n        var positions = onlyWidth ? null : [];\n        var advanceWidth = 0;\n\n        // Split the string by words to increase cache efficiency.\n        // For this purpose, spaces and tabs are a good enough delimeter.\n        var last = 0;\n        var index = 0;\n        while (index <= text.length) {\n          var needle;\n          if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\\t'].includes(needle))) {\n            var run = this.layoutCached(text.slice(last, ++index));\n            if (!onlyWidth) {\n              glyphs.push.apply(glyphs, toConsumableArray(Array.from(run.glyphs || [])));\n              positions.push.apply(positions, toConsumableArray(Array.from(run.positions || [])));\n            }\n\n            advanceWidth += run.advanceWidth;\n            last = index;\n          } else {\n            index++;\n          }\n        }\n\n        return { glyphs: glyphs, positions: positions, advanceWidth: advanceWidth };\n      }\n    }, {\n      key: 'encode',\n      value: function encode(text, features) {\n        var _layout = this.layout(text, features),\n            glyphs = _layout.glyphs,\n            positions = _layout.positions;\n\n        var res = [];\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var gid = this.subset.includeGlyph(glyph.id);\n          res.push(('0000' + gid.toString(16)).slice(-4));\n\n          if (this.widths[gid] == null) {\n            this.widths[gid] = glyph.advanceWidth * this.scale;\n          }\n          if (this.unicode[gid] == null) {\n            this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);\n          }\n        }\n\n        return [res, positions];\n      }\n    }, {\n      key: 'encodeGlyphs',\n      value: function encodeGlyphs(glyphs) {\n        var res = [];\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var gid = this.subset.includeGlyph(glyph.id);\n          res.push(('0000' + gid.toString(16)).slice(-4));\n\n          if (this.widths[gid] == null) {\n            this.widths[gid] = glyph.advanceWidth * this.scale;\n          }\n          if (this.unicode[gid] == null) {\n            this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);\n          }\n        }\n\n        return res;\n      }\n    }, {\n      key: 'widthOfString',\n      value: function widthOfString(string, size, features) {\n        var width = this.layout(string, features, true).advanceWidth;\n        var scale = size / 1000;\n        return width * scale;\n      }\n    }, {\n      key: 'embed',\n      value: function embed() {\n        var isCFF = this.subset.cff != null;\n        var fontFile = this.document.ref();\n\n        if (isCFF) {\n          fontFile.data.Subtype = 'CIDFontType0C';\n        }\n\n        this.subset.encodeStream().pipe(fontFile);\n\n        var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;\n        var flags = 0;\n        if (this.font.post.isFixedPitch) {\n          flags |= 1 << 0;\n        }\n        if (1 <= familyClass && familyClass <= 7) {\n          flags |= 1 << 1;\n        }\n        flags |= 1 << 2; // assume the font uses non-latin characters\n        if (familyClass === 10) {\n          flags |= 1 << 3;\n        }\n        if (this.font.head.macStyle.italic) {\n          flags |= 1 << 6;\n        }\n\n        // generate a random tag (6 uppercase letters. 65 is the char code for 'A')\n        var tag = [0, 1, 2, 3, 4, 5].map(function (i) {\n          return String.fromCharCode(Math.random() * 26 + 65);\n        }).join('');\n        var name = tag + '+' + this.font.postscriptName;\n\n        var bbox = this.font.bbox;\n\n        var descriptor = this.document.ref({\n          Type: 'FontDescriptor',\n          FontName: name,\n          Flags: flags,\n          FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],\n          ItalicAngle: this.font.italicAngle,\n          Ascent: this.ascender,\n          Descent: this.descender,\n          CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n          XHeight: (this.font.xHeight || 0) * this.scale,\n          StemV: 0\n        }); // not sure how to calculate this\n\n        if (isCFF) {\n          descriptor.data.FontFile3 = fontFile;\n        } else {\n          descriptor.data.FontFile2 = fontFile;\n        }\n\n        descriptor.end();\n\n        var descendantFont = this.document.ref({\n          Type: 'Font',\n          Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',\n          BaseFont: name,\n          CIDSystemInfo: {\n            Registry: new String('Adobe'),\n            Ordering: new String('Identity'),\n            Supplement: 0\n          },\n          FontDescriptor: descriptor,\n          W: [0, this.widths]\n        });\n\n        descendantFont.end();\n\n        this.dictionary.data = {\n          Type: 'Font',\n          Subtype: 'Type0',\n          BaseFont: name,\n          Encoding: 'Identity-H',\n          DescendantFonts: [descendantFont],\n          ToUnicode: this.toUnicodeCmap()\n        };\n\n        return this.dictionary.end();\n      }\n\n      // Maps the glyph ids encoded in the PDF back to unicode strings\n      // Because of ligature substitutions and the like, there may be one or more\n      // unicode characters represented by each glyph.\n\n    }, {\n      key: 'toUnicodeCmap',\n      value: function toUnicodeCmap() {\n        var cmap = this.document.ref();\n\n        var entries = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(this.unicode)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _codePoints = _step.value;\n\n            var encoded = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = Array.from(_codePoints)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var value = _step2.value;\n\n                if (value > 0xffff) {\n                  value -= 0x10000;\n                  encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n                  value = 0xdc00 | value & 0x3ff;\n                }\n\n                encoded.push(toHex(value));\n\n                entries.push('<' + encoded.join(' ') + '>');\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        cmap.end('  /CIDInit /ProcSet findresource begin\\n  12 dict begin\\n  begincmap\\n  /CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n  >> def\\n  /CMapName /Adobe-Identity-UCS def\\n  /CMapType 2 def\\n  1 begincodespacerange\\n  <0000><ffff>\\n  endcodespacerange\\n  1 beginbfrange\\n  <0000> <' + toHex(entries.length - 1) + '> [' + entries.join(' ') + ']\\n  endbfrange\\n  endcmap\\n  CMapName currentdict /CMap defineresource pop\\n  end\\n  end  ');\n\n        return cmap;\n      }\n    }]);\n    return EmbeddedFont;\n  }(PDFFont);\n};\n\nvar PDFFont = function () {\n  function PDFFont() {\n    classCallCheck(this, PDFFont);\n  }\n\n  createClass(PDFFont, [{\n    key: 'encode',\n    value: function encode(text) {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'widthOfString',\n    value: function widthOfString(text) {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'ref',\n    value: function ref() {\n      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      if (this.embedded || this.dictionary == null) {\n        return;\n      }\n\n      this.embed();\n      return this.embedded = true;\n    }\n  }, {\n    key: 'embed',\n    value: function embed() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: 'lineHeight',\n    value: function lineHeight(size, includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n      var gap = includeGap ? this.lineGap : 0;\n      return (this.ascender + gap - this.descender) / 1000 * size;\n    }\n  }], [{\n    key: 'open',\n    value: function open(document, src, family, id) {\n      var font = void 0;\n\n      if (typeof src === 'string') {\n        if (StandardFont.isStandardFont(src)) {\n          return new StandardFont(document, src, id);\n        }\n        font = fontkit.openSync(src, family);\n      } else if (Buffer.isBuffer(src)) {\n        font = fontkit.create(src, family);\n      } else if (src instanceof Uint8Array) {\n        font = fontkit.create(new Buffer(src), family);\n      } else if (src instanceof ArrayBuffer) {\n        font = fontkit.create(new Buffer(new Uint8Array(src)), family);\n      } else if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n        font = src;\n      }\n\n      if (font == null) {\n        throw new Error('Not a supported font format or standard PDF font.');\n      }\n\n      return new EmbeddedFont(document, font, id);\n    }\n  }]);\n  return PDFFont;\n}();\n\nvar StandardFont = createStandardFont(PDFFont);\nvar EmbeddedFont = createEmbeddedFont(PDFFont);\n\nvar Fonts = {\n  initFonts: function initFonts() {\n    // Lookup table for embedded fonts\n    this._fontFamilies = {};\n    this._fontCount = 0;\n\n    // Font state\n    this._fontSize = 12;\n    this._font = null;\n\n    this._registeredFonts = {};\n\n    // Set the default font\n    return this.font('Helvetica');\n  },\n  font: function font(src, family, size) {\n    var cacheKey = void 0,\n        font = void 0;\n    if (typeof family === 'number') {\n      size = family;\n      family = null;\n    }\n\n    // check registered fonts if src is a string\n    if (typeof src === 'string' && this._registeredFonts[src]) {\n      cacheKey = src;\n      var _registeredFonts$src = this._registeredFonts[src];\n      src = _registeredFonts$src.src;\n      family = _registeredFonts$src.family;\n    } else {\n      cacheKey = family || src;\n      if (typeof cacheKey !== 'string') {\n        cacheKey = null;\n      }\n    }\n\n    if (size != null) {\n      this.fontSize(size);\n    }\n\n    // fast path: check if the font is already in the PDF\n    if (font = this._fontFamilies[cacheKey]) {\n      this._font = font;\n      return this;\n    }\n\n    // load the font\n    var id = 'F' + ++this._fontCount;\n    this._font = PDFFont.open(this, src, family, id);\n\n    // check for existing font familes with the same name already in the PDF\n    // useful if the font was passed as a buffer\n    if (font = this._fontFamilies[this._font.name]) {\n      this._font = font;\n      return this;\n    }\n\n    // save the font for reuse later\n    if (cacheKey) {\n      this._fontFamilies[cacheKey] = this._font;\n    }\n\n    if (this._font.name) {\n      this._fontFamilies[this._font.name] = this._font;\n    }\n\n    return this;\n  },\n  fontSize: function fontSize(_fontSize) {\n    this._fontSize = _fontSize;\n    return this;\n  },\n  currentLineHeight: function currentLineHeight(includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n    return this._font.lineHeight(this._fontSize, includeGap);\n  },\n  registerFont: function registerFont(name, src, family) {\n    this._registeredFonts[name] = {\n      src: src,\n      family: family\n    };\n\n    return this;\n  }\n};\n\nvar Text = {\n  initText: function initText() {\n    // Current coordinates\n    this.x = 0;\n    this.y = 0;\n    return this._lineGap = 0;\n  },\n  text: function text(_text, x, y, options) {\n    options = this._initOptions(x, y, options);\n\n    // if the wordSpacing option is specified, remove multiple consecutive spaces\n    if (options.wordSpacing) {\n      _text = _text.replace(/\\s{2,}/g, ' ');\n    }\n\n    // render paragraphs as single lines\n    var lines = _text.split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n      this._line(lines[i], options);\n    }\n\n    return this;\n  },\n  _initOptions: function _initOptions() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var y = arguments[1];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {\n      options = x;\n      x = null;\n    }\n\n    // Update the current position\n    if (x) this.x = x;\n    if (y) this.y = y;\n\n    options.columns = options.columns || 0;\n    options.columnGap = options.columnGap || 18; // 1/4 inch\n\n    return options;\n  },\n  _line: function _line(text) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._fragment(text, this.x, this.y, options);\n  },\n  _fragment: function _fragment(text, x, y, options) {\n    text = ('' + text).replace(/\\n/g, '');\n\n    if (text.length === 0) return;\n\n    // add current font to page if necessary\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    }\n\n    // Glyph encoding and positioning\n\n    var _font$encode = this._font.encode(text, options.features),\n        _font$encode2 = slicedToArray(_font$encode, 2),\n        encoded = _font$encode2[0],\n        positions = _font$encode2[1];\n\n    // Pass down spacings to _glyphs method\n\n\n    options.wordSpacing = options.wordSpacing || 0;\n    options.characterSpacing = options.characterSpacing || 0;\n\n    // Adjust y to match coordinate flipping\n    y = this.page.height - y - this._font.ascender / 1000 * this._fontSize;\n\n    this._glyphs(encoded, positions, x, y, options);\n  },\n  _addGlyphs: function _addGlyphs(glyphs, positions, x, y, options) {\n    // add current font to page if necessary\n    if (options == null) {\n      options = {};\n    }\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    }\n\n    // Adjust y to match coordinate flipping\n    y = this.page.height - y;\n\n    var scale = 1000 / this._fontSize;\n    var unitsPerEm = this._font.font.unitsPerEm || 1000;\n    var advanceWidthScale = 1000 / unitsPerEm;\n\n    // Glyph encoding and positioning\n    var encodedGlyphs = this._font.encodeGlyphs(glyphs);\n    var encodedPositions = positions.map(function (pos, i) {\n      return {\n        xAdvance: pos.xAdvance * scale,\n        yAdvance: pos.yAdvance * scale,\n        xOffset: pos.xOffset,\n        yOffset: pos.yOffset,\n        advanceWidth: glyphs[i].advanceWidth * advanceWidthScale\n      };\n    });\n\n    return this._glyphs(encodedGlyphs, encodedPositions, x, y, options);\n  },\n  _glyphs: function _glyphs(encoded, positions, x, y, options) {\n    var _this = this;\n\n    // flip coordinate system\n    var i = void 0;\n    this.save();\n    this.transform(1, 0, 0, -1, 0, this.page.height);\n\n    // begin the text object\n    this.addContent('BT');\n\n    // text position\n    this.addContent('1 0 0 1 ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' Tm');\n\n    // font and font size\n    this.addContent('/' + this._font.id + ' ' + PDFObject.number(this._fontSize) + ' Tf');\n\n    // rendering mode\n    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n    if (mode) {\n      this.addContent(mode + ' Tr');\n    }\n\n    // Character spacing\n    if (options.characterSpacing) {\n      this.addContent(PDFObject.number(options.characterSpacing) + ' Tc');\n    }\n\n    var scale = this._fontSize / 1000;\n    var commands = [];\n    var last = 0;\n    var hadOffset = false;\n\n    // Adds a segment of text to the TJ command buffer\n    var addSegment = function addSegment(cur) {\n      if (last < cur) {\n        var hex = encoded.slice(last, cur).join('');\n        var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n        commands.push('<' + hex + '> ' + PDFObject.number(-advance));\n      }\n\n      return last = cur;\n    };\n\n    // Flushes the current TJ commands to the output stream\n    var flush = function flush(i) {\n      addSegment(i);\n\n      if (commands.length > 0) {\n        _this.addContent('[' + commands.join(' ') + '] TJ');\n        return commands.length = 0;\n      }\n    };\n\n    for (i = 0; i < positions.length; i++) {\n      // If we have an x or y offset, we have to break out of the current TJ command\n      // so we can move the text position.\n      var pos = positions[i];\n      if (pos.xOffset || pos.yOffset) {\n        // Flush the current buffer\n        flush(i);\n\n        // Move the text position and flush just the current character\n        this.addContent('1 0 0 1 ' + PDFObject.number(x + pos.xOffset * scale) + ' ' + PDFObject.number(y + pos.yOffset * scale) + ' Tm');\n        flush(i + 1);\n\n        hadOffset = true;\n      } else {\n        // If the last character had an offset, reset the text position\n        if (hadOffset) {\n          this.addContent('1 0 0 1 ' + PDFObject.number(x) + ' ' + PDFObject.number(y) + ' Tm');\n          hadOffset = false;\n        }\n\n        // Group segments that don't have any advance adjustments\n        if (pos.xAdvance - pos.advanceWidth !== 0) {\n          addSegment(i + 1);\n        }\n      }\n\n      x += pos.xAdvance * scale;\n    }\n\n    // Flush any remaining commands\n    flush(i);\n\n    // end the text object\n    this.addContent('ET');\n\n    // restore flipped coordinate system\n    return this.restore();\n  }\n};\n\nvar Data = function () {\n  function Data() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, Data);\n\n    this.pos = 0;\n    this.data = data;\n    this.length = this.data.length;\n  }\n\n  createClass(Data, [{\n    key: 'readByte',\n    value: function readByte() {\n      return this.data[this.pos++];\n    }\n  }, {\n    key: 'writeByte',\n    value: function writeByte(byte) {\n      return this.data[this.pos++] = byte;\n    }\n  }, {\n    key: 'byteAt',\n    value: function byteAt(index) {\n      return this.data[index];\n    }\n  }, {\n    key: 'readBool',\n    value: function readBool() {\n      return !!this.readByte();\n    }\n  }, {\n    key: 'writeBool',\n    value: function writeBool(val) {\n      return this.writeByte(val ? 1 : 0);\n    }\n  }, {\n    key: 'readUInt32',\n    value: function readUInt32() {\n      var b1 = this.readByte() * 0x1000000;\n      var b2 = this.readByte() << 16;\n      var b3 = this.readByte() << 8;\n      var b4 = this.readByte();\n      return b1 + b2 + b3 + b4;\n    }\n  }, {\n    key: 'writeUInt32',\n    value: function writeUInt32(val) {\n      this.writeByte(val >>> 24 & 0xff);\n      this.writeByte(val >> 16 & 0xff);\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    }\n  }, {\n    key: 'readInt32',\n    value: function readInt32() {\n      var int = this.readUInt32();\n\n      if (int >= 0x80000000) {\n        return int - 0x100000000;\n      }\n\n      return int;\n    }\n  }, {\n    key: 'writeInt32',\n    value: function writeInt32(val) {\n      if (val < 0) {\n        val += 0x100000000;\n      }\n      return this.writeUInt32(val);\n    }\n  }, {\n    key: 'readUInt16',\n    value: function readUInt16() {\n      var b1 = this.readByte() << 8;\n      var b2 = this.readByte();\n      return b1 | b2;\n    }\n  }, {\n    key: 'writeUInt16',\n    value: function writeUInt16(val) {\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    }\n  }, {\n    key: 'readInt16',\n    value: function readInt16() {\n      var int = this.readUInt16();\n      if (int >= 0x8000) {\n        return int - 0x10000;\n      }\n      return int;\n    }\n  }, {\n    key: 'writeInt16',\n    value: function writeInt16(val) {\n      if (val < 0) {\n        val += 0x10000;\n      }\n      return this.writeUInt16(val);\n    }\n  }, {\n    key: 'readString',\n    value: function readString(length) {\n      var ret = [];\n      for (var i = 0, end = length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        ret[i] = String.fromCharCode(this.readByte());\n      }\n\n      return ret.join('');\n    }\n  }, {\n    key: 'writeString',\n    value: function writeString(val) {\n      var _this = this;\n\n      return range(0, val.length, false).map(function (i) {\n        return _this.writeByte(val.charCodeAt(i));\n      });\n    }\n  }, {\n    key: 'stringAt',\n    value: function stringAt(pos, length) {\n      this.pos = pos;\n      return this.readString(length);\n    }\n  }, {\n    key: 'readShort',\n    value: function readShort() {\n      return this.readInt16();\n    }\n  }, {\n    key: 'writeShort',\n    value: function writeShort(val) {\n      return this.writeInt16(val);\n    }\n  }, {\n    key: 'readLongLong',\n    value: function readLongLong() {\n      var b1 = this.readByte();\n      var b2 = this.readByte();\n      var b3 = this.readByte();\n      var b4 = this.readByte();\n      var b5 = this.readByte();\n      var b6 = this.readByte();\n      var b7 = this.readByte();\n      var b8 = this.readByte();\n\n      if (b1 & 0x80) {\n        // sign -> avoid overflow\n        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;\n      }\n\n      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;\n    }\n  }, {\n    key: 'writeLongLong',\n    value: function writeLongLong(val) {\n      var high = Math.floor(val / 0x100000000);\n      var low = val & 0xffffffff;\n      this.writeByte(high >> 24 & 0xff);\n      this.writeByte(high >> 16 & 0xff);\n      this.writeByte(high >> 8 & 0xff);\n      this.writeByte(high & 0xff);\n      this.writeByte(low >> 24 & 0xff);\n      this.writeByte(low >> 16 & 0xff);\n      this.writeByte(low >> 8 & 0xff);\n      return this.writeByte(low & 0xff);\n    }\n  }, {\n    key: 'readInt',\n    value: function readInt() {\n      return this.readInt32();\n    }\n  }, {\n    key: 'writeInt',\n    value: function writeInt(val) {\n      return this.writeInt32(val);\n    }\n  }, {\n    key: 'slice',\n    value: function slice(start, end) {\n      return this.data.slice(start, end);\n    }\n  }, {\n    key: 'read',\n    value: function read(bytes) {\n      var buf = [];\n      for (var i = 0, end = bytes, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        buf.push(this.readByte());\n      }\n\n      return buf;\n    }\n  }, {\n    key: 'write',\n    value: function write(bytes) {\n      var _this2 = this;\n\n      return Array.from(bytes).map(function (byte) {\n        return _this2.writeByte(byte);\n      });\n    }\n  }]);\n  return Data;\n}();\n\nvar MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\n\nvar JPEG = function () {\n  function JPEG(data, label) {\n    classCallCheck(this, JPEG);\n\n    var marker = void 0;\n    this.data = data;\n    this.label = label;\n\n    if (this.data.readUInt16BE(0) !== 0xffd8) {\n      throw 'SOI not found in JPEG';\n    }\n\n    var pos = 2;\n    while (pos < this.data.length) {\n      marker = this.data.readUInt16BE(pos);\n      pos += 2;\n      if (Array.from(MARKERS).includes(marker)) {\n        break;\n      }\n      pos += this.data.readUInt16BE(pos);\n    }\n\n    if (!Array.from(MARKERS).includes(marker)) {\n      throw 'Invalid JPEG.';\n    }\n    pos += 2;\n\n    this.bits = this.data[pos++];\n    this.height = this.data.readUInt16BE(pos);\n    pos += 2;\n\n    this.width = this.data.readUInt16BE(pos);\n    pos += 2;\n\n    var channels = this.data[pos++];\n    this.colorSpace = function () {\n      switch (channels) {\n        case 1:\n          return 'DeviceGray';\n        case 3:\n          return 'DeviceRGB';\n        case 4:\n          return 'DeviceCMYK';\n      }\n    }();\n\n    this.obj = null;\n  }\n\n  createClass(JPEG, [{\n    key: 'embed',\n    value: function embed(document) {\n      if (this.obj) {\n        return;\n      }\n\n      this.obj = document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.bits,\n        Width: this.width,\n        Height: this.height,\n        ColorSpace: this.colorSpace,\n        Filter: 'DCTDecode'\n      });\n\n      // add extra decode params for CMYK images. By swapping the\n      // min and max values from the default, we invert the colors. See\n      // section 4.8.4 of the spec.\n      if (this.colorSpace === 'DeviceCMYK') {\n        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];\n      }\n\n      this.obj.end(this.data);\n\n      // free memory\n      return this.data = null;\n    }\n  }]);\n  return JPEG;\n}();\n\nvar PNGImage = function () {\n  function PNGImage(data, label) {\n    classCallCheck(this, PNGImage);\n\n    this.label = label;\n    this.image = new PNG(data);\n    this.width = this.image.width;\n    this.height = this.image.height;\n    this.imgData = this.image.imgData;\n    this.obj = null;\n  }\n\n  createClass(PNGImage, [{\n    key: 'embed',\n    value: function embed(document) {\n      this.document = document;\n      if (this.obj) {\n        return;\n      }\n\n      this.obj = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.image.bits,\n        Width: this.width,\n        Height: this.height,\n        Filter: 'FlateDecode'\n      });\n\n      if (!this.image.hasAlphaChannel) {\n        var params = this.document.ref({\n          Predictor: 15,\n          Colors: this.image.colors,\n          BitsPerComponent: this.image.bits,\n          Columns: this.width\n        });\n\n        this.obj.data['DecodeParms'] = params;\n        params.end();\n      }\n\n      if (this.image.palette.length === 0) {\n        this.obj.data['ColorSpace'] = this.image.colorSpace;\n      } else {\n        // embed the color palette in the PDF as an object stream\n        var palette = this.document.ref();\n        palette.end(new Buffer(this.image.palette));\n\n        // build the color space array for the image\n        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];\n      }\n\n      // For PNG color types 0, 2 and 3, the transparency data is stored in\n      // a dedicated PNG chunk.\n      if (this.image.transparency.grayscale) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var val = this.image.transparency.greyscale;\n        return this.obj.data['Mask'] = [val, val];\n      } else if (this.image.transparency.rgb) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var rgb = this.image.transparency.rgb;\n\n        var mask = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(rgb)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var x = _step.value;\n\n            mask.push(x, x);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return this.obj.data['Mask'] = mask;\n      } else if (this.image.transparency.indexed) {\n        // Create a transparency SMask for the image based on the data\n        // in the PLTE and tRNS sections. See below for details on SMasks.\n        return this.loadIndexedAlphaChannel();\n      } else if (this.image.hasAlphaChannel) {\n        // For PNG color types 4 and 6, the transparency data is stored as a alpha\n        // channel mixed in with the main image data. Separate this data out into an\n        // SMask object and store it separately in the PDF.\n        return this.splitAlphaChannel();\n      } else {\n        return this.finalize();\n      }\n    }\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      if (this.alphaChannel) {\n        var sMask = this.document.ref({\n          Type: 'XObject',\n          Subtype: 'Image',\n          Height: this.height,\n          Width: this.width,\n          BitsPerComponent: 8,\n          Filter: 'FlateDecode',\n          ColorSpace: 'DeviceGray',\n          Decode: [0, 1]\n        });\n\n        sMask.end(this.alphaChannel);\n        this.obj.data['SMask'] = sMask;\n      }\n\n      // add the actual image data\n      this.obj.end(this.imgData);\n\n      // free memory\n      this.image = null;\n      return this.imgData = null;\n    }\n  }, {\n    key: 'splitAlphaChannel',\n    value: function splitAlphaChannel() {\n      var _this = this;\n\n      return this.image.decodePixels(function (pixels) {\n        var a = void 0,\n            p = void 0;\n        var colorByteSize = _this.image.colors * _this.image.bits / 8;\n        var pixelCount = _this.width * _this.height;\n        var imgData = new Buffer(pixelCount * colorByteSize);\n        var alphaChannel = new Buffer(pixelCount);\n\n        var i = p = a = 0;\n        var len = pixels.length;\n        while (i < len) {\n          imgData[p++] = pixels[i++];\n          imgData[p++] = pixels[i++];\n          imgData[p++] = pixels[i++];\n          alphaChannel[a++] = pixels[i++];\n        }\n\n        var done = 0;\n        zlib.deflate(imgData, function (err, imgData1) {\n          _this.imgData = imgData1;\n          if (err) {\n            throw err;\n          }\n          if (++done === 2) {\n            return _this.finalize();\n          }\n        });\n\n        return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n          _this.alphaChannel = alphaChannel1;\n          if (err) {\n            throw err;\n          }\n          if (++done === 2) {\n            return _this.finalize();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'loadIndexedAlphaChannel',\n    value: function loadIndexedAlphaChannel(fn) {\n      var _this2 = this;\n\n      var transparency = this.image.transparency.indexed;\n      return this.image.decodePixels(function (pixels) {\n        var alphaChannel = new Buffer(_this2.width * _this2.height);\n\n        var i = 0;\n        for (var j = 0, end = pixels.length; j < end; j++) {\n          alphaChannel[i++] = transparency[pixels[j]];\n        }\n\n        return zlib.deflate(alphaChannel, function (err, alphaChannel1) {\n          _this2.alphaChannel = alphaChannel1;\n          if (err) {\n            throw err;\n          }\n          return _this2.finalize();\n        });\n      });\n    }\n  }]);\n  return PNGImage;\n}();\n\nvar PDFImage = function () {\n  function PDFImage() {\n    classCallCheck(this, PDFImage);\n  }\n\n  createClass(PDFImage, null, [{\n    key: 'open',\n    value: function open(src, label) {\n      var data = void 0;\n      if (Buffer.isBuffer(src)) {\n        data = src;\n      } else if (src instanceof ArrayBuffer) {\n        data = new Buffer(new Uint8Array(src));\n      } else {\n        var match = /^data:.+;base64,(.*)$/.exec(src);\n        if (match) {\n          data = new Buffer(match[1], 'base64');\n        } else {}\n      }\n\n      if (data[0] === 0xff && data[1] === 0xd8) {\n        return new JPEG(data, label);\n      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {\n        return new PNGImage(data, label);\n      } else {\n        throw new Error('Unknown image format.');\n      }\n    }\n  }]);\n  return PDFImage;\n}();\n\nvar Images = {\n  initImages: function initImages() {\n    this._imageRegistry = {};\n    return this._imageCount = 0;\n  },\n  image: function image(src, x, y, options) {\n    var bh = void 0,\n        bp = void 0,\n        bw = void 0,\n        image = void 0,\n        ip = void 0,\n        left = void 0,\n        left1 = void 0;\n    if (options == null) {\n      options = {};\n    }\n    if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {\n      options = x;\n      x = null;\n    }\n\n    x = (left = x != null ? x : options.x) != null ? left : this.x;\n    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n\n    if (!image) {\n      if (src.width && src.height) {\n        image = src;\n      } else {\n        image = this.openImage(src);\n      }\n    }\n\n    if (!image.obj) {\n      image.embed(this);\n    }\n\n    if (this.page.xobjects[image.label] == null) {\n      this.page.xobjects[image.label] = image.obj;\n    }\n\n    var w = options.width || image.width;\n    var h = options.height || image.height;\n\n    if (options.width && !options.height) {\n      var wp = w / image.width;\n      w = image.width * wp;\n      h = image.height * wp;\n    } else if (options.height && !options.width) {\n      var hp = h / image.height;\n      w = image.width * hp;\n      h = image.height * hp;\n    } else if (options.scale) {\n      w = image.width * options.scale;\n      h = image.height * options.scale;\n    } else if (options.fit) {\n      var _Array$from = Array.from(options.fit);\n\n      var _Array$from2 = slicedToArray(_Array$from, 2);\n\n      bw = _Array$from2[0];\n      bh = _Array$from2[1];\n\n      bp = bw / bh;\n      ip = image.width / image.height;\n      if (ip > bp) {\n        w = bw;\n        h = bw / ip;\n      } else {\n        h = bh;\n        w = bh * ip;\n      }\n    } else if (options.cover) {\n      var _Array$from3 = Array.from(options.cover);\n\n      var _Array$from4 = slicedToArray(_Array$from3, 2);\n\n      bw = _Array$from4[0];\n      bh = _Array$from4[1];\n\n      bp = bw / bh;\n      ip = image.width / image.height;\n      if (ip > bp) {\n        h = bh;\n        w = bh * ip;\n      } else {\n        w = bw;\n        h = bw / ip;\n      }\n    }\n\n    if (options.fit || options.cover) {\n      if (options.align === 'center') {\n        x = x + bw / 2 - w / 2;\n      } else if (options.align === 'right') {\n        x = x + bw - w;\n      }\n\n      if (options.valign === 'center') {\n        y = y + bh / 2 - h / 2;\n      } else if (options.valign === 'bottom') {\n        y = y + bh - h;\n      }\n    }\n\n    // create link annotations if the link option is given\n    if (options.link != null) {\n      this.link(x, y, w, h, options.link);\n    }\n    if (options.goTo != null) {\n      this.goTo(x, y, w, h, options.goTo);\n    }\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    }\n\n    // Set the current y position to below the image if it is in the document flow\n    if (this.y === y) {\n      this.y += h;\n    }\n\n    this.save();\n    this.transform(w, 0, 0, -h, x, y + h);\n    this.addContent('/' + image.label + ' Do');\n    this.restore();\n\n    return this;\n  },\n  openImage: function openImage(src) {\n    var image = void 0;\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n\n    if (!image) {\n      image = PDFImage.open(src, 'I' + ++this._imageCount);\n      if (typeof src === 'string') {\n        this._imageRegistry[src] = image;\n      }\n    }\n\n    return image;\n  }\n};\n\nvar Annotations = {\n  annotate: function annotate(x, y, w, h, options) {\n    options.Type = 'Annot';\n    options.Rect = this._convertRect(x, y, w, h);\n    options.Border = [0, 0, 0];\n    if (options.Subtype !== 'Link') {\n      if (options.C == null) {\n        options.C = this._normalizeColor(options.color || [0, 0, 0]);\n      }\n    } // convert colors\n    delete options.color;\n\n    if (typeof options.Dest === 'string') {\n      options.Dest = new String(options.Dest);\n    }\n\n    // Capitalize keys\n    for (var key in options) {\n      var val = options[key];\n      options[key[0].toUpperCase() + key.slice(1)] = val;\n    }\n\n    var ref = this.ref(options);\n    this.page.annotations.push(ref);\n    ref.end();\n    return this;\n  },\n  note: function note(x, y, w, h, contents, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Text';\n    options.Contents = new String(contents);\n    options.Name = 'Comment';\n    if (options.color == null) {\n      options.color = [243, 223, 92];\n    }\n    return this.annotate(x, y, w, h, options);\n  },\n  goTo: function goTo(x, y, w, h, name, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Link';\n    options.A = this.ref({\n      S: 'GoTo',\n      D: new String(name)\n    });\n    options.A.end();\n    return this.annotate(x, y, w, h, options);\n  },\n  link: function link(x, y, w, h, url, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Link';\n\n    if (typeof url === 'number') {\n      // Link to a page in the document (the page must already exist)\n      var pages = this._root.data.Pages.data;\n      if (url >= 0 && url < pages.Kids.length) {\n        options.A = this.ref({\n          S: 'GoTo',\n          D: [pages.Kids[url], 'XYZ', null, null, null]\n        });\n        options.A.end();\n      } else {\n        throw new Error('The document has no page ' + url);\n      }\n    } else {\n      // Link to an external url\n      options.A = this.ref({\n        S: 'URI',\n        URI: new String(url)\n      });\n      options.A.end();\n    }\n\n    return this.annotate(x, y, w, h, options);\n  },\n  _markup: function _markup(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    var _Array$from = Array.from(this._convertRect(x, y, w, h)),\n        _Array$from2 = slicedToArray(_Array$from, 4),\n        x1 = _Array$from2[0],\n        y1 = _Array$from2[1],\n        x2 = _Array$from2[2],\n        y2 = _Array$from2[3];\n\n    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  highlight: function highlight(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Highlight';\n    if (options.color == null) {\n      options.color = [241, 238, 148];\n    }\n    return this._markup(x, y, w, h, options);\n  },\n  underline: function underline(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Underline';\n    return this._markup(x, y, w, h, options);\n  },\n  strike: function strike(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'StrikeOut';\n    return this._markup(x, y, w, h, options);\n  },\n  lineAnnotation: function lineAnnotation(x1, y1, x2, y2, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Line';\n    options.Contents = new String();\n    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];\n    return this.annotate(x1, y1, x2, y2, options);\n  },\n  rectAnnotation: function rectAnnotation(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Square';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  ellipseAnnotation: function ellipseAnnotation(x, y, w, h, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'Circle';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  textAnnotation: function textAnnotation(x, y, w, h, text, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.Subtype = 'FreeText';\n    options.Contents = new String(text);\n    options.DA = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  _convertRect: function _convertRect(x1, y1, w, h) {\n    // flip y1 and y2\n    var y2 = y1;\n    y1 += h;\n\n    // make x2\n    var x2 = x1 + w;\n\n    // apply current transformation matrix to points\n\n    var _Array$from3 = Array.from(this._ctm),\n        _Array$from4 = slicedToArray(_Array$from3, 6),\n        m0 = _Array$from4[0],\n        m1 = _Array$from4[1],\n        m2 = _Array$from4[2],\n        m3 = _Array$from4[3],\n        m4 = _Array$from4[4],\n        m5 = _Array$from4[5];\n\n    x1 = m0 * x1 + m2 * y1 + m4;\n    y1 = m1 * x1 + m3 * y1 + m5;\n    x2 = m0 * x2 + m2 * y2 + m4;\n    y2 = m1 * x2 + m3 * y2 + m5;\n\n    return [x1, y1, x2, y2];\n  }\n};\n\nvar PDFDocument$1 = function (_stream$Readable) {\n  inherits(PDFDocument, _stream$Readable);\n\n  function PDFDocument() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, PDFDocument);\n\n    var _this = possibleConstructorReturn(this, (PDFDocument.__proto__ || Object.getPrototypeOf(PDFDocument)).call(this));\n\n    _this.options = options;\n    _this.version = 1.3;\n    _this.compress = true;\n    _this._pageBuffer = [];\n    _this._pageBufferStart = 0;\n\n    // The PDF object store\n    _this._offsets = [];\n    _this._waiting = 0;\n    _this._ended = false;\n    _this._offset = 0;\n\n    var Names = _this.ref({\n      Dests: new PDFNameTree()\n    });\n\n    _this._root = _this.ref({\n      Type: 'Catalog',\n      Pages: _this.ref({\n        Type: 'Pages',\n        Count: 0,\n        Kids: []\n      }),\n      Names: Names\n    });\n\n    // The current page\n    _this.page = null;\n\n    // Initialize mixins\n    _this.initColor();\n    _this.initVector();\n    _this.initFonts();\n    _this.initText();\n    _this.initImages();\n\n    // Initialize the metadata\n    _this.info = {\n      Producer: 'PDFKit',\n      Creator: 'PDFKit',\n      CreationDate: new Date()\n    };\n\n    if (_this.options.info) {\n      for (var key in _this.options.info) {\n        var val = _this.options.info[key];\n        _this.info[key] = val;\n      }\n    }\n\n    // Write the header PDF version\n    _this._write('%PDF-' + _this.version);\n\n    // 4 binary chars, as recommended by the spec\n    _this._write('%\\xFF\\xFF\\xFF\\xFF');\n\n    // Add the first page\n    if (_this.options.autoFirstPage !== false) {\n      _this.addPage();\n    }\n    return _this;\n  }\n\n  createClass(PDFDocument, [{\n    key: 'addPage',\n    value: function addPage(options) {\n      // end the current page if needed\n      if (options == null) {\n        options = this.options;\n      }\n\n      if (!this.options.bufferPages) {\n        this.flushPages();\n      }\n\n      // create a page object\n      this.page = new PDFPage(this, options);\n      this._pageBuffer.push(this.page);\n\n      // add the page to the object store\n      var pages = this._root.data.Pages.data;\n      pages.Kids.push(this.page.dictionary);\n      pages.Count++;\n\n      // flip PDF coordinate system so that the origin is in\n      // the top left rather than the bottom left\n      this._ctm = [1, 0, 0, 1, 0, 0];\n      this.transform(1, 0, 0, -1, 0, this.page.height);\n\n      return this;\n    }\n  }, {\n    key: 'flushPages',\n    value: function flushPages() {\n      // this local variable exists so we're future-proof against\n      // reentrant calls to flushPages.\n      var pages = this._pageBuffer;\n      this._pageBuffer = [];\n      this._pageBufferStart += pages.length;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Array.from(pages)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var page = _step.value;\n\n          page.end();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addNamedDestination',\n    value: function addNamedDestination(name) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length === 0) {\n        args = ['XYZ', null, null, null];\n      }\n      if (args[0] === 'XYZ' && args[2] !== null) {\n        args[2] = this.page.height - args[2];\n      }\n      args.unshift(this.page.dictionary);\n      this._root.data.Names.data.Dests.add(name, args);\n    }\n  }, {\n    key: 'ref',\n    value: function ref(data) {\n      var ref = new PDFReference(this, this._offsets.length + 1, data);\n      this._offsets.push(null); // placeholder for this object's offset once it is finalized\n      this._waiting++;\n      return ref;\n    }\n  }, {\n    key: '_read',\n    value: function _read() {\n      // do nothing, but this method is required by node\n    }\n  }, {\n    key: '_write',\n    value: function _write(data) {\n      if (!Buffer.isBuffer(data)) {\n        data = new Buffer(data + '\\n', 'binary');\n      }\n\n      this.push(data);\n      return this._offset += data.length;\n    }\n  }, {\n    key: 'addContent',\n    value: function addContent(data) {\n      this.page.write(data);\n      return this;\n    }\n  }, {\n    key: '_refEnd',\n    value: function _refEnd(ref) {\n      this._offsets[ref.id - 1] = ref.offset;\n      if (--this._waiting === 0 && this._ended) {\n        this._finalize();\n        return this._ended = false;\n      }\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.flushPages();\n      this._info = this.ref();\n      for (var key in this.info) {\n        var val = this.info[key];\n        if (typeof val === 'string') {\n          val = new String(val);\n        }\n\n        this._info.data[key] = val;\n      }\n\n      this._info.end();\n\n      for (var name in this._fontFamilies) {\n        var font = this._fontFamilies[name];\n        font.finalize();\n      }\n\n      this._root.end();\n      this._root.data.Pages.end();\n      this._root.data.Names.end();\n\n      if (this._waiting === 0) {\n        return this._finalize();\n      } else {\n        return this._ended = true;\n      }\n    }\n  }, {\n    key: '_finalize',\n    value: function _finalize(fn) {\n      // generate xref\n      var xRefOffset = this._offset;\n      this._write('xref');\n      this._write('0 ' + (this._offsets.length + 1));\n      this._write('0000000000 65535 f ');\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Array.from(this._offsets)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var offset = _step2.value;\n\n          offset = ('0000000000' + offset).slice(-10);\n          this._write(offset + ' 00000 n ');\n        }\n\n        // trailer\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this._write('trailer');\n      this._write(PDFObject.convert({\n        Size: this._offsets.length + 1,\n        Root: this._root,\n        Info: this._info\n      }));\n\n      this._write('startxref');\n      this._write('' + xRefOffset);\n      this._write('%%EOF');\n\n      // end the stream\n      return this.push(null);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[object PDFDocument]';\n    }\n  }]);\n  return PDFDocument;\n}(stream.Readable);\n\nvar mixin = function mixin(methods) {\n  return function () {\n    var result = [];\n    for (var name in methods) {\n      var method = methods[name];\n      result.push(PDFDocument$1.prototype[name] = method);\n    }\n    return result;\n  }();\n};\n\n// Load mixins\nmixin(Color);\nmixin(Vector);\nmixin(Fonts);\nmixin(Text);\nmixin(Images);\nmixin(Annotations);\n\nexport { PDFFont, StandardFont, EmbeddedFont };\nexport default PDFDocument$1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}