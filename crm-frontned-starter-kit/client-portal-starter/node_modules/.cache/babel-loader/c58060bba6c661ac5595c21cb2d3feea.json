{"ast":null,"code":"import{takeEvery,fork,put,all,call}from\"redux-saga/effects\";import{FETCH_BANK_ACCOUNTS_START}from\"./actionTypes\";import{fetchBankAccountsAPI// updateBankAccount \n}from\"../../../apis/bankAccounts\";import{fetchBankAccountsFailed,fetchBankAccountsSuccess}from\"./actions\";function*fetchbankAccounts(params){try{const result=yield call(fetchBankAccountsAPI,params);yield put(fetchBankAccountsSuccess(result));}catch(error){yield put(fetchBankAccountsFailed(error));}}// function * editBankAccount({ payload }){\n//   try {\n//     yield call(updateBankAccount, payload); \n//     const { body, id } = payload;\n//     yield put(showSuccessNotification({\n//       _id:id, \n//       ...body\n//     })); \n//   } catch (error){\n//     yield put(showErrorNotification(error));\n//     // yield delay(2000);\n//     // yield put(apiError(\"\"));\n//   }\n// }\nfunction*WatchbankAccounts(){yield takeEvery(FETCH_BANK_ACCOUNTS_START,fetchbankAccounts);}function*bankAccountsSaga(){yield all([fork(WatchbankAccounts)]);}export default bankAccountsSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","FETCH_BANK_ACCOUNTS_START","fetchBankAccountsAPI","fetchBankAccountsFailed","fetchBankAccountsSuccess","fetchbankAccounts","params","result","error","WatchbankAccounts","bankAccountsSaga"],"sources":["/home/ubuntu/king/portal/client-portal-starter/src/store/crypto/bankAccount/saga.js"],"sourcesContent":["import {\n  takeEvery,\n  fork,\n  put,\n  all,\n  call\n} from \"redux-saga/effects\";\nimport { FETCH_BANK_ACCOUNTS_START } from \"./actionTypes\";\nimport {\n  fetchBankAccountsAPI,\n  // updateBankAccount \n} from \"../../../apis/bankAccounts\";\nimport {\n  fetchBankAccountsFailed,\n  fetchBankAccountsSuccess\n} from \"./actions\";\n\nfunction* fetchbankAccounts(params) {\n  try {\n    const result = yield call(fetchBankAccountsAPI, params);\n    yield put(fetchBankAccountsSuccess(result));\n  } catch (error) {\n    yield put(fetchBankAccountsFailed(error));\n  }\n}\n\n\n// function * editBankAccount({ payload }){\n//   try {\n//     yield call(updateBankAccount, payload); \n//     const { body, id } = payload;\n//     yield put(showSuccessNotification({\n//       _id:id, \n//       ...body\n//     })); \n//   } catch (error){\n\n//     yield put(showErrorNotification(error));\n//     // yield delay(2000);\n//     // yield put(apiError(\"\"));\n//   }\n// }\n\nfunction* WatchbankAccounts() {\n  yield takeEvery(FETCH_BANK_ACCOUNTS_START, fetchbankAccounts);\n}\nfunction* bankAccountsSaga() {\n  yield all([fork(WatchbankAccounts)]);\n}\n\nexport default bankAccountsSaga;\n"],"mappings":"AAAA,OACEA,SAAS,CACTC,IAAI,CACJC,GAAG,CACHC,GAAG,CACHC,IAAI,KACC,oBAAoB,CAC3B,OAASC,yBAAyB,KAAQ,eAAe,CACzD,OACEC,oBACA;AAAA,KACK,4BAA4B,CACnC,OACEC,uBAAuB,CACvBC,wBAAwB,KACnB,WAAW,CAElB,SAAUC,iBAAiBA,CAACC,MAAM,CAAE,CAClC,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,IAAI,CAACE,oBAAoB,CAAEI,MAAM,CAAC,CACvD,KAAM,CAAAR,GAAG,CAACM,wBAAwB,CAACG,MAAM,CAAC,CAAC,CAC7C,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAV,GAAG,CAACK,uBAAuB,CAACK,KAAK,CAAC,CAAC,CAC3C,CACF,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,SAAUC,iBAAiBA,CAAA,CAAG,CAC5B,KAAM,CAAAb,SAAS,CAACK,yBAAyB,CAAEI,iBAAiB,CAAC,CAC/D,CACA,SAAUK,gBAAgBA,CAAA,CAAG,CAC3B,KAAM,CAAAX,GAAG,CAAC,CAACF,IAAI,CAACY,iBAAiB,CAAC,CAAC,CAAC,CACtC,CAEA,cAAe,CAAAC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}