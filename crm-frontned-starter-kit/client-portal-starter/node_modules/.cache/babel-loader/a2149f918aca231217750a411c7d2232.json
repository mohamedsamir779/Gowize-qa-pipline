{"ast":null,"code":"import r from 'restructure';\nimport { PropertyDescriptor, resolveLength } from 'restructure/src/utils';\nimport isEqual from 'deep-equal';\nimport unicode from '@react-pdf/unicode-properties';\nimport UnicodeTrie from 'unicode-trie';\nimport StateMachine from 'dfa';\nimport cloneDeep from 'clone';\nimport inflate from 'tiny-inflate';\nvar fs = {};\nvar fontkit$1 = {};\nfontkit$1.logErrors = false;\nvar formats = [];\nfontkit$1.registerFormat = function (format) {\n  formats.push(format);\n};\nfontkit$1.openSync = function (filename, postscriptName) {\n  {\n    throw new Error('fontkit.openSync unavailable for browser build');\n  }\n  var buffer = fs.readFileSync(filename);\n  return fontkit$1.create(buffer, postscriptName);\n};\nfontkit$1.open = function (filename, postscriptName, callback) {\n  {\n    throw new Error('fontkit.open unavailable for browser build');\n  }\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n  fs.readFile(filename, function (err, buffer) {\n    if (err) {\n      return callback(err);\n    }\n    try {\n      var font = fontkit$1.create(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n    return callback(null, font);\n  });\n  return;\n};\nfontkit$1.create = function (buffer, postscriptName) {\n  for (var i = 0; i < formats.length; i++) {\n    var format = formats[i];\n    if (format.probe(buffer)) {\n      var font = new format(new r.DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n      return font;\n    }\n  }\n  throw new Error('Unknown font format');\n};\n\n/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nfunction cache(target, key, descriptor) {\n  if (descriptor.get) {\n    var get = descriptor.get;\n    descriptor.get = function () {\n      var value = get.call(this);\n      Object.defineProperty(this, key, {\n        value: value\n      });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    var fn = descriptor.value;\n    return {\n      get: function get() {\n        var cache = new Map();\n        function memoized() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          var key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n          var result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        }\n        Object.defineProperty(this, key, {\n          value: memoized\n        });\n        return memoized;\n      }\n    };\n  }\n}\nvar SubHeader = new r.Struct({\n  firstCode: r.uint16,\n  entryCount: r.uint16,\n  idDelta: r.int16,\n  idRangeOffset: r.uint16\n});\nvar CmapGroup = new r.Struct({\n  startCharCode: r.uint32,\n  endCharCode: r.uint32,\n  glyphID: r.uint32\n});\nvar UnicodeValueRange = new r.Struct({\n  startUnicodeValue: r.uint24,\n  additionalCount: r.uint8\n});\nvar UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID: r.uint16\n});\nvar DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nvar NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\nvar VarSelectorRecord = new r.Struct({\n  varSelector: r.uint24,\n  defaultUVS: new r.Pointer(r.uint32, DefaultUVS, {\n    type: 'parent'\n  }),\n  nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, {\n    type: 'parent'\n  })\n});\nvar CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: {\n    // Byte encoding\n    length: r.uint16,\n    // Total table length in bytes (set to 262 for format 0)\n    language: r.uint16,\n    // Language code for this encoding subtable, or zero if language-independent\n    codeMap: new r.LazyArray(r.uint8, 256)\n  },\n  2: {\n    // High-byte mapping (CJK)\n    length: r.uint16,\n    language: r.uint16,\n    subHeaderKeys: new r.Array(r.uint16, 256),\n    subHeaderCount: function subHeaderCount(t) {\n      return Math.max.apply(Math, t.subHeaderKeys);\n    },\n    subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n  4: {\n    // Segment mapping to delta values\n    length: r.uint16,\n    // Total table length in bytes\n    language: r.uint16,\n    // Language code\n    segCountX2: r.uint16,\n    segCount: function segCount(t) {\n      return t.segCountX2 >> 1;\n    },\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    endCode: new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad: new r.Reserved(r.uint16),\n    // This value should be zero\n    startCode: new r.LazyArray(r.uint16, 'segCount'),\n    idDelta: new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, function (t) {\n      return (t.length - t._currentOffset) / 2;\n    })\n  },\n  6: {\n    // Trimmed table\n    length: r.uint16,\n    language: r.uint16,\n    firstCode: r.uint16,\n    entryCount: r.uint16,\n    glyphIndices: new r.LazyArray(r.uint16, 'entryCount')\n  },\n  8: {\n    // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint16,\n    is32: new r.LazyArray(r.uint8, 8192),\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  10: {\n    // Trimmed Array\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    firstCode: r.uint32,\n    entryCount: r.uint32,\n    glyphIndices: new r.LazyArray(r.uint16, 'numChars')\n  },\n  12: {\n    // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  13: {\n    // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n  14: {\n    // Unicode Variation Sequences\n    length: r.uint32,\n    numRecords: r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\nvar CmapEntry = new r.Struct({\n  platformID: r.uint16,\n  // Platform identifier\n  encodingID: r.uint16,\n  // Platform-specific encoding identifier\n  table: new r.Pointer(r.uint32, CmapSubtable, {\n    type: 'parent',\n    lazy: true\n  })\n});\n\n// character to glyph mapping\nvar cmap = new r.Struct({\n  version: r.uint16,\n  numSubtables: r.uint16,\n  tables: new r.Array(CmapEntry, 'numSubtables')\n});\n\n// font header\nvar head = new r.Struct({\n  version: r.int32,\n  // 0x00010000 (version 1.0)\n  revision: r.int32,\n  // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber: r.uint32,\n  // set to 0x5F0F3CF5\n  flags: r.uint16,\n  unitsPerEm: r.uint16,\n  // range from 64 to 16384\n  created: new r.Array(r.int32, 2),\n  modified: new r.Array(r.int32, 2),\n  xMin: r.int16,\n  // for all glyph bounding boxes\n  yMin: r.int16,\n  // for all glyph bounding boxes\n  xMax: r.int16,\n  // for all glyph bounding boxes\n  yMax: r.int16,\n  // for all glyph bounding boxes\n  macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: r.uint16,\n  // smallest readable size in pixels\n  fontDirectionHint: r.int16,\n  indexToLocFormat: r.int16,\n  // 0 for short offsets, 1 for long\n  glyphDataFormat: r.int16 // 0 for current format\n});\n\n// horizontal header\nvar hhea = new r.Struct({\n  version: r.int32,\n  ascent: r.int16,\n  // Distance from baseline of highest ascender\n  descent: r.int16,\n  // Distance from baseline of lowest descender\n  lineGap: r.int16,\n  // Typographic line gap\n  advanceWidthMax: r.uint16,\n  // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing: r.int16,\n  // Maximum advance width value in 'hmtx' table\n  minRightSideBearing: r.int16,\n  // Minimum right sidebearing value\n  xMaxExtent: r.int16,\n  caretSlopeRise: r.int16,\n  // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun: r.int16,\n  // 0 for vertical\n  caretOffset: r.int16,\n  // Set to 0 for non-slanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16,\n  // 0 for current format\n  numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table\n});\nvar HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\nvar hmtx = new r.Struct({\n  metrics: new r.LazyArray(HmtxEntry, function (t) {\n    return t.parent.hhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;\n  })\n});\n\n// maxiumum profile\nvar maxp = new r.Struct({\n  version: r.int32,\n  numGlyphs: r.uint16,\n  // The number of glyphs in the font\n  maxPoints: r.uint16,\n  // Maximum points in a non-composite glyph\n  maxContours: r.uint16,\n  // Maximum contours in a non-composite glyph\n  maxComponentPoints: r.uint16,\n  // Maximum points in a composite glyph\n  maxComponentContours: r.uint16,\n  // Maximum contours in a composite glyph\n  maxZones: r.uint16,\n  // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints: r.uint16,\n  // Maximum points used in Z0\n  maxStorage: r.uint16,\n  // Number of Storage Area locations\n  maxFunctionDefs: r.uint16,\n  // Number of FDEFs\n  maxInstructionDefs: r.uint16,\n  // Number of IDEFs\n  maxStackElements: r.uint16,\n  // Maximum stack depth\n  maxSizeOfInstructions: r.uint16,\n  // Maximum byte count for glyph instructions\n  maxComponentElements: r.uint16,\n  // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components\n});\n\n/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nfunction getEncoding(platformID, encodingID) {\n  var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n  return ENCODINGS[platformID][encodingID];\n}\n\n// Map of platform ids to encoding ids.\nvar ENCODINGS = [\n// unicode\n['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n// macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],\n// ISO (deprecated)\n['ascii'],\n// windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nvar MAC_LANGUAGE_ENCODINGS = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit',\n  // Unsupported by iconv-lite\n  146: 'macgaelic' // Unsupported by iconv-lite\n};\n\n// Map of platform ids to BCP-47 language codes.\nvar LANGUAGES = [\n// unicode\n[], {\n  // macintosh\n  0: 'en',\n  30: 'fo',\n  60: 'ks',\n  90: 'rw',\n  1: 'fr',\n  31: 'fa',\n  61: 'ku',\n  91: 'rn',\n  2: 'de',\n  32: 'ru',\n  62: 'sd',\n  92: 'ny',\n  3: 'it',\n  33: 'zh',\n  63: 'bo',\n  93: 'mg',\n  4: 'nl',\n  34: 'nl-BE',\n  64: 'ne',\n  94: 'eo',\n  5: 'sv',\n  35: 'ga',\n  65: 'sa',\n  128: 'cy',\n  6: 'es',\n  36: 'sq',\n  66: 'mr',\n  129: 'eu',\n  7: 'da',\n  37: 'ro',\n  67: 'bn',\n  130: 'ca',\n  8: 'pt',\n  38: 'cz',\n  68: 'as',\n  131: 'la',\n  9: 'no',\n  39: 'sk',\n  69: 'gu',\n  132: 'qu',\n  10: 'he',\n  40: 'si',\n  70: 'pa',\n  133: 'gn',\n  11: 'ja',\n  41: 'yi',\n  71: 'or',\n  134: 'ay',\n  12: 'ar',\n  42: 'sr',\n  72: 'ml',\n  135: 'tt',\n  13: 'fi',\n  43: 'mk',\n  73: 'kn',\n  136: 'ug',\n  14: 'el',\n  44: 'bg',\n  74: 'ta',\n  137: 'dz',\n  15: 'is',\n  45: 'uk',\n  75: 'te',\n  138: 'jv',\n  16: 'mt',\n  46: 'be',\n  76: 'si',\n  139: 'su',\n  17: 'tr',\n  47: 'uz',\n  77: 'my',\n  140: 'gl',\n  18: 'hr',\n  48: 'kk',\n  78: 'km',\n  141: 'af',\n  19: 'zh-Hant',\n  49: 'az-Cyrl',\n  79: 'lo',\n  142: 'br',\n  20: 'ur',\n  50: 'az-Arab',\n  80: 'vi',\n  143: 'iu',\n  21: 'hi',\n  51: 'hy',\n  81: 'id',\n  144: 'gd',\n  22: 'th',\n  52: 'ka',\n  82: 'tl',\n  145: 'gv',\n  23: 'ko',\n  53: 'mo',\n  83: 'ms',\n  146: 'ga',\n  24: 'lt',\n  54: 'ky',\n  84: 'ms-Arab',\n  147: 'to',\n  25: 'pl',\n  55: 'tg',\n  85: 'am',\n  148: 'el-polyton',\n  26: 'hu',\n  56: 'tk',\n  86: 'ti',\n  149: 'kl',\n  27: 'es',\n  57: 'mn-CN',\n  87: 'om',\n  150: 'az',\n  28: 'lv',\n  58: 'mn',\n  88: 'so',\n  151: 'nn',\n  29: 'se',\n  59: 'ps',\n  89: 'sw'\n},\n// ISO (deprecated)\n[], {\n  // windows                                        \n  0x0436: 'af',\n  0x4009: 'en-IN',\n  0x0487: 'rw',\n  0x0432: 'tn',\n  0x041C: 'sq',\n  0x1809: 'en-IE',\n  0x0441: 'sw',\n  0x045B: 'si',\n  0x0484: 'gsw',\n  0x2009: 'en-JM',\n  0x0457: 'kok',\n  0x041B: 'sk',\n  0x045E: 'am',\n  0x4409: 'en-MY',\n  0x0412: 'ko',\n  0x0424: 'sl',\n  0x1401: 'ar-DZ',\n  0x1409: 'en-NZ',\n  0x0440: 'ky',\n  0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH',\n  0x3409: 'en-PH',\n  0x0454: 'lo',\n  0x400A: 'es-BO',\n  0x0C01: 'ar',\n  0x4809: 'en-SG',\n  0x0426: 'lv',\n  0x340A: 'es-CL',\n  0x0801: 'ar-IQ',\n  0x1C09: 'en-ZA',\n  0x0427: 'lt',\n  0x240A: 'es-CO',\n  0x2C01: 'ar-JO',\n  0x2C09: 'en-TT',\n  0x082E: 'dsb',\n  0x140A: 'es-CR',\n  0x3401: 'ar-KW',\n  0x0809: 'en-GB',\n  0x046E: 'lb',\n  0x1C0A: 'es-DO',\n  0x3001: 'ar-LB',\n  0x0409: 'en',\n  0x042F: 'mk',\n  0x300A: 'es-EC',\n  0x1001: 'ar-LY',\n  0x3009: 'en-ZW',\n  0x083E: 'ms-BN',\n  0x440A: 'es-SV',\n  0x1801: 'ary',\n  0x0425: 'et',\n  0x043E: 'ms',\n  0x100A: 'es-GT',\n  0x2001: 'ar-OM',\n  0x0438: 'fo',\n  0x044C: 'ml',\n  0x480A: 'es-HN',\n  0x4001: 'ar-QA',\n  0x0464: 'fil',\n  0x043A: 'mt',\n  0x080A: 'es-MX',\n  0x0401: 'ar-SA',\n  0x040B: 'fi',\n  0x0481: 'mi',\n  0x4C0A: 'es-NI',\n  0x2801: 'ar-SY',\n  0x080C: 'fr-BE',\n  0x047A: 'arn',\n  0x180A: 'es-PA',\n  0x1C01: 'aeb',\n  0x0C0C: 'fr-CA',\n  0x044E: 'mr',\n  0x3C0A: 'es-PY',\n  0x3801: 'ar-AE',\n  0x040C: 'fr',\n  0x047C: 'moh',\n  0x280A: 'es-PE',\n  0x2401: 'ar-YE',\n  0x140C: 'fr-LU',\n  0x0450: 'mn',\n  0x500A: 'es-PR',\n  0x042B: 'hy',\n  0x180C: 'fr-MC',\n  0x0850: 'mn-CN',\n  0x0C0A: 'es',\n  0x044D: 'as',\n  0x100C: 'fr-CH',\n  0x0461: 'ne',\n  0x040A: 'es',\n  0x082C: 'az-Cyrl',\n  0x0462: 'fy',\n  0x0414: 'nb',\n  0x540A: 'es-US',\n  0x042C: 'az',\n  0x0456: 'gl',\n  0x0814: 'nn',\n  0x380A: 'es-UY',\n  0x046D: 'ba',\n  0x0437: 'ka',\n  0x0482: 'oc',\n  0x200A: 'es-VE',\n  0x042D: 'eu',\n  0x0C07: 'de-AT',\n  0x0448: 'or',\n  0x081D: 'sv-FI',\n  0x0423: 'be',\n  0x0407: 'de',\n  0x0463: 'ps',\n  0x041D: 'sv',\n  0x0845: 'bn',\n  0x1407: 'de-LI',\n  0x0415: 'pl',\n  0x045A: 'syr',\n  0x0445: 'bn-IN',\n  0x1007: 'de-LU',\n  0x0416: 'pt',\n  0x0428: 'tg',\n  0x201A: 'bs-Cyrl',\n  0x0807: 'de-CH',\n  0x0816: 'pt-PT',\n  0x085F: 'tzm',\n  0x141A: 'bs',\n  0x0408: 'el',\n  0x0446: 'pa',\n  0x0449: 'ta',\n  0x047E: 'br',\n  0x046F: 'kl',\n  0x046B: 'qu-BO',\n  0x0444: 'tt',\n  0x0402: 'bg',\n  0x0447: 'gu',\n  0x086B: 'qu-EC',\n  0x044A: 'te',\n  0x0403: 'ca',\n  0x0468: 'ha',\n  0x0C6B: 'qu',\n  0x041E: 'th',\n  0x0C04: 'zh-HK',\n  0x040D: 'he',\n  0x0418: 'ro',\n  0x0451: 'bo',\n  0x1404: 'zh-MO',\n  0x0439: 'hi',\n  0x0417: 'rm',\n  0x041F: 'tr',\n  0x0804: 'zh',\n  0x040E: 'hu',\n  0x0419: 'ru',\n  0x0442: 'tk',\n  0x1004: 'zh-SG',\n  0x040F: 'is',\n  0x243B: 'smn',\n  0x0480: 'ug',\n  0x0404: 'zh-TW',\n  0x0470: 'ig',\n  0x103B: 'smj-NO',\n  0x0422: 'uk',\n  0x0483: 'co',\n  0x0421: 'id',\n  0x143B: 'smj',\n  0x042E: 'hsb',\n  0x041A: 'hr',\n  0x045D: 'iu',\n  0x0C3B: 'se-FI',\n  0x0420: 'ur',\n  0x101A: 'hr-BA',\n  0x085D: 'iu-Latn',\n  0x043B: 'se',\n  0x0843: 'uz-Cyrl',\n  0x0405: 'cs',\n  0x083C: 'ga',\n  0x083B: 'se-SE',\n  0x0443: 'uz',\n  0x0406: 'da',\n  0x0434: 'xh',\n  0x203B: 'sms',\n  0x042A: 'vi',\n  0x048C: 'prs',\n  0x0435: 'zu',\n  0x183B: 'sma-NO',\n  0x0452: 'cy',\n  0x0465: 'dv',\n  0x0410: 'it',\n  0x1C3B: 'sms',\n  0x0488: 'wo',\n  0x0813: 'nl-BE',\n  0x0810: 'it-CH',\n  0x044F: 'sa',\n  0x0485: 'sah',\n  0x0413: 'nl',\n  0x0411: 'ja',\n  0x1C1A: 'sr-Cyrl-BA',\n  0x0478: 'ii',\n  0x0C09: 'en-AU',\n  0x044B: 'kn',\n  0x0C1A: 'sr',\n  0x046A: 'yo',\n  0x2809: 'en-BZ',\n  0x043F: 'kk',\n  0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA',\n  0x0453: 'km',\n  0x081A: 'sr-Latn',\n  0x2409: 'en-029',\n  0x0486: 'quc',\n  0x046C: 'nso'\n}];\nvar NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID: r.uint16,\n  length: r.uint16,\n  string: new r.Pointer(r.uint16, new r.String('length', function (t) {\n    return getEncoding(t.platformID, t.encodingID, t.languageID);\n  }), {\n    type: 'parent',\n    relativeTo: 'parent.stringOffset',\n    allowNull: false\n  })\n});\nvar LangTagRecord = new r.Struct({\n  length: r.uint16,\n  tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {\n    type: 'parent',\n    relativeTo: 'stringOffset'\n  })\n});\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count'),\n    langTagCount: r.uint16,\n    langTags: new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\nvar NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName',\n// Note: A font may have only one PostScript name and that name must be ASCII.\n'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null,\n// reserved\n'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\nNameTable.process = function (stream) {\n  var records = {};\n  for (var _iterator = this.records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var record = _ref;\n\n    // find out what language this is for\n    var language = LANGUAGES[record.platformID][record.languageID];\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) {\n      records[key] = {};\n    }\n    var obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n  this.records = records;\n};\nNameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n  var records = [];\n  for (var key in this.records) {\n    var val = this.records[key];\n    if (key === 'fontFeatures') continue;\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth: r.int16,\n    // average weighted advance width of lower case letters and space\n    usWeightClass: r.uint16,\n    // visual weight of stroke in glyphs\n    usWidthClass: r.uint16,\n    // relative change from the normal aspect ratio (width to height ratio)\n    fsType: new r.Bitfield(r.uint16, [\n    // Indicates font embedding licensing rights\n    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: r.int16,\n    // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize: r.int16,\n    // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset: r.int16,\n    // recommended horizontal offset for subscripts\n    ySubscriptYOffset: r.int16,\n    // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize: r.int16,\n    // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize: r.int16,\n    // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset: r.int16,\n    // recommended horizontal offset for superscripts\n    ySuperscriptYOffset: r.int16,\n    // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize: r.int16,\n    // width of the strikeout stroke\n    yStrikeoutPosition: r.int16,\n    // position of the strikeout stroke relative to the baseline\n    sFamilyClass: r.int16,\n    // classification of font-family design\n    panose: new r.Array(r.uint8, 10),\n    // describe the visual characteristics of a given typeface\n    ulCharRange: new r.Array(r.uint32, 4),\n    vendorID: new r.String(4),\n    // four character identifier for the font vendor\n    fsSelection: new r.Bitfield(r.uint16, [\n    // bit field containing information about the font\n    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: r.uint16,\n    // The minimum Unicode index in this font\n    usLastCharIndex: r.uint16 // The maximum Unicode index in this font\n  },\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n  1: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2)\n  },\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16\n  },\n  5: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16,\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\nvar versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\n// PostScript information\nvar post = new r.VersionedStruct(r.fixed32, {\n  header: {\n    // these fields exist at the top of all versions\n    italicAngle: r.fixed32,\n    // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition: r.int16,\n    // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16,\n    // Suggested values for the underline thickness\n    isFixedPitch: r.uint32,\n    // Whether the font is monospaced\n    minMemType42: r.uint32,\n    // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42: r.uint32,\n    // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1: r.uint32,\n    // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n  1: {},\n  // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names: new r.Array(new r.String(r.uint8))\n  },\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets: new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n  3: {},\n  // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, function (t) {\n      return t.parent.maxp.numGlyphs;\n    })\n  }\n});\n\n// An array of predefined values accessible by instructions\nvar cvt = new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nvar fpgm = new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\nvar loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\nloca.process = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n  }\n};\nloca.preEncode = function () {\n  if (this.version != null) return;\n\n  // assume this.offsets is a sorted array\n  this.version = this.offsets[this.offsets.length - 1] > 0xffff ? 1 : 0;\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n  }\n};\n\n// Set of instructions executed whenever the point size or font transformation change\nvar prep = new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n\n// only used for encoding\nvar glyf = new r.Array(new r.Buffer());\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\nvar CFFIndex = function () {\n  function CFFIndex(type) {\n    classCallCheck(this, CFFIndex);\n    this.type = type;\n  }\n  CFFIndex.prototype.getCFFVersion = function getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n    return ctx ? ctx.version : -1;\n  };\n  CFFIndex.prototype.decode = function decode(stream, parent) {\n    var version = this.getCFFVersion(parent);\n    var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n    if (count === 0) {\n      return [];\n    }\n    var offSize = stream.readUInt8();\n    var offsetType = void 0;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset size in CFFIndex: \" + offSize + \" \" + stream.pos);\n    }\n    var ret = [];\n    var startPos = stream.pos + (count + 1) * offSize - 1;\n    var start = offsetType.decode(stream);\n    for (var i = 0; i < count; i++) {\n      var end = offsetType.decode(stream);\n      if (this.type != null) {\n        var pos = stream.pos;\n        stream.pos = startPos + start;\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n      start = end;\n    }\n    stream.pos = startPos + start;\n    return ret;\n  };\n  CFFIndex.prototype.size = function size(arr, parent) {\n    var size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var offset = 1;\n    for (var i = 0; i < arr.length; i++) {\n      var item = arr[i];\n      offset += type.size(item, parent);\n    }\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n    return size;\n  };\n  CFFIndex.prototype.encode = function encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var sizes = [];\n    var offset = 1;\n    for (var _iterator = arr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var item = _ref;\n      var s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n    for (var _iterator2 = sizes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var size = _ref2;\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n      var _item = _ref3;\n      type.encode(stream, _item, parent);\n    }\n    return;\n  };\n  return CFFIndex;\n}();\nvar FLOAT_EOF = 0xf;\nvar FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\nvar FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\nvar CFFOperand = function () {\n  function CFFOperand() {\n    classCallCheck(this, CFFOperand);\n  }\n  CFFOperand.decode = function decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n    if (value === 30) {\n      var str = '';\n      while (true) {\n        var b = stream.readUInt8();\n        var n1 = b >> 4;\n        if (n1 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n1];\n        var n2 = b & 15;\n        if (n2 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n2];\n      }\n      return parseFloat(str);\n    }\n    return null;\n  };\n  CFFOperand.size = function size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n    if ((value | 0) !== value) {\n      // floating point\n      var str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n    } else {\n      return 5;\n    }\n  };\n  CFFOperand.encode = function encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    var val = Number(value);\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      // floating point\n      stream.writeUInt8(30);\n      var str = '' + val;\n      for (var i = 0; i < str.length; i += 2) {\n        var c1 = str[i];\n        var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          var c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8(FLOAT_EOF << 4);\n      }\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  };\n  return CFFOperand;\n}();\nvar CFFDict = function () {\n  function CFFDict() {\n    var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, CFFDict);\n    this.ops = ops;\n    this.fields = {};\n    for (var _iterator = ops, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var field = _ref;\n      var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n  CFFDict.prototype.decodeOperands = function decodeOperands(type, stream, ret, operands) {\n    var _this = this;\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this.decodeOperands(type[i], stream, ret, [op]);\n      });\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  };\n  CFFDict.prototype.encodeOperands = function encodeOperands(type, stream, ctx, operands) {\n    var _this2 = this;\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this2.encodeOperands(type[i], stream, ctx, op)[0];\n      });\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  };\n  CFFDict.prototype.decode = function decode(stream, parent) {\n    var end = stream.pos + parent.length;\n    var ret = {};\n    var operands = [];\n\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      }\n    });\n\n    // fill in defaults\n    for (var key in this.fields) {\n      var field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n    while (stream.pos < end) {\n      var b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = b << 8 | stream.readUInt8();\n        }\n        var _field = this.fields[b];\n        if (!_field) {\n          throw new Error('Unknown operator ' + b);\n        }\n        var val = this.decodeOperands(_field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof PropertyDescriptor) {\n            Object.defineProperty(ret, _field[1], val);\n          } else {\n            ret[_field[1]] = val;\n          }\n        }\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n    return ret;\n  };\n  CFFDict.prototype.size = function size(dict, parent) {\n    var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n    var len = 0;\n    for (var k in this.fields) {\n      var field = this.fields[k];\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n      var operands = this.encodeOperands(field[2], null, ctx, val);\n      for (var _iterator2 = operands, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var op = _ref2;\n        len += CFFOperand.size(op);\n      }\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n    return len;\n  };\n  CFFDict.prototype.encode = function encode(stream, dict, parent) {\n    var ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n    for (var _iterator3 = this.ops, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n      var field = _ref3;\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n      var operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (var _iterator4 = operands, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n        var _ref4;\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref4 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref4 = _i4.value;\n        }\n        var op = _ref4;\n        CFFOperand.encode(stream, op);\n      }\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (var _iterator5 = key, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n        var _op = _ref5;\n        stream.writeUInt8(_op);\n      }\n    }\n    var i = 0;\n    while (i < ctx.pointers.length) {\n      var ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n    return;\n  };\n  return CFFDict;\n}();\nvar CFFPointer = function (_r$Pointer) {\n  inherits(CFFPointer, _r$Pointer);\n  function CFFPointer(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, CFFPointer);\n    if (options.type == null) {\n      options.type = 'global';\n    }\n    return possibleConstructorReturn(this, _r$Pointer.call(this, null, type, options));\n  }\n  CFFPointer.prototype.decode = function decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: function decode() {\n        return operands[0];\n      }\n    };\n    return _r$Pointer.prototype.decode.call(this, stream, parent, operands);\n  };\n  CFFPointer.prototype.encode = function encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: function size() {\n          return 0;\n        }\n      };\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n    var ptr = null;\n    this.offsetType = {\n      encode: function encode(stream, val) {\n        return ptr = val;\n      }\n    };\n    _r$Pointer.prototype.encode.call(this, stream, value, ctx);\n    return [new Ptr(ptr)];\n  };\n  return CFFPointer;\n}(r.Pointer);\nvar Ptr = function () {\n  function Ptr(val) {\n    classCallCheck(this, Ptr);\n    this.val = val;\n    this.forceLarge = true;\n  }\n  Ptr.prototype.valueOf = function valueOf() {\n    return this.val;\n  };\n  return Ptr;\n}();\nvar CFFBlendOp = function () {\n  function CFFBlendOp() {\n    classCallCheck(this, CFFBlendOp);\n  }\n  CFFBlendOp.decode = function decode(stream, parent, operands) {\n    var numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  };\n  return CFFBlendOp;\n}();\nvar CFFPrivateDict = new CFFDict([\n// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), {\n  type: 'local'\n}), null]]);\n\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nvar standardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nvar StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\nvar ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nvar ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\nvar ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nvar ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];\n\n//########################\n// Scripts and Languages #\n//########################\n\nvar LangSysTable = new r.Struct({\n  reserved: new r.Reserved(r.uint16),\n  reqFeatureIndex: r.uint16,\n  featureCount: r.uint16,\n  featureIndexes: new r.Array(r.uint16, 'featureCount')\n});\nvar LangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  langSys: new r.Pointer(r.uint16, LangSysTable, {\n    type: 'parent'\n  })\n});\nvar Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count: r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\nvar ScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, Script, {\n    type: 'parent'\n  })\n});\nvar ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nvar Feature = new r.Struct({\n  featureParams: r.uint16,\n  // pointer\n  lookupCount: r.uint16,\n  lookupListIndexes: new r.Array(r.uint16, 'lookupCount')\n});\nvar FeatureRecord = new r.Struct({\n  tag: new r.String(4),\n  feature: new r.Pointer(r.uint16, Feature, {\n    type: 'parent'\n  })\n});\nvar FeatureList = new r.Array(FeatureRecord, r.uint16);\nvar LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\nfunction LookupList(SubTable) {\n  var Lookup = new r.Struct({\n    lookupType: r.uint16,\n    flags: LookupFlags,\n    subTableCount: r.uint16,\n    subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new r.Optional(r.uint16, function (t) {\n      return t.flags.flags.useMarkFilteringSet;\n    })\n  });\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nvar RangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  startCoverageIndex: r.uint16\n});\nvar Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount: r.uint16,\n    glyphs: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nvar ClassRangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  class: r.uint16\n});\nvar ClassDef = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Class array\n    startGlyph: r.uint16,\n    glyphCount: r.uint16,\n    classValueArray: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    // Class ranges\n    classRangeCount: r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nvar Device = new r.Struct({\n  a: r.uint16,\n  // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16,\n  // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nvar LookupRecord = new r.Struct({\n  sequenceIndex: r.uint16,\n  lookupListIndex: r.uint16\n});\nvar Rule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\nvar ClassRule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  classes: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\nvar Context = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Simple context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    ruleSetCount: r.uint16,\n    ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: {\n    // Class-based context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    classDef: new r.Pointer(r.uint16, ClassDef),\n    classSetCnt: r.uint16,\n    classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: r.uint16,\n    lookupCount: r.uint16,\n    coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nvar ChainRule = new r.Struct({\n  backtrackGlyphCount: r.uint16,\n  backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.inputGlyphCount - 1;\n  }),\n  lookaheadGlyphCount: r.uint16,\n  lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount: r.uint16,\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\nvar ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\nvar ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Simple context glyph substitution\n    coverage: new r.Pointer(r.uint16, Coverage),\n    chainCount: r.uint16,\n    chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n  2: {\n    // Class-based chaining context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef: new r.Pointer(r.uint16, ClassDef),\n    inputClassDef: new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),\n    chainCount: r.uint16,\n    chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n  3: {\n    // Coverage-based chaining context\n    backtrackGlyphCount: r.uint16,\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount: r.uint16,\n    inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount: r.uint16,\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\nvar _;\n\n/*******************\n * Variation Store *\n *******************/\n\nvar F2DOT14 = new r.Fixed(16, 'BE', 14);\nvar RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\nvar VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\nvar DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, function (t) {\n    return t.parent.shortDeltaCount;\n  }),\n  regionDeltas: new r.Array(r.int8, function (t) {\n    return t.parent.regionIndexCount - t.parent.shortDeltaCount;\n  }),\n  deltas: function deltas(t) {\n    return t.shortDeltas.concat(t.regionDeltas);\n  }\n});\nvar ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\nvar ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nvar ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: (_ = {\n    axisIndex: r.uint16\n  }, _['axisIndex'] = r.uint16, _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)\n});\nvar ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\nvar FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, {\n    type: 'parent'\n  })\n});\nvar FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\nvar FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, {\n    type: 'parent'\n  }),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {\n    type: 'parent'\n  })\n});\nvar FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\n\nvar PredefinedOp = function () {\n  function PredefinedOp(predefinedOps, type) {\n    classCallCheck(this, PredefinedOp);\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n  PredefinedOp.prototype.decode = function decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n    return this.type.decode(stream, parent, operands);\n  };\n  PredefinedOp.prototype.size = function size(value, ctx) {\n    return this.type.size(value, ctx);\n  };\n  PredefinedOp.prototype.encode = function encode(stream, value, ctx) {\n    var index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n    return this.type.encode(stream, value, ctx);\n  };\n  return PredefinedOp;\n}();\nvar CFFEncodingVersion = function (_r$Number) {\n  inherits(CFFEncodingVersion, _r$Number);\n  function CFFEncodingVersion() {\n    classCallCheck(this, CFFEncodingVersion);\n    return possibleConstructorReturn(this, _r$Number.call(this, 'UInt8'));\n  }\n  CFFEncodingVersion.prototype.decode = function decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  };\n  return CFFEncodingVersion;\n}(r.Number);\nvar Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\nvar Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\nvar CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n\n    // TODO: supplement?\n  }\n});\nvar CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, {\n  lazy: true\n}));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\n\nvar RangeArray = function (_r$Array) {\n  inherits(RangeArray, _r$Array);\n  function RangeArray() {\n    classCallCheck(this, RangeArray);\n    return possibleConstructorReturn(this, _r$Array.apply(this, arguments));\n  }\n  RangeArray.prototype.decode = function decode(stream, parent) {\n    var length = resolveLength(this.length, stream, parent);\n    var count = 0;\n    var res = [];\n    while (count < length) {\n      var range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n    return res;\n  };\n  return RangeArray;\n}(r.Array);\nvar CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n  1: {\n    ranges: new RangeArray(Range1, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n  2: {\n    ranges: new RangeArray(Range2, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  }\n});\nvar CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, {\n  lazy: true\n}));\nvar FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\nvar FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\nvar FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, function (t) {\n      return t.parent.CharStrings.length;\n    })\n  },\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\nvar ptr = new CFFPointer(CFFPrivateDict);\nvar CFFPrivateOp = function () {\n  function CFFPrivateOp() {\n    classCallCheck(this, CFFPrivateOp);\n  }\n  CFFPrivateOp.prototype.decode = function decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  };\n  CFFPrivateOp.prototype.size = function size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  };\n  CFFPrivateOp.prototype.encode = function encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  };\n  return CFFPrivateOp;\n}();\nvar FontDict = new CFFDict([\n// key       name                   type(s)                                 default\n[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null]]);\nvar CFFTopDict = new CFFDict([\n// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],\n// CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\nvar VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n});\nvar CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);\nvar CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize: r.uint8,\n    offSize: r.uint8,\n    nameIndex: new CFFIndex(new r.String('length')),\n    topDictIndex: new CFFIndex(CFFTopDict),\n    stringIndex: new CFFIndex(new r.String('length')),\n    globalSubrIndex: new CFFIndex()\n  },\n  2: {\n    hdrSize: r.uint8,\n    length: r.uint16,\n    topDict: CFF2TopDict,\n    globalSubrIndex: new CFFIndex()\n  }\n});\nvar CFFFont = function () {\n  function CFFFont(stream) {\n    classCallCheck(this, CFFFont);\n    this.stream = stream;\n    this.decode();\n  }\n  CFFFont.decode = function decode(stream) {\n    return new CFFFont(stream);\n  };\n  CFFFont.prototype.decode = function decode() {\n    var start = this.stream.pos;\n    var top = CFFTop.decode(this.stream);\n    for (var key in top) {\n      var val = top[key];\n      this[key] = val;\n    }\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n      this.topDict = this.topDictIndex[0];\n    }\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  };\n  CFFFont.prototype.string = function string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n    return this.stringIndex[sid - standardStrings.length];\n  };\n  CFFFont.prototype.getCharString = function getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  };\n  CFFFont.prototype.getGlyphName = function getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n    var charset = this.topDict.charset;\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n    if (gid === 0) {\n      return '.notdef';\n    }\n    gid -= 1;\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n      case 1:\n      case 2:\n        for (var i = 0; i < charset.ranges.length; i++) {\n          var range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n    return null;\n  };\n  CFFFont.prototype.fdForGlyph = function fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n      case 3:\n      case 4:\n        var ranges = this.topDict.FDSelect.ranges;\n        var low = 0;\n        var high = ranges.length - 1;\n        while (low <= high) {\n          var mid = low + high >> 1;\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid > ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);\n    }\n  };\n  CFFFont.prototype.privateDictForGlyph = function privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      var fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n      return null;\n    }\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n    return this.topDict.FDArray[0].Private;\n  };\n  createClass(CFFFont, [{\n    key: 'postscriptName',\n    get: function get$$1() {\n      if (this.version < 2) {\n        return this.nameIndex[0];\n      }\n      return null;\n    }\n  }, {\n    key: 'fullName',\n    get: function get$$1() {\n      return this.string(this.topDict.FullName);\n    }\n  }, {\n    key: 'familyName',\n    get: function get$$1() {\n      return this.string(this.topDict.FamilyName);\n    }\n  }]);\n  return CFFFont;\n}();\nvar VerticalOrigin = new r.Struct({\n  glyphIndex: r.uint16,\n  vertOriginY: r.int16\n});\nvar VORG = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  defaultVertOriginY: r.int16,\n  numVertOriginYMetrics: r.uint16,\n  metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\nvar BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\nvar SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\nvar EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\nvar ByteAligned = function ByteAligned() {\n  classCallCheck(this, ByteAligned);\n};\nvar BitAligned = function BitAligned() {\n  classCallCheck(this, BitAligned);\n};\nvar glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\nvar SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\nvar CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\nvar IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n  1: {\n    offsetArray: new r.Array(r.uint32, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n  3: {\n    offsetArray: new r.Array(r.uint16, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, function (t) {\n      return t.numGlyphs + 1;\n    })\n  },\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\nvar IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\nvar BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), {\n    type: 'parent'\n  }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\nvar EBLC = new r.Struct({\n  version: r.uint32,\n  // 0x00020000\n  numSizes: r.uint32,\n  sizes: new r.Array(BitmapSizeTable, 'numSizes')\n});\nvar ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {\n    return t.parent.parent.maxp.numGlyphs + 1;\n  })\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nvar sbix = new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\nvar LayerRecord = new r.Struct({\n  gid: r.uint16,\n  // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\n\nvar BaseGlyphRecord = new r.Struct({\n  gid: r.uint16,\n  // Glyph ID of reference glyph. This glyph is for reference only\n  // and is not rendered for color.\n  firstLayerIndex: r.uint16,\n  // Index (from beginning of the Layer Records) to the layer record.\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\nvar COLR = new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), {\n    lazy: true\n  }),\n  numLayerRecords: r.uint16\n});\nvar ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\nvar CPAL = new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\nvar BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    coordinate: r.int16 // X or Y value, in design units\n  },\n  2: {\n    // Design units plus contour point\n    coordinate: r.int16,\n    // X or Y value, in design units\n    referenceGlyph: r.uint16,\n    // GlyphID of control glyph\n    baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph\n  },\n  3: {\n    // Design units plus Device table\n    coordinate: r.int16,\n    // X or Y value, in design units\n    deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value\n  }\n});\nvar BaseValues = new r.Struct({\n  defaultIndex: r.uint16,\n  // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\nvar FeatMinMaxRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord: new r.Pointer(r.uint16, BaseCoord, {\n    type: 'parent'\n  }),\n  // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord, {\n    type: 'parent'\n  }) // May be NULL\n});\nvar MinMax = new r.Struct({\n  minCoord: new r.Pointer(r.uint16, BaseCoord),\n  // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord),\n  // May be NULL\n  featMinMaxCount: r.uint16,\n  // May be 0\n  featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\nvar BaseLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, {\n    type: 'parent'\n  })\n});\nvar BaseScript = new r.Struct({\n  baseValues: new r.Pointer(r.uint16, BaseValues),\n  // May be NULL\n  defaultMinMax: new r.Pointer(r.uint16, MinMax),\n  // May be NULL\n  baseLangSysCount: r.uint16,\n  // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\nvar BaseScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  // 4-byte script identification tag\n  script: new r.Pointer(r.uint16, BaseScript, {\n    type: 'parent'\n  })\n});\nvar BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nvar BaseTagList = new r.Array(new r.String(4), r.uint16);\nvar Axis = new r.Struct({\n  baseTagList: new r.Pointer(r.uint16, BaseTagList),\n  // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\nvar BASE = new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis: new r.Pointer(r.uint16, Axis),\n    // May be NULL\n    vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL\n  },\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\nvar AttachPoint = new r.Array(r.uint16, r.uint16);\nvar AttachList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  glyphCount: r.uint16,\n  attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\nvar CaretValue = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    coordinate: r.int16\n  },\n  2: {\n    // Contour point\n    caretValuePoint: r.uint16\n  },\n  3: {\n    // Design units plus Device table\n    coordinate: r.int16,\n    deviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\nvar LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\nvar LigCaretList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount: r.uint16,\n  ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\nvar MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount: r.uint16,\n  coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\nvar GDEF = new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef: new r.Pointer(r.uint16, ClassDef),\n    attachList: new r.Pointer(r.uint16, AttachList),\n    ligCaretList: new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\nvar ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\nvar types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance: r.int16,\n  yAdvance: r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: 'rel'\n  }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: 'rel'\n  }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: 'rel'\n  }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, {\n    type: 'global',\n    relativeTo: 'rel'\n  })\n};\nvar ValueRecord = function () {\n  function ValueRecord() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';\n    classCallCheck(this, ValueRecord);\n    this.key = key;\n  }\n  ValueRecord.prototype.buildStruct = function buildStruct(parent) {\n    var struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n    if (!struct[this.key]) return;\n    var fields = {};\n    fields.rel = function () {\n      return struct._startOffset;\n    };\n    var format = struct[this.key];\n    for (var key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n    return new r.Struct(fields);\n  };\n  ValueRecord.prototype.size = function size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  };\n  ValueRecord.prototype.decode = function decode(stream, parent) {\n    var res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  };\n  return ValueRecord;\n}();\nvar PairValueRecord = new r.Struct({\n  secondGlyph: r.uint16,\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\nvar PairSet = new r.Array(PairValueRecord, r.uint16);\nvar Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\nvar Anchor = new r.VersionedStruct(r.uint16, {\n  1: {\n    // Design units only\n    xCoordinate: r.int16,\n    yCoordinate: r.int16\n  },\n  2: {\n    // Design units plus contour point\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    anchorPoint: r.uint16\n  },\n  3: {\n    // Design units plus Device tables\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    xDeviceTable: new r.Pointer(r.uint16, Device),\n    yDeviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\nvar EntryExitRecord = new r.Struct({\n  entryAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  }),\n  exitAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  })\n});\nvar MarkRecord = new r.Struct({\n  class: r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, {\n    type: 'parent'\n  })\n});\nvar MarkArray = new r.Array(MarkRecord, r.uint16);\nvar BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.classCount;\n});\nvar BaseArray = new r.Array(BaseRecord, r.uint16);\nvar ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.parent.classCount;\n});\nvar LigatureAttach = new r.Array(ComponentRecord, r.uint16);\nvar LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\nvar GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {\n    // Single Adjustment\n    1: {\n      // Single positioning value\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      value: new ValueRecord()\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      valueCount: r.uint16,\n      values: new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n  2: new r.VersionedStruct(r.uint16, {\n    // Pair Adjustment Positioning\n    1: {\n      // Adjustments for glyph pairs\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      pairSetCount: r.uint16,\n      pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n    2: {\n      // Class pair adjustment\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      classDef1: new r.Pointer(r.uint16, ClassDef),\n      classDef2: new r.Pointer(r.uint16, ClassDef),\n      class1Count: r.uint16,\n      class2Count: r.uint16,\n      classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n  3: {\n    // Cursive Attachment Positioning\n    format: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    entryExitCount: r.uint16,\n    entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n  4: {\n    // MarkToBase Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    baseCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    baseArray: new r.Pointer(r.uint16, BaseArray)\n  },\n  5: {\n    // MarkToLigature Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    ligatureArray: new r.Pointer(r.uint16, LigatureArray)\n  },\n  6: {\n    // MarkToMark Attachment Positioning\n    format: r.uint16,\n    mark1Coverage: new r.Pointer(r.uint16, Coverage),\n    mark2Coverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    mark1Array: new r.Pointer(r.uint16, MarkArray),\n    mark2Array: new r.Pointer(r.uint16, BaseArray)\n  },\n  7: Context,\n  // Contextual positioning\n  8: ChainingContext,\n  // Chaining contextual positioning\n\n  9: {\n    // Extension Positioning\n    posFormat: r.uint16,\n    lookupType: r.uint16,\n    // cannot also be 9\n    extension: new r.Pointer(r.uint32, undefined)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\nvar GPOS = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\nvar Sequence = new r.Array(r.uint16, r.uint16);\nvar AlternateSet = Sequence;\nvar Ligature = new r.Struct({\n  glyph: r.uint16,\n  compCount: r.uint16,\n  components: new r.Array(r.uint16, function (t) {\n    return t.compCount - 1;\n  })\n});\nvar LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\nvar GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {\n    // Single Substitution\n    1: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID: r.int16\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      glyphCount: r.uint16,\n      substitute: new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n  2: {\n    // Multiple Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n  3: {\n    // Alternate Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n  4: {\n    // Ligature Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n  5: Context,\n  // Contextual Substitution\n  6: ChainingContext,\n  // Chaining Contextual Substitution\n\n  7: {\n    // Extension Substitution\n    substFormat: r.uint16,\n    lookupType: r.uint16,\n    // cannot also be 7\n    extension: new r.Pointer(r.uint32, undefined)\n  },\n  8: {\n    // Reverse Chaining Contextual Single Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount: r.uint16,\n    substitutes: new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\nvar GSUB = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\nvar JstfGSUBModList = new r.Array(r.uint16, r.uint16);\nvar JstfPriority = new r.Struct({\n  shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\nvar JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\nvar JstfLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\nvar JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)),\n  // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount: r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\nvar JstfScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, {\n    type: 'parent'\n  })\n});\nvar JSTF = new r.Struct({\n  version: r.uint32,\n  // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList: new r.Array(JstfScriptRecord, 'scriptCount')\n});\n\n// TODO: add this to restructure\n\nvar VariableSizeNumber = function () {\n  function VariableSizeNumber(size) {\n    classCallCheck(this, VariableSizeNumber);\n    this._size = size;\n  }\n  VariableSizeNumber.prototype.decode = function decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n      case 2:\n        return stream.readUInt16BE();\n      case 3:\n        return stream.readUInt24BE();\n      case 4:\n        return stream.readUInt32BE();\n    }\n  };\n  VariableSizeNumber.prototype.size = function size(val, parent) {\n    return resolveLength(this._size, null, parent);\n  };\n  return VariableSizeNumber;\n}();\nvar MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(function (t) {\n    return ((t.parent.entryFormat & 0x0030) >> 4) + 1;\n  }),\n  outerIndex: function outerIndex(t) {\n    return t.entry >> (t.parent.entryFormat & 0x000F) + 1;\n  },\n  innerIndex: function innerIndex(t) {\n    return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;\n  }\n});\nvar DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\nvar HVAR = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\nvar Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\nvar SignatureBlock = new r.Struct({\n  reserved: new r.Reserved(r.uint16, 2),\n  cbSignature: r.uint32,\n  // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature: new r.Buffer('cbSignature')\n});\nvar DSIG = new r.Struct({\n  ulVersion: r.uint32,\n  // Version number of the DSIG table (0x00000001)\n  usNumSigs: r.uint16,\n  // Number of signatures in the table\n  usFlag: r.uint16,\n  // Permission flags\n  signatures: new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\nvar GaspRange = new r.Struct({\n  rangeMaxPPEM: r.uint16,\n  // Upper limit of range, in ppem\n  rangeGaspBehavior: new r.Bitfield(r.uint16, [\n  // Flags describing desired rasterizer behavior\n  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\nvar gasp = new r.Struct({\n  version: r.uint16,\n  // set to 0\n  numRanges: r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\nvar DeviceRecord = new r.Struct({\n  pixelSize: r.uint8,\n  maximumWidth: r.uint8,\n  widths: new r.Array(r.uint8, function (t) {\n    return t.parent.parent.maxp.numGlyphs;\n  })\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nvar hdmx = new r.Struct({\n  version: r.uint16,\n  numRecords: r.int16,\n  sizeDeviceRecord: r.int32,\n  records: new r.Array(DeviceRecord, 'numRecords')\n});\nvar KernPair = new r.Struct({\n  left: r.uint16,\n  right: r.uint16,\n  value: r.int16\n});\nvar ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: function max(t) {\n    return t.offsets.length && Math.max.apply(Math, t.offsets);\n  }\n});\nvar Kern2Array = new r.Struct({\n  off: function off(t) {\n    return t._startOffset - t.parent.parent._startOffset;\n  },\n  len: function len(t) {\n    return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);\n  },\n  values: new r.LazyArray(r.int16, 'len')\n});\nvar KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    pairs: new r.Array(KernPair, 'nPairs')\n  },\n  2: {\n    rowWidth: r.uint16,\n    leftTable: new r.Pointer(r.uint16, ClassTable, {\n      type: 'parent'\n    }),\n    rightTable: new r.Pointer(r.uint16, ClassTable, {\n      type: 'parent'\n    }),\n    array: new r.Pointer(r.uint16, Kern2Array, {\n      type: 'parent'\n    })\n  },\n  3: {\n    glyphCount: r.uint16,\n    kernValueCount: r.uint8,\n    leftClassCount: r.uint8,\n    rightClassCount: r.uint8,\n    flags: r.uint8,\n    kernValue: new r.Array(r.int16, 'kernValueCount'),\n    leftClass: new r.Array(r.uint8, 'glyphCount'),\n    rightClass: new r.Array(r.uint8, 'glyphCount'),\n    kernIndex: new r.Array(r.uint8, function (t) {\n      return t.leftClassCount * t.rightClassCount;\n    })\n  }\n});\nvar KernTable = new r.VersionedStruct('version', {\n  0: {\n    // Microsoft uses this format\n    subVersion: r.uint16,\n    // Microsoft has an extra sub-table version number\n    length: r.uint16,\n    // Length of the subtable, in bytes\n    format: r.uint8,\n    // Format of subtable\n    coverage: new r.Bitfield(r.uint8, ['horizontal',\n    // 1 if table has horizontal data, 0 if vertical\n    'minimum',\n    // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n    'crossStream',\n    // If set to 1, kerning is perpendicular to the flow of the text\n    'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  },\n  1: {\n    // Apple uses this format\n    length: r.uint32,\n    coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation',\n    // Set if table has variation kerning values\n    'crossStream',\n    // Set if table has cross-stream kerning values\n    'vertical' // Set if table has vertical kerning values\n    ]),\n    format: r.uint8,\n    tupleIndex: r.uint16,\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  }\n});\nvar kern = new r.VersionedStruct(r.uint16, {\n  0: {\n    // Microsoft Version\n    nTables: r.uint16,\n    tables: new r.Array(KernTable, 'nTables')\n  },\n  1: {\n    // Apple Version\n    reserved: new r.Reserved(r.uint16),\n    // the other half of the version number\n    nTables: r.uint32,\n    tables: new r.Array(KernTable, 'nTables')\n  }\n});\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nvar LTSH = new r.Struct({\n  version: r.uint16,\n  numGlyphs: r.uint16,\n  yPels: new r.Array(r.uint8, 'numGlyphs')\n});\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nvar PCLT = new r.Struct({\n  version: r.uint16,\n  fontNumber: r.uint32,\n  pitch: r.uint16,\n  xHeight: r.uint16,\n  style: r.uint16,\n  typeFamily: r.uint16,\n  capHeight: r.uint16,\n  symbolSet: r.uint16,\n  typeface: new r.String(16),\n  characterComplement: new r.String(8),\n  fileName: new r.String(6),\n  strokeWeight: new r.String(1),\n  widthType: new r.String(1),\n  serifStyle: r.uint8,\n  reserved: new r.Reserved(r.uint8)\n});\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nvar Ratio = new r.Struct({\n  bCharSet: r.uint8,\n  // Character set\n  xRatio: r.uint8,\n  // Value to use for x-Ratio\n  yStartRatio: r.uint8,\n  // Starting y-Ratio value\n  yEndRatio: r.uint8 // Ending y-Ratio value\n});\nvar vTable = new r.Struct({\n  yPelHeight: r.uint16,\n  // yPelHeight to which values apply\n  yMax: r.int16,\n  // Maximum value (in pels) for this yPelHeight\n  yMin: r.int16 // Minimum value (in pels) for this yPelHeight\n});\nvar VdmxGroup = new r.Struct({\n  recs: r.uint16,\n  // Number of height records in this group\n  startsz: r.uint8,\n  // Starting yPelHeight\n  endsz: r.uint8,\n  // Ending yPelHeight\n  entries: new r.Array(vTable, 'recs') // The VDMX records\n});\nvar VDMX = new r.Struct({\n  version: r.uint16,\n  // Version number (0 or 1)\n  numRecs: r.uint16,\n  // Number of VDMX groups present\n  numRatios: r.uint16,\n  // Number of aspect ratio groupings\n  ratioRanges: new r.Array(Ratio, 'numRatios'),\n  // Ratio ranges\n  offsets: new r.Array(r.uint16, 'numRatios'),\n  // Offset to the VDMX group for this ratio range\n  groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings\n});\n\n// Vertical Header Table\nvar vhea = new r.Struct({\n  version: r.uint16,\n  // Version number of the Vertical Header Table\n  ascent: r.int16,\n  // The vertical typographic ascender for this font\n  descent: r.int16,\n  // The vertical typographic descender for this font\n  lineGap: r.int16,\n  // The vertical typographic line gap for this font\n  advanceHeightMax: r.int16,\n  // The maximum advance height measurement found in the font\n  minTopSideBearing: r.int16,\n  // The minimum top side bearing measurement found in the font\n  minBottomSideBearing: r.int16,\n  // The minimum bottom side bearing measurement found in the font\n  yMaxExtent: r.int16,\n  caretSlopeRise: r.int16,\n  // Caret slope (rise/run)\n  caretSlopeRun: r.int16,\n  caretOffset: r.int16,\n  // Set value equal to 0 for nonslanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16,\n  // Set to 0\n  numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table\n});\nvar VmtxEntry = new r.Struct({\n  advance: r.uint16,\n  // The advance height of the glyph\n  bearing: r.int16 // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nvar vmtx = new r.Struct({\n  metrics: new r.LazyArray(VmtxEntry, function (t) {\n    return t.parent.vhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;\n  })\n});\nvar shortFrac = new r.Fixed(16, 'BE', 14);\nvar Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\nvar Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\nvar avar = new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\nvar UnboundedArrayAccessor = function () {\n  function UnboundedArrayAccessor(type, stream, parent) {\n    classCallCheck(this, UnboundedArrayAccessor);\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n  UnboundedArrayAccessor.prototype.getItem = function getItem(index) {\n    if (this._items[index] == null) {\n      var pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n    return this._items[index];\n  };\n  UnboundedArrayAccessor.prototype.inspect = function inspect() {\n    return '[UnboundedArray ' + this.type.constructor.name + ']';\n  };\n  return UnboundedArrayAccessor;\n}();\nvar UnboundedArray = function (_r$Array) {\n  inherits(UnboundedArray, _r$Array);\n  function UnboundedArray(type) {\n    classCallCheck(this, UnboundedArray);\n    return possibleConstructorReturn(this, _r$Array.call(this, type, 0));\n  }\n  UnboundedArray.prototype.decode = function decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  };\n  return UnboundedArray;\n}(r.Array);\nvar LookupTable = function LookupTable() {\n  var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16;\n\n  // Helper class that makes internal structures invisible to pointers\n  var Shadow = function () {\n    function Shadow(type) {\n      classCallCheck(this, Shadow);\n      this.type = type;\n    }\n    Shadow.prototype.decode = function decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    };\n    Shadow.prototype.size = function size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    };\n    Shadow.prototype.encode = function encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    };\n    return Shadow;\n  }();\n  ValueType = new Shadow(ValueType);\n  var BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n  var LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n  var LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {\n      return t.lastGlyph - t.firstGlyph + 1;\n    }), {\n      type: 'parent'\n    })\n  });\n  var LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\nfunction StateTable() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n  var entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {\n    return t.nClasses;\n  }));\n  var StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nfunction StateTable1() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n  var ClassLookupTable = new r.Struct({\n    version: function version() {\n      return 8;\n    },\n    // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n  var entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: function newState(t) {\n      return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;\n    },\n    flags: r.uint16\n  }, entryData);\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {\n    return t.nClasses;\n  }));\n  var StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n  return StateHeader1;\n}\nvar BslnSubtable = new r.VersionedStruct('format', {\n  0: {\n    // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n  1: {\n    // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n  2: {\n    // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n  3: {\n    // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\nvar bsln = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\nvar Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\nvar FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), {\n    type: 'parent'\n  }),\n  featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\nvar feat = new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\nvar Axis$1 = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  }\n});\nvar Instance = new r.Struct({\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  },\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, function (t) {\n    return t.parent.axisCount;\n  }),\n  postscriptNameID: new r.Optional(r.uint16, function (t) {\n    return t.parent.instanceSize - t._currentOffset > 0;\n  })\n});\nvar fvar = new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis$1, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\nvar shortFrac$1 = new r.Fixed(16, 'BE', 14);\nvar Offset = function () {\n  function Offset() {\n    classCallCheck(this, Offset);\n  }\n  Offset.decode = function decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  };\n  return Offset;\n}();\nvar gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', {\n    relativeTo: 'offsetToData',\n    allowNull: false\n  }), function (t) {\n    return t.glyphCount + 1;\n  })\n});\nvar ClassTable$1 = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1()\n});\nvar WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\nvar WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\nvar ActionData = new r.VersionedStruct('actionType', {\n  0: {\n    // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n  1: {\n    // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n  2: {\n    // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n  3: {},\n  // Stretch glyph action (no data, not supported by CoreText)\n\n  4: {\n    // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n  5: {\n    // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\nvar Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.actionLength - t._currentOffset;\n  })\n});\nvar PostcompensationAction = new r.Array(Action, r.uint32);\nvar PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\nvar JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable$1, {\n    type: 'parent'\n  }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, {\n    type: 'parent'\n  }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, {\n    type: 'parent',\n    relativeTo: 'wdcOffset'\n  }))\n});\nvar just = new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\nvar LigatureData = {\n  action: r.uint16\n};\nvar ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\nvar InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\nvar SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))\n});\nvar SubtableData = new r.VersionedStruct('type', {\n  0: {\n    // Indic Rearrangement Subtable\n    stateTable: new StateTable()\n  },\n  1: {\n    // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n  2: {\n    // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n  4: {\n    // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable()\n  },\n  5: {\n    // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\nvar Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.length - t._currentOffset;\n  })\n});\nvar FeatureEntry = new r.Struct({\n  featureType: r.uint16,\n  featureSetting: r.uint16,\n  enableFlags: r.uint32,\n  disableFlags: r.uint32\n});\nvar MorxChain = new r.Struct({\n  defaultFlags: r.uint32,\n  chainLength: r.uint32,\n  nFeatureEntries: r.uint32,\n  nSubtables: r.uint32,\n  features: new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables: new r.Array(Subtable, 'nSubtables')\n});\nvar morx = new r.Struct({\n  version: r.uint16,\n  unused: new r.Reserved(r.uint16),\n  nChains: r.uint32,\n  chains: new r.Array(MorxChain, 'nChains')\n});\nvar OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\nvar opbd = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\nvar tables = {};\n// Required Tables\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = NameTable;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n// TrueType Outlines\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n// PostScript Outlines\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n// Bitmap Glyphs\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n// Advanced OpenType Tables\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n// Apple Advanced Typography Tables\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\nvar TableEntry = new r.Struct({\n  tag: new r.String(4),\n  checkSum: r.uint32,\n  offset: new r.Pointer(r.uint32, 'void', {\n    type: 'global'\n  }),\n  length: r.uint32\n});\nvar Directory = new r.Struct({\n  tag: new r.String(4),\n  numTables: r.uint16,\n  searchRange: r.uint16,\n  entrySelector: r.uint16,\n  rangeShift: r.uint16,\n  tables: new r.Array(TableEntry, 'numTables')\n});\nDirectory.process = function () {\n  var tables$$1 = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var table = _ref;\n    tables$$1[table.tag] = table;\n  }\n  this.tables = tables$$1;\n};\nDirectory.preEncode = function (stream) {\n  var tables$$1 = [];\n  for (var tag in this.tables) {\n    var table = this.tables[tag];\n    if (table) {\n      tables$$1.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new r.VoidPointer(tables[tag], table),\n        length: tables[tag].size(table)\n      });\n    }\n  }\n  this.tag = 'true';\n  this.numTables = tables$$1.length;\n  this.tables = tables$$1;\n  this.searchRange = Math.floor(Math.log(this.numTables) / Math.LN2) * 16;\n  this.entrySelector = Math.floor(this.searchRange / Math.LN2);\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nfunction binarySearch(arr, cmp) {\n  var min = 0;\n  var max = arr.length - 1;\n  while (min <= max) {\n    var mid = min + max >> 1;\n    var res = cmp(arr[mid]);\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n}\nfunction range(index, end) {\n  var range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\nvar _class$1;\nfunction _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n// iconv-lite is an optional dependency.\ntry {\n  var iconv = require('iconv-lite');\n} catch (err) {}\nvar CmapProcessor = (_class$1 = function () {\n  function CmapProcessor(cmapTable) {\n    classCallCheck(this, CmapProcessor);\n\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n    // 32-bit subtables\n    [3, 10], [0, 6], [0, 4],\n    // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);\n\n    // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n    if (!this.cmap && iconv) {\n      for (var _iterator = cmapTable.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var cmap = _ref;\n        var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        if (iconv.encodingExists(encoding)) {\n          this.cmap = cmap.table;\n          this.encoding = encoding;\n        }\n      }\n    }\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n  CmapProcessor.prototype.findSubtable = function findSubtable(cmapTable, pairs) {\n    for (var _iterator2 = pairs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var _ref3 = _ref2,\n        platformID = _ref3[0],\n        encodingID = _ref3[1];\n      for (var _iterator3 = cmapTable.tables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref4;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref4 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref4 = _i3.value;\n        }\n        var cmap = _ref4;\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n    return null;\n  };\n  CmapProcessor.prototype.lookup = function lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      var buf = iconv.encode(String.fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n      for (var i = 0; i < buf.length; i++) {\n        codepoint = codepoint << 8 | buf[i];\n      }\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      var gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n      case 4:\n        {\n          var min = 0;\n          var max = cmap.segCount - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            if (codepoint < cmap.startCode.get(mid)) {\n              max = mid - 1;\n            } else if (codepoint > cmap.endCode.get(mid)) {\n              min = mid + 1;\n            } else {\n              var rangeOffset = cmap.idRangeOffset.get(mid);\n              var _gid = void 0;\n              if (rangeOffset === 0) {\n                _gid = codepoint + cmap.idDelta.get(mid);\n              } else {\n                var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                _gid = cmap.glyphIndexArray.get(index) || 0;\n                if (_gid !== 0) {\n                  _gid += cmap.idDelta.get(mid);\n                }\n              }\n              return _gid & 0xffff;\n            }\n          }\n          return 0;\n        }\n      case 8:\n        throw new Error('TODO: cmap format 8');\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n      case 12:\n      case 13:\n        {\n          var _min = 0;\n          var _max = cmap.nGroups - 1;\n          while (_min <= _max) {\n            var _mid = _min + _max >> 1;\n            var group = cmap.groups.get(_mid);\n            if (codepoint < group.startCharCode) {\n              _max = _mid - 1;\n            } else if (codepoint > group.endCharCode) {\n              _min = _mid + 1;\n            } else {\n              if (cmap.version === 12) {\n                return group.glyphID + (codepoint - group.startCharCode);\n              } else {\n                return group.glyphID;\n              }\n            }\n          }\n          return 0;\n        }\n      case 14:\n        throw new Error('TODO: cmap format 14');\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n  CmapProcessor.prototype.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n    var selectors = this.uvs.varSelectors.toArray();\n    var i = binarySearch(selectors, function (x) {\n      return variationSelector - x.varSelector;\n    });\n    var sel = selectors[i];\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, function (x) {\n        return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;\n      });\n    }\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, function (x) {\n        return codepoint - x.unicodeValue;\n      });\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n    return 0;\n  };\n  CmapProcessor.prototype.getCharacterSet = function getCharacterSet() {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n      case 4:\n        {\n          var res = [];\n          var endCodes = cmap.endCode.toArray();\n          for (var i = 0; i < endCodes.length; i++) {\n            var tail = endCodes[i] + 1;\n            var start = cmap.startCode.get(i);\n            res.push.apply(res, range(start, tail));\n          }\n          return res;\n        }\n      case 8:\n        throw new Error('TODO: cmap format 8');\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n      case 12:\n      case 13:\n        {\n          var _res = [];\n          for (var _iterator4 = cmap.groups.toArray(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n            var _ref5;\n            if (_isArray4) {\n              if (_i4 >= _iterator4.length) break;\n              _ref5 = _iterator4[_i4++];\n            } else {\n              _i4 = _iterator4.next();\n              if (_i4.done) break;\n              _ref5 = _i4.value;\n            }\n            var group = _ref5;\n            _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));\n          }\n          return _res;\n        }\n      case 14:\n        throw new Error('TODO: cmap format 14');\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n  CmapProcessor.prototype.codePointsForGlyph = function codePointsForGlyph(gid) {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        {\n          var res = [];\n          for (var i = 0; i < 256; i++) {\n            if (cmap.codeMap.get(i) === gid) {\n              res.push(i);\n            }\n          }\n          return res;\n        }\n      case 4:\n        {\n          var _res2 = [];\n          for (var _i5 = 0; _i5 < cmap.segCount; _i5++) {\n            var end = cmap.endCode.get(_i5);\n            var start = cmap.startCode.get(_i5);\n            var rangeOffset = cmap.idRangeOffset.get(_i5);\n            var delta = cmap.idDelta.get(_i5);\n            for (var c = start; c <= end; c++) {\n              var g = 0;\n              if (rangeOffset === 0) {\n                g = c + delta;\n              } else {\n                var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i5);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) {\n                  g += delta;\n                }\n              }\n              if (g === gid) {\n                _res2.push(c);\n              }\n            }\n          }\n          return _res2;\n        }\n      case 12:\n        {\n          var _res3 = [];\n          for (var _iterator5 = cmap.groups.toArray(), _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n            var _ref6;\n            if (_isArray5) {\n              if (_i6 >= _iterator5.length) break;\n              _ref6 = _iterator5[_i6++];\n            } else {\n              _i6 = _iterator5.next();\n              if (_i6.done) break;\n              _ref6 = _i6.value;\n            }\n            var group = _ref6;\n            if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n              _res3.push(group.startCharCode + (gid - group.glyphID));\n            }\n          }\n          return _res3;\n        }\n      case 13:\n        {\n          var _res4 = [];\n          for (var _iterator6 = cmap.groups.toArray(), _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n            var _ref7;\n            if (_isArray6) {\n              if (_i7 >= _iterator6.length) break;\n              _ref7 = _iterator6[_i7++];\n            } else {\n              _i7 = _iterator6.next();\n              if (_i7.done) break;\n              _ref7 = _i7.value;\n            }\n            var _group = _ref7;\n            if (gid === _group.glyphID) {\n              _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));\n            }\n          }\n          return _res4;\n        }\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n  return CmapProcessor;\n}(), _applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype), _class$1);\nvar KernProcessor = function () {\n  function KernProcessor(font) {\n    classCallCheck(this, KernProcessor);\n    this.kern = font.kern;\n  }\n  KernProcessor.prototype.process = function process(glyphs, positions) {\n    for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      var left = glyphs[glyphIndex].id;\n      var right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  };\n  KernProcessor.prototype.getKerning = function getKerning(left, right) {\n    var res = 0;\n    for (var _iterator = this.kern.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var table = _ref;\n      if (table.coverage.crossStream) {\n        continue;\n      }\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n          break;\n        default:\n          throw new Error('Unsupported kerning table version ' + table.version);\n      }\n      var val = 0;\n      var s = table.subtable;\n      switch (table.format) {\n        case 0:\n          var pairIdx = binarySearch(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n          break;\n        case 2:\n          var leftOffset = 0,\n            rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n          var index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n        default:\n          throw new Error('Unsupported kerning sub-table format ' + table.format);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n    return res;\n  };\n  return KernProcessor;\n}();\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\n\nvar UnicodeLayoutEngine = function () {\n  function UnicodeLayoutEngine(font) {\n    classCallCheck(this, UnicodeLayoutEngine);\n    this.font = font;\n  }\n  UnicodeLayoutEngine.prototype.positionGlyphs = function positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    var clusterStart = 0;\n    var clusterEnd = 0;\n    for (var index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.isMark) {\n        // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n        clusterStart = clusterEnd = index;\n      }\n    }\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n    return positions;\n  };\n  UnicodeLayoutEngine.prototype.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    var base = glyphs[clusterStart];\n    var baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    }\n    var xOffset = -positions[clusterStart].xAdvance;\n    var yOffset = 0;\n    var yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (var index = clusterStart + 1; index <= clusterEnd; index++) {\n      var mark = glyphs[index];\n      var markBox = mark.cbox;\n      var position = positions[index];\n      var combiningClass = this.getCombiningClass(mark.codePoints[0]);\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n          default:\n            // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n    return;\n  };\n  UnicodeLayoutEngine.prototype.getCombiningClass = function getCombiningClass(codePoint) {\n    var combiningClass = unicode.getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) {\n        // virama\n        return 'Below_Right';\n      }\n    }\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22':\n        // meteg\n        return 'Below';\n      case 'CCC23':\n        // rafe\n        return 'Attached_Above';\n      case 'CCC24':\n        // shin dot\n        return 'Above_Right';\n      case 'CCC25': // sin dot\n      case 'CCC19':\n        // holam\n        return 'Above_Left';\n      case 'CCC26':\n        // point varika\n        return 'Above';\n      case 'CCC21':\n        // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36':\n        // superscript alaph\n        return 'Above';\n      case 'CCC29': // kasratan\n      case 'CCC32':\n        // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103':\n        // sara u / sara uu\n        return 'Below_Right';\n      case 'CCC107':\n        // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118':\n        // sign u / sign uu\n        return 'Below';\n      case 'CCC122':\n        // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132':\n        // sign u\n        return 'Below';\n      case 'CCC130':\n        // sign i\n        return 'Above';\n    }\n    return combiningClass;\n  };\n  return UnicodeLayoutEngine;\n}();\n\n/**\n * Represents a glyph bounding box\n */\nvar BBox = function () {\n  function BBox() {\n    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;\n    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;\n    classCallCheck(this, BBox);\n\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n\n  BBox.prototype.addPoint = function addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  };\n  BBox.prototype.copy = function copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  };\n  createClass(BBox, [{\n    key: \"width\",\n    get: function get$$1() {\n      return this.maxX - this.minX;\n    }\n\n    /**\n     * The height of the bounding box\n     * @type {number}\n     */\n  }, {\n    key: \"height\",\n    get: function get$$1() {\n      return this.maxY - this.minY;\n    }\n  }]);\n  return BBox;\n}();\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nvar UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\nvar OPENTYPE_SCRIPTS = {};\nfor (var script in UNICODE_SCRIPTS) {\n  var tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (var _iterator = tag, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var t = _ref;\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\nfunction fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\nfunction forString(string) {\n  var len = string.length;\n  var idx = 0;\n  while (idx < len) {\n    var code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      var next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n    var _script = unicode.getScript(code);\n    if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script];\n    }\n  }\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n// The scripts in this map are written from right to left\nvar RTL = {\n  arab: true,\n  // Arabic\n  hebr: true,\n  // Hebrew\n  syrc: true,\n  // Syriac\n  thaa: true,\n  // Thaana\n  cprt: true,\n  // Cypriot Syllabary\n  khar: true,\n  // Kharosthi\n  phnx: true,\n  // Phoenician\n  'nko ': true,\n  // N'Ko\n  lydi: true,\n  // Lydian\n  avst: true,\n  // Avestan\n  armi: true,\n  // Imperial Aramaic\n  phli: true,\n  // Inscriptional Pahlavi\n  prti: true,\n  // Inscriptional Parthian\n  sarb: true,\n  // Old South Arabian\n  orkh: true,\n  // Old Turkic, Orkhon Runic\n  samr: true,\n  // Samaritan\n  mand: true,\n  // Mandaic, Mandaean\n  merc: true,\n  // Meroitic Cursive\n  mero: true,\n  // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,\n  // Manichaean\n  mend: true,\n  // Mende Kikakui\n  nbat: true,\n  // Nabataean\n  narb: true,\n  // Old North Arabian\n  palm: true,\n  // Palmyrene\n  phlp: true // Psalter Pahlavi\n};\nfunction direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n  return 'ltr';\n}\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\n\nvar GlyphRun = function () {\n  function GlyphRun(glyphs, features, script, language, direction$$1) {\n    classCallCheck(this, GlyphRun);\n\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * An array of indices to indices in the input string for each glyph\n     * @type {number[]}\n     */\n    this.stringIndices = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction$$1 || direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var tag = _ref;\n        this.features[tag] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n\n  createClass(GlyphRun, [{\n    key: 'advanceWidth',\n    get: function get$$1() {\n      var width = 0;\n      for (var _iterator2 = this.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var position = _ref2;\n        width += position.xAdvance;\n      }\n      return width;\n    }\n\n    /**\n     * The total advance height of the run.\n     * @type {number}\n     */\n  }, {\n    key: 'advanceHeight',\n    get: function get$$1() {\n      var height = 0;\n      for (var _iterator3 = this.positions, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var position = _ref3;\n        height += position.yAdvance;\n      }\n      return height;\n    }\n\n    /**\n     * The bounding box containing all glyphs in the run.\n     * @type {BBox}\n     */\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      var bbox = new BBox();\n      var x = 0;\n      var y = 0;\n      for (var index = 0; index < this.glyphs.length; index++) {\n        var glyph = this.glyphs[index];\n        var p = this.positions[index];\n        var b = glyph.bbox;\n        bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n        bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n        x += p.xAdvance;\n        y += p.yAdvance;\n      }\n      return bbox;\n    }\n  }]);\n  return GlyphRun;\n}();\n\n/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nvar GlyphPosition = function GlyphPosition() {\n  var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  classCallCheck(this, GlyphPosition);\n\n  /**\n   * The amount to move the virtual pen in the X direction after rendering this glyph.\n   * @type {number}\n   */\n  this.xAdvance = xAdvance;\n\n  /**\n   * The amount to move the virtual pen in the Y direction after rendering this glyph.\n   * @type {number}\n   */\n  this.yAdvance = yAdvance;\n\n  /**\n   * The offset from the pen position in the X direction at which to render this glyph.\n   * @type {number}\n   */\n  this.xOffset = xOffset;\n\n  /**\n   * The offset from the pen position in the Y direction at which to render this glyph.\n   * @type {number}\n   */\n  this.yOffset = yOffset;\n};\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nvar features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: {\n    // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\nvar feature = function feature(name, selector) {\n  return [features[name].code, features[name][selector]];\n};\nvar OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'),\n  // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'),\n  // ??\n  numr: feature('fractions', 'diagonalFractions'),\n  // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'),\n  // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'),\n  // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'),\n  // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n  init: feature('smartSwash', 'wordInitialSwashes'),\n  // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'),\n  // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'),\n  // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'),\n  // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'),\n  // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'),\n  // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'),\n  // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'),\n  // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'),\n  // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'),\n  //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (var i = 1; i <= 99; i++) {\n  OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nvar AATMapping = {};\nfor (var ot in OTMapping) {\n  var aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nfunction mapOTToAAT(features) {\n  var res = {};\n  for (var k in features) {\n    var r$$1 = void 0;\n    if (r$$1 = OTMapping[k]) {\n      if (res[r$$1[0]] == null) {\n        res[r$$1[0]] = {};\n      }\n      res[r$$1[0]][r$$1[1]] = features[k];\n    }\n  }\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  var type = f[0],\n    setting = f[1];\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nfunction mapAATToOT(features) {\n  var res = {};\n  if (Array.isArray(features)) {\n    for (var k = 0; k < features.length; k++) {\n      var r$$1 = void 0;\n      var f = mapFeatureStrings(features[k]);\n      if (r$$1 = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r$$1] = true;\n      }\n    }\n  } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n    for (var type in features) {\n      var _feature = features[type];\n      for (var setting in _feature) {\n        var _r = void 0;\n        var _f = mapFeatureStrings([type, setting]);\n        if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {\n          res[_r] = true;\n        }\n      }\n    }\n  }\n  return Object.keys(res);\n}\nvar _class$3;\nfunction _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nvar AATLookupTable = (_class$3 = function () {\n  function AATLookupTable(table) {\n    classCallCheck(this, AATLookupTable);\n    this.table = table;\n  }\n  AATLookupTable.prototype.lookup = function lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        // simple array format\n        return this.table.values.getItem(glyph);\n      case 2: // segment format\n      case 4:\n        {\n          var min = 0;\n          var max = this.table.binarySearchHeader.nUnits - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.firstGlyph === 0xffff) {\n              return null;\n            }\n            if (glyph < seg.firstGlyph) {\n              max = mid - 1;\n            } else if (glyph > seg.lastGlyph) {\n              min = mid + 1;\n            } else {\n              if (this.table.version === 2) {\n                return seg.value;\n              } else {\n                return seg.values[glyph - seg.firstGlyph];\n              }\n            }\n          }\n          return null;\n        }\n      case 6:\n        {\n          // lookup single\n          var _min = 0;\n          var _max = this.table.binarySearchHeader.nUnits - 1;\n          while (_min <= _max) {\n            var mid = _min + _max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.glyph === 0xffff) {\n              return null;\n            }\n            if (glyph < seg.glyph) {\n              _max = mid - 1;\n            } else if (glyph > seg.glyph) {\n              _min = mid + 1;\n            } else {\n              return seg.value;\n            }\n          }\n          return null;\n        }\n      case 8:\n        // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n  };\n  AATLookupTable.prototype.glyphsForValue = function glyphsForValue(classValue) {\n    var res = [];\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4:\n        {\n          for (var _iterator = this.table.segments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n            var segment = _ref;\n            if (this.table.version === 2 && segment.value === classValue) {\n              res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));\n            } else {\n              for (var index = 0; index < segment.values.length; index++) {\n                if (segment.values[index] === classValue) {\n                  res.push(segment.firstGlyph + index);\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 6:\n        {\n          // lookup single\n          for (var _iterator2 = this.table.segments, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref2;\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref2 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref2 = _i2.value;\n            }\n            var _segment = _ref2;\n            if (_segment.value === classValue) {\n              res.push(_segment.glyph);\n            }\n          }\n          break;\n        }\n      case 8:\n        {\n          // lookup trimmed\n          for (var i = 0; i < this.table.values.length; i++) {\n            if (this.table.values[i] === classValue) {\n              res.push(this.table.firstGlyph + i);\n            }\n          }\n          break;\n        }\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n    return res;\n  };\n  return AATLookupTable;\n}(), _applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype), _class$3);\nvar START_OF_TEXT_STATE = 0;\nvar END_OF_TEXT_CLASS = 0;\nvar OUT_OF_BOUNDS_CLASS = 1;\nvar DELETED_GLYPH_CLASS = 2;\nvar DONT_ADVANCE = 0x4000;\nvar AATStateMachine = function () {\n  function AATStateMachine(stateTable) {\n    classCallCheck(this, AATStateMachine);\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n  AATStateMachine.prototype.process = function process(glyphs, reverse, processEntry) {\n    var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    var index = reverse ? glyphs.length - 1 : 0;\n    var dir = reverse ? -1 : 1;\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      var glyph = null;\n      var classCode = OUT_OF_BOUNDS_CLASS;\n      var shouldAdvance = true;\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) {\n          // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n      var row = this.stateTable.stateArray.getItem(currentState);\n      var entryIndex = row[classCode];\n      var entry = this.stateTable.entryTable.getItem(entryIndex);\n      if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n    return glyphs;\n  };\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n\n  AATStateMachine.prototype.traverse = function traverse(opts) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    if (visited.has(state)) {\n      return;\n    }\n    visited.add(state);\n    var _stateTable = this.stateTable,\n      nClasses = _stateTable.nClasses,\n      stateArray = _stateTable.stateArray,\n      entryTable = _stateTable.entryTable;\n    var row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (var classCode = 4; classCode < nClasses; classCode++) {\n      var entryIndex = row[classCode];\n      var entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (var _iterator = this.lookupTable.glyphsForValue(classCode), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var glyph = _ref;\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  };\n  return AATStateMachine;\n}();\nvar _class$2;\nfunction _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n// indic replacement flags\nvar MARK_FIRST = 0x8000;\nvar MARK_LAST = 0x2000;\nvar VERB = 0x000f;\n\n// contextual substitution and glyph insertion flag\nvar SET_MARK = 0x8000;\n\n// ligature entry flags\nvar SET_COMPONENT = 0x8000;\nvar PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nvar LAST_MASK = 0x80000000;\nvar STORE_MASK = 0x40000000;\nvar OFFSET_MASK = 0x3fffffff;\nvar REVERSE_DIRECTION = 0x400000;\nvar CURRENT_INSERT_BEFORE = 0x0800;\nvar MARKED_INSERT_BEFORE = 0x0400;\nvar CURRENT_INSERT_COUNT = 0x03e0;\nvar MARKED_INSERT_COUNT = 0x001f;\nvar AATMorxProcessor = (_class$2 = function () {\n  function AATMorxProcessor(font) {\n    classCallCheck(this, AATMorxProcessor);\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:true}}\n\n  AATMorxProcessor.prototype.process = function process(glyphs) {\n    var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (var _iterator = this.morx.chains, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var chain = _ref;\n      var flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (var _iterator2 = chain.features, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var feature = _ref2;\n        var f = void 0;\n        if ((f = features[feature.featureType]) && f[feature.featureSetting]) {\n          flags &= feature.disableFlags;\n          flags |= feature.enableFlags;\n        }\n      }\n      for (var _iterator3 = chain.subtables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var subtable = _ref3;\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    var index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n      index--;\n    }\n    return glyphs;\n  };\n  AATMorxProcessor.prototype.processSubtable = function processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n    var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  };\n  AATMorxProcessor.prototype.getStateMachine = function getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  };\n  AATMorxProcessor.prototype.getProcessor = function getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error('Invalid morx subtable type: ' + this.subtable.type);\n    }\n  };\n  AATMorxProcessor.prototype.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  };\n  AATMorxProcessor.prototype.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {\n    var subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      var lookup = subsitutions.getItem(entry.markIndex);\n      var lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n    if (entry.currentIndex !== 0xffff) {\n      var _lookup = subsitutions.getItem(entry.currentIndex);\n      var _lookupTable = new AATLookupTable(_lookup);\n      glyph = this.glyphs[index];\n      var gid = _lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  };\n  AATMorxProcessor.prototype.processLigature = function processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n    if (entry.flags & PERFORM_ACTION) {\n      var _ligatureStack;\n      var actions = this.subtable.table.ligatureActions;\n      var components = this.subtable.table.components;\n      var ligatureList = this.subtable.table.ligatureList;\n      var actionIndex = entry.action;\n      var last = false;\n      var ligatureIndex = 0;\n      var codePoints = [];\n      var ligatureGlyphs = [];\n      while (!last) {\n        var _codePoints;\n        var componentGlyph = this.ligatureStack.pop();\n        (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);\n        var action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        var store = !!(action & STORE_MASK);\n        var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n        var component = components.getItem(offset);\n        ligatureIndex += component;\n        if (last || store) {\n          var ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);\n    }\n  };\n  AATMorxProcessor.prototype.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {\n    var lookupTable = new AATLookupTable(subtable.table.lookupTable);\n    for (index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        var gid = lookupTable.lookup(glyph.id);\n        if (gid) {\n          // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  };\n  AATMorxProcessor.prototype._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    var _glyphs;\n    var stringIndex = this.glyphs[glyphIndex].stringIndex;\n    var insertions = [];\n    while (count--) {\n      var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n    if (!isBefore) {\n      glyphIndex++;\n    }\n    (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));\n  };\n  AATMorxProcessor.prototype.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n    if (entry.markedInsertIndex !== 0xffff) {\n      var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n    if (entry.currentInsertIndex !== 0xffff) {\n      var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);\n    }\n  };\n  AATMorxProcessor.prototype.getSupportedFeatures = function getSupportedFeatures() {\n    var features = [];\n    for (var _iterator4 = this.morx.chains, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n      var chain = _ref4;\n      for (var _iterator5 = chain.features, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n        var feature = _ref5;\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n    return features;\n  };\n  AATMorxProcessor.prototype.generateInputs = function generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n    return this.inputCache[gid] || [];\n  };\n  AATMorxProcessor.prototype.generateInputCache = function generateInputCache() {\n    this.inputCache = {};\n    for (var _iterator6 = this.morx.chains, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n      var _ref6;\n      if (_isArray6) {\n        if (_i6 >= _iterator6.length) break;\n        _ref6 = _iterator6[_i6++];\n      } else {\n        _i6 = _iterator6.next();\n        if (_i6.done) break;\n        _ref6 = _i6.value;\n      }\n      var chain = _ref6;\n      var flags = chain.defaultFlags;\n      for (var _iterator7 = chain.subtables, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n        var _ref7;\n        if (_isArray7) {\n          if (_i7 >= _iterator7.length) break;\n          _ref7 = _iterator7[_i7++];\n        } else {\n          _i7 = _iterator7.next();\n          if (_i7.done) break;\n          _ref7 = _i7.value;\n        }\n        var subtable = _ref7;\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  };\n  AATMorxProcessor.prototype.generateInputsForSubtable = function generateInputsForSubtable(subtable) {\n    var _this = this;\n\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n    var reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n    this.subtable = subtable;\n    this.ligatureStack = [];\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n    var input = [];\n    var stack = [];\n    this.glyphs = [];\n    stateMachine.traverse({\n      enter: function enter(glyph, entry) {\n        var glyphs = _this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: _this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        var g = _this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        var count = 0;\n        var found = 0;\n        for (var i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n        if (count === 1) {\n          var result = input.map(function (g) {\n            return g.id;\n          });\n          var _cache = _this.inputCache[found];\n          if (_cache) {\n            _cache.push(result);\n          } else {\n            _this.inputCache[found] = [result];\n          }\n        }\n      },\n      exit: function exit() {\n        var _stack$pop = stack.pop();\n        _this.glyphs = _stack$pop.glyphs;\n        _this.ligatureStack = _stack$pop.ligatureStack;\n        input.pop();\n      }\n    });\n  };\n  return AATMorxProcessor;\n}(), _applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], Object.getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype), _class$2);\nfunction swap(glyphs, rangeA, rangeB) {\n  var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n  var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));\n  if (reverseA) {\n    start.reverse();\n  }\n  glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));\n  return glyphs;\n}\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  switch (verb) {\n    case 0:\n      // no change\n      return glyphs;\n    case 1:\n      // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n    case 2:\n      // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n    case 3:\n      // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n    case 4:\n      // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n    case 5:\n      // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n    case 6:\n      // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n    case 7:\n      // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n    case 8:\n      // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n    case 9:\n      // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n    case 10:\n      // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n    case 11:\n      // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n    case 12:\n      // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n    case 13:\n      // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n    case 14:\n      // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n    case 15:\n      // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n    default:\n      throw new Error('Unknown verb: ' + verb);\n  }\n}\nvar AATLayoutEngine = function () {\n  function AATLayoutEngine(font) {\n    classCallCheck(this, AATLayoutEngine);\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n  AATLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n    this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));\n  };\n  AATLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  };\n  AATLayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var glyphStrings = this.morxProcessor.generateInputs(gid);\n    var result = new Set();\n    for (var _iterator = glyphStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var glyphs = _ref;\n      this._addStrings(glyphs, 0, result, '');\n    }\n    return result;\n  };\n  AATLayoutEngine.prototype._addStrings = function _addStrings(glyphs, index, strings, string) {\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n    for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var codePoint = _ref2;\n      var s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  };\n  return AATLayoutEngine;\n}();\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\n\nvar ShapingPlan = function () {\n  function ShapingPlan(font, script, direction$$1) {\n    classCallCheck(this, ShapingPlan);\n    this.font = font;\n    this.script = script;\n    this.direction = direction$$1;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n\n  ShapingPlan.prototype._addFeatures = function _addFeatures(features, global) {\n    var stageIndex = this.stages.length - 1;\n    var stage = this.stages[stageIndex];\n    for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var feature = _ref;\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Add features to the last stage\n   */\n\n  ShapingPlan.prototype.add = function add(arg) {\n    var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  };\n\n  /**\n   * Add a new stage\n   */\n\n  ShapingPlan.prototype.addStage = function addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  };\n  ShapingPlan.prototype.setFeatureOverrides = function setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      for (var tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          var stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  };\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n\n  ShapingPlan.prototype.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {\n    for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var glyph = _ref2;\n      for (var feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n\n  ShapingPlan.prototype.process = function process(processor, glyphs, positions) {\n    for (var _iterator3 = this.stages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n      var stage = _ref3;\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  };\n  return ShapingPlan;\n}();\nvar _class$4;\nvar _temp;\nvar VARIATION_FEATURES = ['rvrn'];\nvar COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nvar FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nvar HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nvar DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\nvar DefaultShaper = (_temp = _class$4 = function () {\n  function DefaultShaper() {\n    classCallCheck(this, DefaultShaper);\n  }\n  DefaultShaper.plan = function plan(_plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(_plan);\n    this.planFeatures(_plan);\n    this.planPostprocessing(_plan, features);\n\n    // Assign the global features to all the glyphs\n    _plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(_plan, glyphs);\n  };\n  DefaultShaper.planPreprocessing = function planPreprocessing(plan) {\n    plan.add({\n      global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),\n      local: FRACTIONAL_FEATURES\n    });\n  };\n  DefaultShaper.planFeatures = function planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  };\n  DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {\n    plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));\n    plan.setFeatureOverrides(userFeatures);\n  };\n  DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (var i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) {\n        // fraction slash\n        var start = i;\n        var end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  };\n  return DefaultShaper;\n}(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);\nvar type = \"Buffer\";\nvar data = [0, 1, 16, 0, 0, 0, 0, 0, 0, 0, 49, 160, 1, 149, 1, 106, 254, 237, 216, 43, 79, 3, 65, 20, 5, 224, 217, 7, 77, 41, 138, 127, 64, 37, 146, 4, 131, 37, 4, 143, 68, 33, 193, 224, 192, 129, 3, 137, 196, 32, 81, 4, 73, 80, 72, 28, 18, 137, 194, 224, 144, 224, 48, 156, 210, 153, 228, 102, 152, 217, 206, 238, 206, 62, 40, 231, 38, 95, 102, 186, 219, 121, 246, 238, 35, 29, 167, 74, 173, 194, 26, 108, 192, 88, 127, 254, 43, 229, 14, 236, 194, 30, 236, 195, 33, 28, 195, 41, 156, 195, 5, 92, 194, 21, 92, 139, 118, 183, 112, 167, 63, 79, 60, 136, 250, 163, 168, 211, 124, 123, 130, 35, 237, 25, 94, 224, 181, 7, 243, 106, 203, 155, 168, 191, 247, 96, 62, 68, 68, 68, 68, 68, 68, 68, 68, 77, 153, 252, 255, 243, 209, 131, 121, 16, 17, 17, 17, 17, 205, 179, 124, 113, 234, 108, 216, 140, 45, 244, 125, 2, 247, 240, 9, 235, 35, 165, 14, 70, 211, 115, 55, 40, 183, 149, 82, 155, 195, 230, 214, 247, 5, 89, 246, 251, 248, 18, 142, 45, 59, 142, 119, 101, 37, 77, 126, 48, 24, 255, 57, 18, 15, 121, 222, 85, 143, 21, 185, 238, 55, 179, 228, 142, 210, 230, 106, 83, 150, 108, 215, 167, 144, 115, 146, 107, 180, 247, 42, 100, 125, 49, 84, 217, 219, 54, 100, 86, 61, 100, 29, 174, 188, 50, 231, 149, 40, 125, 17, 227, 58, 144, 227, 133, 132, 92, 179, 60, 86, 55, 22, 28, 253, 15, 180, 162, 223, 63, 52, 39, 50, 209, 167, 221, 110, 16, 97, 254, 170, 196, 92, 92, 121, 82, 55, 247, 138, 246, 198, 117, 126, 214, 184, 161, 209, 245, 117, 87, 55, 247, 124, 237, 103, 221, 235, 203, 228, 158, 252, 174, 235, 217, 230, 155, 87, 217, 28, 50, 247, 100, 223, 111, 92, 37, 18, 171, 173, 221, 79, 172, 103, 113, 215, 57, 226, 123, 255, 48, 235, 111, 43, 143, 235, 230, 115, 209, 250, 154, 232, 219, 247, 190, 22, 59, 98, 237, 113, 90, 113, 158, 190, 107, 47, 177, 74, 83, 79, 244, 88, 33, 239, 48, 105, 65, 255, 174, 241, 204, 88, 161, 115, 45, 243, 124, 47, 234, 211, 126, 158, 184, 230, 103, 215, 237, 251, 101, 157, 240, 237, 99, 19, 121, 247, 13];\nvar trieData = {\n  type: type,\n  data: data\n};\nvar trie = new UnicodeTrie(new Uint8Array(trieData.data));\nvar FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\nvar ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\nvar ISOL = 'isol';\nvar FINA = 'fina';\nvar FIN2 = 'fin2';\nvar FIN3 = 'fin3';\nvar MEDI = 'medi';\nvar MED2 = 'med2';\nvar INIT = 'init';\nvar NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nvar STATE_TABLE = [\n//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]],\n// State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]],\n// State 2: prev was D/L in ISOL form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]],\n// State 3: prev was D in FINA form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]],\n// State 4: prev was FINA ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]],\n// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]],\n// State 6: prev was DALATH/RISH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\n\nvar ArabicShaper = function (_DefaultShaper) {\n  inherits(ArabicShaper, _DefaultShaper);\n  function ArabicShaper() {\n    classCallCheck(this, ArabicShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n  ArabicShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (var i = 0; i < FEATURES.length; i++) {\n      var feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n    plan.addStage('mset');\n  };\n  ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    _DefaultShaper.assignFeatures.call(this, plan, glyphs);\n    var prev = -1;\n    var state = 0;\n    var actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (var i = 0; i < glyphs.length; i++) {\n      var curAction = void 0,\n        prevAction = void 0;\n      var glyph = glyphs[i];\n      var type$$1 = getShapingClass(glyph.codePoints[0]);\n      if (type$$1 === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n      var _STATE_TABLE$state$ty = STATE_TABLE[state][type$$1];\n      prevAction = _STATE_TABLE$state$ty[0];\n      curAction = _STATE_TABLE$state$ty[1];\n      state = _STATE_TABLE$state$ty[2];\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (var index = 0; index < glyphs.length; index++) {\n      var feature = void 0;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n  return ArabicShaper;\n}(DefaultShaper);\nfunction getShapingClass(codePoint) {\n  var res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n  var category = unicode.getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n  return ShapingClasses.Non_Joining;\n}\nvar GlyphIterator = function () {\n  function GlyphIterator(glyphs, options) {\n    classCallCheck(this, GlyphIterator);\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n  GlyphIterator.prototype.reset = function reset() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  };\n  GlyphIterator.prototype.shouldIgnore = function shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  };\n  GlyphIterator.prototype.move = function move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n    return this.glyphs[this.index];\n  };\n  GlyphIterator.prototype.next = function next() {\n    return this.move(+1);\n  };\n  GlyphIterator.prototype.prev = function prev() {\n    return this.move(-1);\n  };\n  GlyphIterator.prototype.peek = function peek() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var idx = this.index;\n    var res = this.increment(count);\n    this.index = idx;\n    return res;\n  };\n  GlyphIterator.prototype.peekIndex = function peekIndex() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var idx = this.index;\n    this.increment(count);\n    var res = this.index;\n    this.index = idx;\n    return res;\n  };\n  GlyphIterator.prototype.increment = function increment() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n    return this.glyphs[this.index];\n  };\n  createClass(GlyphIterator, [{\n    key: \"cur\",\n    get: function get$$1() {\n      return this.glyphs[this.index] || null;\n    }\n  }]);\n  return GlyphIterator;\n}();\nvar DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\nvar OTProcessor = function () {\n  function OTProcessor(font, table) {\n    classCallCheck(this, OTProcessor);\n    this.font = font;\n    this.table = table;\n    this.script = null;\n    this.scriptTag = null;\n    this.language = null;\n    this.languageTag = null;\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n  OTProcessor.prototype.findScript = function findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n    for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var s = _ref;\n      for (var _iterator2 = this.table.scriptList, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var entry = _ref2;\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n    return null;\n  };\n  OTProcessor.prototype.selectScript = function selectScript(script, language, direction$$1) {\n    var changed = false;\n    var entry = void 0;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n      if (!entry) {\n        return this.scriptTag;\n      }\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n    if (!direction$$1 || direction$$1 !== this.direction) {\n      this.direction = direction$$1 || direction(script);\n    }\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n      for (var _iterator3 = this.script.langSysRecords, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var lang = _ref3;\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (var _iterator4 = this.language.featureIndexes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n          var _ref4;\n          if (_isArray4) {\n            if (_i4 >= _iterator4.length) break;\n            _ref4 = _iterator4[_i4++];\n          } else {\n            _i4 = _iterator4.next();\n            if (_i4.done) break;\n            _ref4 = _i4.value;\n          }\n          var featureIndex = _ref4;\n          var record = this.table.featureList[featureIndex];\n          var substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n    return this.scriptTag;\n  };\n  OTProcessor.prototype.lookupsForFeatures = function lookupsForFeatures() {\n    var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var exclude = arguments[1];\n    var lookups = [];\n    for (var _iterator5 = userFeatures, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n      var tag = _ref5;\n      var feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n      for (var _iterator6 = feature.lookupListIndexes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n        var _ref6;\n        if (_isArray6) {\n          if (_i6 >= _iterator6.length) break;\n          _ref6 = _iterator6[_i6++];\n        } else {\n          _i6 = _iterator6.next();\n          if (_i6.done) break;\n          _ref6 = _i6.value;\n        }\n        var lookupIndex = _ref6;\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n    lookups.sort(function (a, b) {\n      return a.index - b.index;\n    });\n    return lookups;\n  };\n  OTProcessor.prototype.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n    var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    var substitutions = record.featureTableSubstitution.substitutions;\n    for (var _iterator7 = substitutions, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n      var _ref7;\n      if (_isArray7) {\n        if (_i7 >= _iterator7.length) break;\n        _ref7 = _iterator7[_i7++];\n      } else {\n        _i7 = _iterator7.next();\n        if (_i7.done) break;\n        _ref7 = _i7.value;\n      }\n      var substitution = _ref7;\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n    return null;\n  };\n  OTProcessor.prototype.findVariationsIndex = function findVariationsIndex(coords) {\n    var variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n    var records = variations.featureVariationRecords;\n    for (var i = 0; i < records.length; i++) {\n      var conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  OTProcessor.prototype.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {\n    return conditions.every(function (condition) {\n      var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  };\n  OTProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    var lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  };\n  OTProcessor.prototype.applyLookups = function applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n    for (var _iterator8 = lookups, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {\n      var _ref8;\n      if (_isArray8) {\n        if (_i8 >= _iterator8.length) break;\n        _ref8 = _iterator8[_i8++];\n      } else {\n        _i8 = _iterator8.next();\n        if (_i8.done) break;\n        _ref8 = _i8.value;\n      }\n      var _ref9 = _ref8,\n        feature = _ref9.feature,\n        lookup = _ref9.lookup;\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n        for (var _iterator9 = lookup.subTables, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {\n          var _ref10;\n          if (_isArray9) {\n            if (_i9 >= _iterator9.length) break;\n            _ref10 = _iterator9[_i9++];\n          } else {\n            _i9 = _iterator9.next();\n            if (_i9.done) break;\n            _ref10 = _i9.value;\n          }\n          var table = _ref10;\n          var res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n        this.glyphIterator.next();\n      }\n    }\n  };\n  OTProcessor.prototype.applyLookup = function applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  };\n  OTProcessor.prototype.applyLookupList = function applyLookupList(lookupRecords) {\n    var options = this.glyphIterator.options;\n    var glyphIndex = this.glyphIterator.index;\n    for (var _iterator10 = lookupRecords, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {\n      var _ref11;\n      if (_isArray10) {\n        if (_i10 >= _iterator10.length) break;\n        _ref11 = _iterator10[_i10++];\n      } else {\n        _i10 = _iterator10.next();\n        if (_i10.done) break;\n        _ref11 = _i10.value;\n      }\n      var lookupRecord = _ref11;\n\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (var _iterator11 = lookup.subTables, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {\n        var _ref12;\n        if (_isArray11) {\n          if (_i11 >= _iterator11.length) break;\n          _ref12 = _iterator11[_i11++];\n        } else {\n          _i11 = _iterator11.next();\n          if (_i11.done) break;\n          _ref12 = _i11.value;\n        }\n        var table = _ref12;\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  };\n  OTProcessor.prototype.coverageIndex = function coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n      case 2:\n        for (var _iterator12 = coverage.rangeRecords, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {\n          var _ref13;\n          if (_isArray12) {\n            if (_i12 >= _iterator12.length) break;\n            _ref13 = _iterator12[_i12++];\n          } else {\n            _i12 = _iterator12.next();\n            if (_i12.done) break;\n            _ref13 = _i12.value;\n          }\n          var range = _ref13;\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n        break;\n    }\n    return -1;\n  };\n  OTProcessor.prototype.match = function match(sequenceIndex, sequence, fn, matched) {\n    var pos = this.glyphIterator.index;\n    var glyph = this.glyphIterator.increment(sequenceIndex);\n    var idx = 0;\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n    return matched || true;\n  };\n  OTProcessor.prototype.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      return component === glyph.id;\n    });\n  };\n  OTProcessor.prototype.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {\n    var _this = this;\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      // If the current feature doesn't apply to this glyph,\n      if (!(_this.currentFeature in glyph.features)) {\n        return false;\n      }\n      return component === glyph.id;\n    }, []);\n  };\n  OTProcessor.prototype.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {\n    var _this2 = this;\n    return this.match(sequenceIndex, sequence, function (coverage, glyph) {\n      return _this2.coverageIndex(coverage, glyph.id) >= 0;\n    });\n  };\n  OTProcessor.prototype.getClassID = function getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        // Class array\n        var i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n        break;\n      case 2:\n        for (var _iterator13 = classDef.classRangeRecord, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {\n          var _ref14;\n          if (_isArray13) {\n            if (_i13 >= _iterator13.length) break;\n            _ref14 = _iterator13[_i13++];\n          } else {\n            _i13 = _iterator13.next();\n            if (_i13.done) break;\n            _ref14 = _i13.value;\n          }\n          var range = _ref14;\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n        break;\n    }\n    return 0;\n  };\n  OTProcessor.prototype.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {\n    var _this3 = this;\n    return this.match(sequenceIndex, sequence, function (classID, glyph) {\n      return classID === _this3.getClassID(glyph.id, classDef);\n    });\n  };\n  OTProcessor.prototype.applyContext = function applyContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n        var set$$1 = table.ruleSets[index];\n        for (var _iterator14 = set$$1, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {\n          var _ref15;\n          if (_isArray14) {\n            if (_i14 >= _iterator14.length) break;\n            _ref15 = _iterator14[_i14++];\n          } else {\n            _i14 = _iterator14.next();\n            if (_i14.done) break;\n            _ref15 = _i14.value;\n          }\n          var rule = _ref15;\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n        set$$1 = table.classSet[index];\n        for (var _iterator15 = set$$1, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {\n          var _ref16;\n          if (_isArray15) {\n            if (_i15 >= _iterator15.length) break;\n            _ref16 = _iterator15[_i15++];\n          } else {\n            _i15 = _iterator15.next();\n            if (_i15.done) break;\n            _ref16 = _i15.value;\n          }\n          var _rule = _ref16;\n          if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {\n            return this.applyLookupList(_rule.lookupRecords);\n          }\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n        break;\n    }\n    return false;\n  };\n  OTProcessor.prototype.applyChainingContext = function applyChainingContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n        var set$$1 = table.chainRuleSets[index];\n        for (var _iterator16 = set$$1, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {\n          var _ref17;\n          if (_isArray16) {\n            if (_i16 >= _iterator16.length) break;\n            _ref17 = _iterator16[_i16++];\n          } else {\n            _i16 = _iterator16.next();\n            if (_i16.done) break;\n            _ref17 = _i16.value;\n          }\n          var rule = _ref17;\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        var rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n        for (var _iterator17 = rules, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {\n          var _ref18;\n          if (_isArray17) {\n            if (_i17 >= _iterator17.length) break;\n            _ref18 = _iterator17[_i17++];\n          } else {\n            _i17 = _iterator17.next();\n            if (_i17.done) break;\n            _ref18 = _i17.value;\n          }\n          var _rule2 = _ref18;\n          if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(_rule2.lookupRecords);\n          }\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n        break;\n    }\n    return false;\n  };\n  return OTProcessor;\n}();\nvar GlyphInfo = function () {\n  function GlyphInfo(font, id) {\n    var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var features = arguments[3];\n    var stringIndex = arguments[4];\n    classCallCheck(this, GlyphInfo);\n    this._font = font;\n    this.codePoints = codePoints;\n    this.stringIndex = stringIndex;\n    this.id = id;\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (var i = 0; i < features.length; i++) {\n        var feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      Object.assign(this.features, features);\n    }\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n  GlyphInfo.prototype.copy = function copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features, this.stringIndex);\n  };\n  createClass(GlyphInfo, [{\n    key: 'id',\n    get: function get$$1() {\n      return this._id;\n    },\n    set: function set$$1(id) {\n      this._id = id;\n      this.substituted = true;\n      var GDEF = this._font.GDEF;\n      if (GDEF && GDEF.glyphClassDef) {\n        // TODO: clean this up\n        var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n        this.isBase = classID === 1;\n        this.isLigature = classID === 2;\n        this.isMark = classID === 3;\n        this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n      } else {\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n        this.isBase = !this.isMark;\n        this.isLigature = this.codePoints.length > 1;\n        this.markAttachmentType = 0;\n      }\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get$$1() {\n      return this._font.getGlyph(this.id, this.codePoints).advanceWidth;\n    }\n  }]);\n  return GlyphInfo;\n}();\nvar _class$5;\nvar _temp$1;\n\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nvar HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {\n  inherits(HangulShaper, _DefaultShaper);\n  function HangulShaper() {\n    classCallCheck(this, HangulShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n  HangulShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  };\n  HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var state = 0;\n    var i = 0;\n    while (i < glyphs.length) {\n      var action = void 0;\n      var glyph = glyphs[i];\n      var code = glyph.codePoints[0];\n      var type = getType(code);\n      var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];\n      action = _STATE_TABLE$state$ty[0];\n      state = _STATE_TABLE$state$ty[1];\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n      i++;\n    }\n  };\n  return HangulShaper;\n}(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);\nvar HANGUL_BASE = 0xac00;\nvar HANGUL_END = 0xd7a4;\nvar HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nvar L_BASE = 0x1100; // lead\nvar V_BASE = 0x1161; // vowel\nvar T_BASE = 0x11a7; // trail\nvar L_COUNT = 19;\nvar V_COUNT = 21;\nvar T_COUNT = 28;\nvar L_END = L_BASE + L_COUNT - 1;\nvar V_END = V_BASE + V_COUNT - 1;\nvar T_END = T_BASE + T_COUNT - 1;\nvar DOTTED_CIRCLE = 0x25cc;\nvar isL = function isL(code) {\n  return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\n};\nvar isV = function isV(code) {\n  return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\n};\nvar isT = function isT(code) {\n  return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\n};\nvar isTone = function isTone(code) {\n  return 0x302e <= code && code <= 0x302f;\n};\nvar isLVT = function isLVT(code) {\n  return HANGUL_BASE <= code && code <= HANGUL_END;\n};\nvar isLV = function isLV(code) {\n  return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\n};\nvar isCombiningL = function isCombiningL(code) {\n  return L_BASE <= code && code <= L_END;\n};\nvar isCombiningV = function isCombiningV(code) {\n  return V_BASE <= code && code <= V_END;\n};\nvar isCombiningT = function isCombiningT(code) {\n  return T_BASE + 1 && 1 <= code && code <= T_END;\n};\n\n// Character categories\nvar X = 0; // Other character\nvar L = 1; // Leading consonant\nvar V = 2; // Medial vowel\nvar T = 3; // Trailing consonant\nvar LV = 4; // Composed <LV> syllable\nvar LVT = 5; // Composed <LVT> syllable\nvar M = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code)) {\n    return L;\n  }\n  if (isV(code)) {\n    return V;\n  }\n  if (isT(code)) {\n    return T;\n  }\n  if (isLV(code)) {\n    return LV;\n  }\n  if (isLVT(code)) {\n    return LVT;\n  }\n  if (isTone(code)) {\n    return M;\n  }\n  return X;\n}\n\n// State machine actions\nvar NO_ACTION = 0;\nvar DECOMPOSE = 1;\nvar COMPOSE = 2;\nvar TONE_MARK = 4;\nvar INVALID = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nvar STATE_TABLE$1 = [\n//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n// State 1: <L>\n[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n// State 2: <L,V> or <LV>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]],\n// State 3: <L,V,T> or <LVT>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\nfunction decompose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyph.codePoints[0];\n  var s = code - HANGUL_BASE;\n  var t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  var l = L_BASE + s / V_COUNT | 0;\n  var v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  var ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n  var vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n  var insert = [ljmo, vjmo];\n  if (t > T_BASE) {\n    var tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n  glyphs.splice.apply(glyphs, [i, 1].concat(insert));\n  return i + insert.length - 1;\n}\nfunction compose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n  var type = getType(code);\n  var prev = glyphs[i - 1].codePoints[0];\n  var prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  var lv = void 0,\n    ljmo = void 0,\n    vjmo = void 0,\n    tjmo = void 0;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n    var l = ljmo.codePoints[0];\n    var v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n  var t = tjmo && tjmo.codePoints[0] || T_BASE;\n  if (lv != null && (t === T_BASE || isCombiningT(t))) {\n    var s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      var del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) {\n    ljmo.features.ljmo = true;\n  }\n  if (vjmo) {\n    vjmo.features.vjmo = true;\n  }\n  if (tjmo) {\n    tjmo.features.tjmo = true;\n  }\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n  return i;\n}\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\nfunction reorderToneMark(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) {\n    return;\n  }\n  var prev = glyphs[i - 1].codePoints[0];\n  var len = getLength(prev);\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\nfunction insertDottedCircle(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n  return i;\n}\nvar stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 28, 29, 30, 31, 32, 33, 0, 34, 0, 0, 35, 36, 0, 0, 37, 0], [0, 0, 0, 38, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 39, 0, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 12, 43, 0, 0, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0], [0, 0, 0, 45, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 55, 56, 57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 62, 0], [0, 0, 0, 4, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 63, 64, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 63, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 0, 2, 16, 0], [0, 0, 0, 18, 65, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 0, 0], [0, 0, 0, 69, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 73, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 75, 0, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 25, 79, 0, 0, 0, 0], [0, 0, 0, 18, 19, 20, 74, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 81, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 87, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 18, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 89, 90, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 89, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 0, 0], [0, 0, 0, 94, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 96, 0, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 102, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 108, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 28, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 110, 111, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 110, 0, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 0, 0], [0, 0, 0, 0, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 0, 0, 115, 116, 117, 118, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 39, 0, 122, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0], [0, 39, 0, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 47, 47, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 128, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 129, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 135, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 136, 0, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0], [0, 0, 0, 142, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 148, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 150, 151, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 150, 0, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 157, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 3, 4, 5, 159, 160, 8, 161, 0, 162, 0, 11, 12, 163, 0, 75, 16, 0], [0, 0, 0, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0], [0, 124, 64, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 124, 0, 0], [0, 0, 0, 0, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 167, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 172, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 75, 0, 176, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 178, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0], [0, 75, 0, 0, 0, 175, 179, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 180, 180, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 83, 83, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 182, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 183, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 191, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0], [0, 178, 90, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 178, 0, 0], [0, 0, 0, 0, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 198, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 96, 0, 202, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 204, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0], [0, 96, 0, 0, 0, 201, 205, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 206, 206, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 104, 104, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 208, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 209, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 217, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0], [0, 204, 111, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 204, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 223, 0, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 119, 225, 0, 0, 0, 0], [0, 0, 0, 115, 116, 117, 222, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 115, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 226, 64, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 226, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 39, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 44, 44, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 229, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 39, 0, 122, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 231, 231, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 131, 131, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 234, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 235, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 0, 0, 240, 241, 242, 243, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 136, 0, 247, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 249, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0], [0, 136, 0, 0, 0, 246, 250, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 251, 251, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 144, 144, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 253, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 262, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0], [0, 249, 151, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 249, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 158, 225, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 222, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 155, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 43, 266, 266, 8, 161, 0, 24, 0, 0, 12, 267, 0, 0, 0, 0], [0, 75, 0, 176, 43, 268, 268, 269, 161, 0, 24, 0, 0, 0, 267, 0, 75, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 271, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0], [0, 273, 274, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 273, 0, 0], [0, 0, 0, 40, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 121, 275, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 279, 0, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 173, 281, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 278, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 169, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 282, 90, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 282, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 80, 80, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 285, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 75, 0, 176, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 287, 287, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 185, 185, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 290, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 291, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 192, 281, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 278, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 189, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 76, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 175, 296, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 299, 0, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 199, 301, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 298, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 195, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 302, 111, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 302, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 96, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 101, 101, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 305, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 96, 0, 202, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 307, 307, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 211, 211, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 310, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 311, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 218, 301, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 298, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 215, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 97, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 201, 316, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 320, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 223, 0, 323, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 0, 0, 121, 324, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 325, 318, 326, 327, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 64, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 121, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0], [0, 0, 0, 0, 0, 329, 329, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 237, 237, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 332, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 333, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 337, 0, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 244, 339, 0, 0, 0, 0], [0, 0, 0, 240, 241, 242, 336, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 240, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 340, 151, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 340, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 136, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 141, 141, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 343, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 136, 0, 247, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 345, 345, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 256, 256, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 348, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 349, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 263, 339, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 336, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 260, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 137, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 246, 354, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 355, 90, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 355, 0, 0], [0, 0, 0, 0, 0, 356, 356, 269, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 357, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 366, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 40, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 372, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 279, 0, 375, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 0, 0, 175, 376, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 377, 370, 378, 379, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 90, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 175, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0], [0, 0, 0, 0, 0, 381, 381, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 293, 293, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 384, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 385, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 76, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 390, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 299, 0, 393, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 0, 0, 201, 394, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 395, 388, 396, 397, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 111, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 201, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0], [0, 0, 0, 0, 0, 399, 399, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 313, 313, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 402, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 403, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 97, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 407, 0, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 321, 409, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 406, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 0, 0, 317, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 410, 64, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 410, 0, 0], [0, 223, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 323, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 328, 409, 0, 0, 0, 0], [0, 0, 0, 325, 318, 326, 406, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 325, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0], [0, 0, 0, 0, 0, 411, 411, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 413, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 417, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 337, 0, 420, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 0, 0, 246, 421, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 422, 415, 423, 424, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 151, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 246, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0], [0, 0, 0, 0, 0, 426, 426, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 351, 351, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 429, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 430, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 137, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 434, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 180, 180, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 359, 359, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 437, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 438, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 443, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 367, 225, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 445, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 364, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 448, 0, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 373, 450, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 447, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 0, 0, 369, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 451, 90, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 451, 0, 0], [0, 279, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 375, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 380, 450, 0, 0, 0, 0], [0, 0, 0, 377, 370, 378, 447, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 377, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0], [0, 0, 0, 0, 0, 452, 452, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 454, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 457, 0, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 391, 459, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 456, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 0, 0, 387, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 460, 111, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 460, 0, 0], [0, 299, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 393, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 398, 459, 0, 0, 0, 0], [0, 0, 0, 395, 388, 396, 456, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 395, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0], [0, 0, 0, 0, 0, 461, 461, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 463, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 467, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 407, 0, 470, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 0, 0, 121, 471, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 472, 465, 473, 474, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0], [0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 479, 0, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 418, 481, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 478, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 0, 0, 414, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 482, 151, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 482, 0, 0], [0, 337, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 420, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 425, 481, 0, 0, 0, 0], [0, 0, 0, 422, 415, 423, 478, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 422, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0], [0, 0, 0, 0, 0, 483, 483, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 485, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 435, 225, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 445, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 432, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 486, 486, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 440, 440, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 489, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 490, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 497, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 0, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 0, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 502, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 448, 0, 505, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 0, 0, 175, 506, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 507, 500, 508, 509, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0], [0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 515, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 457, 0, 518, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 0, 0, 201, 519, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 520, 513, 521, 522, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0], [0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 527, 0, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 468, 529, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 526, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 0, 0, 464, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 530, 64, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 530, 0, 0], [0, 407, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 470, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 475, 529, 0, 0, 0, 0], [0, 0, 0, 472, 465, 473, 526, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 472, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0], [0, 0, 0, 0, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 534, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 479, 0, 537, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 0, 0, 246, 538, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 539, 532, 540, 541, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0], [0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0], [0, 0, 0, 0, 0, 544, 544, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 492, 492, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 547, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 548, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 274, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 368, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 553, 0, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 503, 555, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 552, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 0, 0, 499, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 556, 90, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 556, 0, 0], [0, 448, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 505, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 510, 555, 0, 0, 0, 0], [0, 0, 0, 507, 500, 508, 552, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 507, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 559, 0, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 516, 561, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 558, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 0, 0, 512, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 562, 111, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 562, 0, 0], [0, 457, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 518, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 523, 561, 0, 0, 0, 0], [0, 0, 0, 520, 513, 521, 558, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 520, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0], [0, 0, 0, 0, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 565, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 527, 0, 567, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 0, 0, 121, 568, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 569, 66, 570, 571, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 575, 0, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 535, 577, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 574, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 0, 0, 531, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 578, 151, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 578, 0, 0], [0, 479, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 537, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 542, 577, 0, 0, 0, 0], [0, 0, 0, 539, 532, 540, 574, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 539, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0], [0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0], [0, 0, 0, 0, 0, 579, 579, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 581, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 584, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 553, 0, 586, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 0, 0, 175, 587, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 588, 91, 589, 590, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 0, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 594, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 559, 0, 596, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 0, 0, 201, 597, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 598, 112, 599, 600, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 566, 165, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 67, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 0, 0, 563, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 527, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 567, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 572, 165, 0, 0, 0, 0], [0, 0, 0, 569, 66, 570, 67, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 569, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 605, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 575, 0, 607, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 0, 0, 246, 608, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 609, 152, 610, 611, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0], [0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 585, 194, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 92, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 0, 0, 582, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 553, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 586, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 591, 194, 0, 0, 0, 0], [0, 0, 0, 588, 91, 589, 92, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 588, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 595, 220, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 113, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 0, 0, 592, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 559, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 596, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 601, 220, 0, 0, 0, 0], [0, 0, 0, 598, 112, 599, 113, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 598, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 606, 265, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 153, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 0, 0, 603, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 575, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 607, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 612, 265, 0, 0, 0, 0], [0, 0, 0, 609, 152, 610, 153, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 609, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0]];\nvar accepting = [false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true];\nvar tags = [[], [\"broken_cluster\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"symbol_cluster\"], [], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"standalone_cluster\"]];\nvar indicMachine = {\n  stateTable: stateTable,\n  accepting: accepting,\n  tags: tags\n};\nvar categories = [\"O\", \"IND\", \"S\", \"GB\", \"B\", \"FM\", \"CGJ\", \"VMAbv\", \"VMPst\", \"VAbv\", \"VPst\", \"CMBlw\", \"VPre\", \"VBlw\", \"H\", \"VMBlw\", \"CMAbv\", \"MBlw\", \"CS\", \"R\", \"SUB\", \"MPst\", \"MPre\", \"FAbv\", \"FPst\", \"FBlw\", \"SMAbv\", \"SMBlw\", \"VMPre\", \"ZWNJ\", \"ZWJ\", \"WJ\", \"VS\", \"N\", \"HN\", \"MAbv\"];\nvar decompositions$1 = {\n  \"2507\": [2503, 2494],\n  \"2508\": [2503, 2519],\n  \"2888\": [2887, 2902],\n  \"2891\": [2887, 2878],\n  \"2892\": [2887, 2903],\n  \"3018\": [3014, 3006],\n  \"3019\": [3015, 3006],\n  \"3020\": [3014, 3031],\n  \"3144\": [3142, 3158],\n  \"3264\": [3263, 3285],\n  \"3271\": [3270, 3285],\n  \"3272\": [3270, 3286],\n  \"3274\": [3270, 3266],\n  \"3275\": [3270, 3266, 3285],\n  \"3402\": [3398, 3390],\n  \"3403\": [3399, 3390],\n  \"3404\": [3398, 3415],\n  \"3546\": [3545, 3530],\n  \"3548\": [3545, 3535],\n  \"3549\": [3545, 3535, 3530],\n  \"3550\": [3545, 3551],\n  \"3635\": [3661, 3634],\n  \"3763\": [3789, 3762],\n  \"3955\": [3953, 3954],\n  \"3957\": [3953, 3956],\n  \"3958\": [4018, 3968],\n  \"3959\": [4018, 3953, 3968],\n  \"3960\": [4019, 3968],\n  \"3961\": [4019, 3953, 3968],\n  \"3969\": [3953, 3968],\n  \"6971\": [6970, 6965],\n  \"6973\": [6972, 6965],\n  \"6976\": [6974, 6965],\n  \"6977\": [6975, 6965],\n  \"6979\": [6978, 6965],\n  \"69934\": [69937, 69927],\n  \"69935\": [69938, 69927],\n  \"70475\": [70471, 70462],\n  \"70476\": [70471, 70487],\n  \"70843\": [70841, 70842],\n  \"70844\": [70841, 70832],\n  \"70846\": [70841, 70845],\n  \"71098\": [71096, 71087],\n  \"71099\": [71097, 71087]\n};\nvar stateTable$1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 2, 0, 24, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 27, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 39, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 49, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 53, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0]];\nvar accepting$1 = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];\nvar tags$1 = [[], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"virama_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"number_joiner_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"numeral_cluster\"]];\nvar useData = {\n  categories: categories,\n  decompositions: decompositions$1,\n  stateTable: stateTable$1,\n  accepting: accepting$1,\n  tags: tags$1\n};\n\n// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nvar CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13,\n  // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14,\n  // Khmer-style Virama.\n  Repha: 1 << 15,\n  // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17,\n  // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nvar POSITIONS = {\n  Start: 1 << 0,\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n  Above_C: 1 << 6,\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n  End: 1 << 15\n};\nvar CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nvar JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nvar HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\nvar INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nvar INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\nvar type$1 = \"Buffer\";\nvar data$1 = [0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 194, 160, 1, 177, 13, 78, 242, 237, 157, 127, 172, 29, 69, 21, 199, 247, 245, 222, 119, 127, 188, 119, 251, 110, 95, 133, 68, 98, 251, 71, 67, 137, 49, 197, 152, 166, 16, 107, 138, 105, 21, 9, 34, 81, 219, 24, 132, 104, 177, 6, 67, 176, 36, 4, 106, 48, 109, 132, 82, 130, 63, 10, 216, 31, 198, 146, 148, 88, 19, 172, 37, 65, 44, 137, 40, 38, 160, 173, 41, 70, 146, 106, 172, 169, 70, 76, 99, 180, 182, 9, 105, 32, 169, 5, 98, 65, 41, 45, 224, 119, 238, 206, 188, 123, 238, 220, 153, 217, 249, 181, 187, 239, 209, 61, 201, 39, 187, 59, 59, 59, 115, 230, 156, 51, 179, 179, 179, 123, 223, 59, 94, 75, 146, 151, 192, 171, 224, 13, 48, 167, 158, 36, 239, 5, 243, 193, 37, 224, 21, 164, 253, 175, 22, 190, 189, 24, 101, 45, 2, 75, 192, 50, 135, 114, 175, 64, 222, 79, 128, 107, 192, 42, 112, 61, 88, 3, 110, 6, 183, 129, 175, 131, 141, 134, 242, 150, 226, 220, 10, 240, 77, 240, 93, 176, 25, 108, 7, 59, 193, 35, 224, 56, 242, 60, 134, 237, 207, 64, 194, 121, 154, 111, 15, 128, 131, 224, 79, 224, 111, 224, 40, 56, 1, 78, 130, 211, 224, 44, 168, 141, 38, 73, 27, 76, 130, 139, 192, 2, 240, 126, 240, 33, 240, 97, 176, 28, 92, 5, 62, 13, 174, 3, 55, 130, 155, 193, 109, 224, 78, 112, 55, 184, 15, 60, 8, 190, 15, 126, 0, 126, 4, 126, 2, 158, 228, 199, 207, 128, 103, 193, 239, 193, 159, 193, 17, 112, 12, 188, 8, 94, 1, 175, 129, 115, 163, 169, 206, 245, 70, 146, 116, 192, 5, 141, 244, 120, 30, 182, 11, 193, 165, 96, 49, 88, 10, 150, 131, 171, 249, 249, 207, 98, 123, 61, 88, 3, 110, 1, 183, 55, 82, 155, 172, 231, 91, 91, 54, 242, 252, 223, 198, 246, 46, 176, 149, 31, 63, 192, 183, 155, 80, 215, 14, 150, 94, 239, 95, 179, 203, 177, 14, 27, 118, 144, 50, 247, 96, 127, 47, 120, 10, 236, 3, 191, 3, 127, 4, 127, 5, 255, 0, 47, 128, 147, 36, 255, 155, 124, 123, 154, 167, 109, 99, 62, 198, 126, 173, 153, 36, 227, 224, 61, 205, 212, 94, 239, 195, 246, 226, 102, 154, 103, 17, 79, 91, 130, 237, 50, 112, 101, 51, 141, 39, 17, 75, 215, 226, 120, 37, 184, 1, 172, 1, 183, 128, 219, 249, 53, 235, 249, 118, 19, 182, 155, 121, 121, 226, 186, 173, 56, 222, 209, 52, 183, 117, 87, 198, 121, 106, 227, 31, 35, 239, 22, 110, 251, 245, 216, 254, 20, 199, 191, 0, 191, 38, 101, 252, 22, 251, 127, 0, 247, 224, 124, 7, 252, 69, 81, 254, 223, 45, 234, 180, 101, 173, 136, 5, 148, 121, 204, 177, 220, 151, 34, 234, 81, 20, 255, 134, 206, 255, 1, 111, 128, 164, 149, 36, 163, 173, 52, 125, 111, 61, 181, 185, 156, 127, 54, 63, 47, 250, 226, 5, 56, 158, 7, 22, 114, 104, 222, 69, 173, 52, 110, 150, 144, 244, 179, 6, 93, 88, 108, 47, 35, 121, 87, 241, 250, 175, 145, 244, 248, 56, 242, 92, 77, 242, 49, 93, 133, 223, 62, 211, 82, 235, 45, 48, 157, 171, 168, 168, 240, 99, 91, 213, 175, 42, 42, 42, 42, 42, 42, 42, 42, 42, 28, 217, 198, 215, 25, 202, 214, 67, 102, 39, 127, 214, 189, 174, 101, 127, 205, 91, 154, 244, 55, 53, 233, 95, 224, 207, 202, 95, 198, 246, 171, 224, 14, 176, 1, 220, 11, 238, 7, 91, 193, 67, 224, 135, 224, 81, 240, 4, 120, 170, 149, 174, 45, 237, 195, 246, 0, 56, 8, 14, 131, 35, 224, 40, 56, 1, 78, 181, 210, 245, 156, 215, 177, 125, 139, 61, 223, 183, 241, 12, 15, 46, 108, 167, 245, 206, 107, 247, 117, 88, 136, 253, 75, 219, 246, 109, 172, 168, 168, 168, 168, 8, 135, 173, 91, 94, 134, 177, 247, 76, 173, 191, 222, 94, 22, 101, 219, 162, 162, 162, 34, 14, 175, 145, 119, 82, 91, 121, 255, 94, 134, 113, 230, 74, 112, 173, 52, 215, 251, 156, 227, 220, 175, 195, 199, 138, 83, 188, 142, 183, 193, 23, 219, 253, 247, 169, 95, 193, 254, 173, 82, 153, 119, 180, 251, 239, 117, 40, 236, 189, 204, 6, 156, 187, 119, 26, 204, 63, 147, 57, 41, 43, 192, 157, 96, 127, 55, 155, 45, 200, 119, 72, 147, 247, 85, 164, 47, 156, 76, 146, 213, 224, 33, 240, 252, 228, 224, 249, 227, 56, 223, 153, 139, 185, 56, 88, 13, 238, 29, 75, 146, 103, 65, 50, 14, 95, 129, 187, 192, 10, 28, 239, 227, 219, 163, 124, 75, 153, 223, 25, 78, 147, 185, 17, 121, 54, 146, 124, 191, 193, 254, 57, 126, 124, 197, 236, 36, 185, 27, 236, 7, 15, 143, 196, 229, 28, 47, 243, 178, 9, 216, 115, 34, 221, 223, 52, 161, 214, 241, 128, 38, 189, 162, 162, 162, 162, 34, 127, 222, 41, 121, 12, 142, 125, 255, 113, 97, 121, 183, 252, 250, 203, 126, 254, 43, 155, 171, 192, 253, 152, 7, 126, 175, 61, 252, 60, 202, 190, 243, 121, 24, 233, 187, 200, 60, 113, 55, 246, 31, 111, 167, 243, 209, 45, 138, 242, 196, 247, 119, 236, 219, 177, 51, 252, 26, 246, 188, 205, 190, 169, 99, 229, 253, 156, 151, 245, 43, 69, 125, 12, 86, 230, 254, 246, 224, 243, 241, 205, 124, 251, 92, 123, 184, 62, 155, 57, 38, 251, 102, 138, 173, 119, 179, 57, 179, 124, 253, 33, 148, 121, 24, 28, 105, 247, 231, 198, 199, 120, 61, 47, 98, 251, 50, 248, 175, 164, 207, 219, 237, 254, 60, 188, 129, 62, 52, 27, 92, 56, 70, 230, 180, 60, 223, 124, 158, 118, 134, 127, 247, 181, 27, 233, 151, 32, 237, 131, 99, 195, 250, 95, 62, 214, 63, 62, 202, 203, 254, 232, 152, 157, 15, 5, 247, 248, 248, 31, 117, 124, 10, 172, 2, 159, 7, 95, 2, 55, 129, 29, 56, 183, 22, 219, 117, 96, 195, 88, 58, 79, 254, 14, 216, 198, 206, 129, 93, 96, 15, 216, 11, 158, 36, 122, 62, 51, 150, 206, 167, 15, 130, 195, 224, 8, 56, 10, 78, 128, 83, 22, 237, 121, 29, 121, 206, 128, 145, 113, 245, 249, 7, 224, 203, 54, 206, 77, 142, 247, 143, 47, 194, 254, 2, 126, 252, 32, 142, 63, 128, 253, 197, 252, 248, 35, 216, 126, 76, 83, 22, 181, 255, 82, 69, 108, 217, 194, 174, 223, 211, 40, 191, 47, 219, 232, 89, 36, 91, 13, 245, 127, 114, 92, 127, 221, 59, 138, 126, 58, 19, 219, 175, 226, 95, 205, 119, 81, 28, 120, 182, 37, 70, 221, 172, 191, 177, 241, 110, 37, 233, 219, 236, 158, 116, 3, 137, 171, 213, 216, 191, 9, 156, 203, 41, 158, 178, 218, 183, 174, 158, 234, 120, 171, 52, 254, 124, 205, 48, 30, 157, 15, 80, 63, 126, 3, 182, 216, 52, 158, 95, 159, 119, 141, 63, 241, 109, 229, 183, 52, 249, 46, 39, 247, 249, 117, 26, 63, 138, 243, 108, 222, 177, 221, 112, 126, 61, 223, 103, 191, 97, 217, 140, 178, 86, 242, 227, 237, 216, 223, 9, 30, 49, 140, 145, 50, 187, 45, 126, 75, 241, 114, 14, 223, 204, 63, 10, 29, 159, 152, 65, 241, 172, 107, 199, 47, 103, 72, 27, 88, 140, 236, 135, 174, 207, 129, 67, 224, 121, 240, 79, 174, 251, 11, 22, 109, 96, 109, 165, 191, 225, 96, 191, 17, 184, 15, 233, 39, 199, 211, 216, 103, 223, 95, 236, 37, 249, 214, 146, 107, 79, 35, 207, 217, 241, 52, 109, 164, 227, 222, 183, 92, 17, 191, 101, 88, 105, 81, 46, 123, 222, 104, 119, 6, 211, 232, 239, 31, 196, 111, 186, 68, 219, 39, 121, 94, 246, 108, 177, 143, 204, 253, 22, 75, 115, 212, 139, 120, 59, 31, 15, 152, 31, 78, 39, 98, 247, 255, 233, 194, 188, 214, 187, 187, 125, 148, 167, 13, 237, 220, 114, 158, 216, 64, 135, 203, 220, 42, 180, 46, 213, 250, 199, 76, 98, 129, 52, 94, 186, 216, 167, 232, 57, 117, 53, 22, 198, 133, 197, 238, 177, 218, 72, 194, 150, 64, 103, 26, 245, 241, 193, 125, 27, 202, 214, 121, 186, 114, 190, 75, 217, 246, 143, 22, 155, 77, 206, 76, 208, 117, 26, 35, 36, 235, 124, 86, 190, 46, 57, 159, 149, 207, 87, 207, 178, 109, 53, 211, 218, 225, 226, 179, 233, 96, 15, 149, 190, 101, 235, 23, 203, 7, 58, 41, 91, 23, 31, 157, 203, 210, 127, 186, 199, 68, 153, 54, 41, 35, 118, 108, 164, 108, 189, 203, 182, 81, 153, 177, 84, 134, 253, 169, 222, 121, 213, 239, 43, 101, 196, 196, 68, 107, 144, 250, 172, 8, 140, 68, 100, 142, 93, 190, 118, 51, 165, 133, 103, 233, 137, 185, 233, 254, 172, 102, 63, 221, 133, 86, 189, 127, 109, 207, 70, 99, 28, 110, 35, 154, 55, 83, 55, 110, 147, 54, 41, 143, 225, 250, 156, 236, 107, 107, 217, 199, 137, 169, 44, 142, 16, 221, 177, 171, 15, 123, 215, 26, 252, 43, 206, 83, 81, 149, 193, 68, 248, 183, 195, 253, 219, 81, 248, 79, 200, 44, 158, 71, 72, 135, 231, 103, 254, 149, 235, 83, 73, 167, 57, 156, 54, 212, 38, 201, 191, 83, 249, 44, 253, 43, 226, 59, 100, 108, 177, 245, 239, 80, 91, 10, 246, 175, 156, 87, 222, 103, 194, 252, 43, 108, 47, 252, 43, 144, 69, 78, 167, 254, 165, 146, 53, 38, 235, 218, 99, 188, 198, 210, 191, 83, 227, 42, 233, 143, 245, 201, 12, 133, 36, 113, 237, 191, 194, 167, 218, 227, 130, 252, 107, 219, 127, 101, 68, 63, 18, 125, 74, 248, 88, 229, 223, 144, 251, 45, 181, 137, 28, 75, 174, 227, 179, 177, 142, 140, 88, 106, 206, 144, 241, 217, 213, 191, 163, 22, 227, 243, 168, 69, 255, 85, 201, 168, 102, 76, 136, 61, 62, 119, 147, 126, 191, 13, 153, 235, 49, 223, 138, 252, 54, 227, 179, 169, 47, 235, 238, 149, 98, 95, 78, 83, 229, 147, 211, 180, 233, 150, 243, 47, 89, 104, 95, 86, 141, 223, 226, 222, 60, 75, 234, 219, 140, 134, 101, 255, 86, 249, 95, 39, 121, 188, 151, 80, 137, 60, 159, 238, 213, 29, 50, 86, 231, 208, 159, 93, 253, 201, 250, 115, 179, 57, 12, 237, 83, 52, 93, 62, 110, 100, 244, 103, 122, 157, 41, 166, 168, 93, 232, 53, 46, 254, 205, 18, 27, 159, 207, 36, 255, 234, 242, 10, 17, 227, 181, 141, 127, 233, 177, 216, 183, 241, 175, 60, 246, 170, 100, 74, 215, 8, 254, 237, 118, 83, 124, 196, 213, 23, 190, 253, 139, 250, 64, 220, 47, 117, 48, 201, 26, 47, 109, 218, 155, 53, 94, 210, 152, 12, 157, 15, 153, 198, 74, 113, 79, 53, 218, 196, 113, 190, 107, 59, 39, 142, 230, 103, 151, 62, 73, 98, 67, 228, 179, 209, 131, 138, 170, 143, 233, 214, 47, 196, 57, 177, 21, 107, 25, 170, 245, 16, 109, 44, 56, 142, 167, 116, 125, 195, 85, 98, 251, 194, 151, 174, 193, 166, 58, 59, 83, 97, 215, 211, 126, 58, 171, 57, 184, 142, 196, 182, 141, 218, 32, 44, 77, 172, 41, 249, 172, 11, 153, 236, 41, 246, 109, 210, 109, 125, 147, 229, 47, 249, 60, 45, 223, 164, 139, 171, 253, 19, 158, 151, 61, 75, 211, 231, 105, 149, 253, 133, 111, 152, 200, 246, 103, 63, 19, 18, 227, 76, 79, 23, 199, 184, 87, 197, 80, 158, 180, 56, 186, 243, 214, 235, 78, 14, 113, 70, 227, 183, 203, 109, 40, 215, 203, 76, 82, 203, 136, 13, 235, 113, 50, 194, 88, 76, 197, 103, 13, 152, 174, 245, 178, 251, 51, 139, 147, 134, 78, 247, 73, 123, 122, 237, 119, 200, 159, 7, 162, 63, 152, 160, 107, 213, 170, 123, 185, 79, 236, 170, 164, 236, 49, 191, 135, 229, 252, 65, 23, 43, 170, 251, 42, 139, 157, 222, 220, 154, 61, 247, 79, 12, 142, 85, 83, 176, 186, 61, 231, 85, 116, 109, 66, 213, 6, 89, 31, 99, 204, 142, 164, 121, 198, 107, 41, 34, 143, 184, 86, 164, 83, 104, 89, 153, 117, 217, 48, 57, 108, 75, 85, 189, 140, 22, 175, 191, 167, 135, 165, 253, 196, 181, 242, 123, 152, 172, 24, 87, 73, 87, 218, 15, 69, 85, 142, 77, 249, 73, 224, 245, 161, 245, 231, 221, 62, 159, 114, 139, 128, 74, 222, 117, 248, 158, 207, 171, 189, 178, 248, 172, 99, 244, 174, 147, 210, 108, 158, 73, 98, 213, 175, 130, 214, 111, 211, 238, 188, 234, 119, 149, 24, 246, 103, 226, 93, 127, 81, 247, 104, 155, 117, 149, 8, 107, 4, 194, 247, 166, 245, 24, 25, 250, 172, 49, 181, 38, 195, 239, 253, 189, 253, 217, 41, 34, 93, 85, 6, 155, 35, 116, 44, 238, 75, 98, 46, 58, 101, 255, 192, 117, 207, 208, 49, 160, 168, 241, 59, 70, 253, 177, 245, 103, 244, 236, 91, 84, 31, 80, 244, 99, 155, 103, 25, 121, 238, 79, 69, 164, 247, 222, 81, 27, 158, 25, 76, 107, 30, 42, 123, 90, 63, 99, 198, 180, 137, 199, 90, 160, 235, 253, 110, 200, 126, 30, 62, 163, 162, 123, 158, 160, 107, 71, 186, 103, 12, 149, 127, 101, 196, 188, 87, 171, 191, 195, 243, 135, 210, 207, 57, 198, 183, 170, 237, 81, 234, 215, 197, 133, 56, 239, 242, 28, 61, 225, 183, 190, 160, 91, 39, 84, 173, 17, 54, 106, 131, 215, 210, 216, 9, 29, 255, 67, 175, 167, 239, 194, 196, 61, 207, 251, 254, 155, 67, 12, 201, 182, 203, 242, 135, 156, 62, 94, 55, 151, 31, 210, 159, 92, 97, 247, 253, 86, 210, 95, 139, 82, 225, 122, 31, 180, 246, 91, 158, 247, 50, 197, 125, 70, 229, 11, 214, 215, 6, 214, 78, 70, 236, 237, 205, 230, 77, 202, 58, 53, 99, 131, 109, 220, 100, 221, 31, 101, 25, 154, 63, 104, 108, 97, 138, 73, 211, 152, 68, 215, 45, 91, 53, 115, 221, 46, 247, 233, 129, 24, 39, 250, 134, 206, 159, 178, 100, 234, 219, 219, 49, 62, 255, 29, 243, 96, 174, 132, 42, 77, 140, 99, 99, 131, 125, 91, 148, 97, 235, 207, 88, 184, 214, 23, 122, 158, 230, 51, 109, 77, 215, 132, 180, 51, 143, 178, 109, 235, 179, 173, 195, 75, 151, 81, 208, 232, 31, 199, 184, 23, 248, 232, 49, 213, 110, 139, 103, 76, 37, 205, 196, 249, 55, 173, 190, 190, 163, 18, 211, 231, 62, 18, 90, 87, 12, 253, 99, 180, 195, 86, 92, 117, 170, 119, 226, 182, 81, 27, 183, 57, 83, 84, 61, 42, 95, 250, 92, 155, 87, 172, 196, 142, 185, 60, 237, 230, 83, 135, 141, 174, 190, 82, 100, 204, 248, 232, 80, 196, 249, 162, 37, 111, 155, 103, 181, 189, 104, 253, 99, 148, 17, 59, 22, 243, 142, 233, 188, 218, 90, 100, 125, 182, 229, 229, 41, 54, 122, 210, 247, 32, 242, 247, 4, 242, 179, 42, 253, 93, 83, 158, 235, 127, 170, 119, 115, 58, 123, 133, 250, 62, 215, 117, 14, 151, 53, 73, 213, 121, 221, 154, 133, 106, 13, 97, 164, 255, 155, 19, 151, 248, 138, 246, 59, 224, 28, 215, 138, 92, 214, 89, 109, 126, 75, 68, 227, 38, 120, 61, 212, 103, 125, 194, 102, 205, 130, 147, 21, 207, 165, 188, 119, 177, 137, 103, 5, 173, 90, 159, 41, 251, 231, 60, 126, 152, 214, 209, 92, 223, 127, 119, 73, 127, 49, 174, 161, 234, 236, 18, 217, 230, 166, 53, 75, 186, 150, 56, 240, 126, 168, 238, 127, 63, 11, 233, 47, 38, 127, 139, 113, 222, 170, 221, 1, 241, 222, 235, 47, 101, 172, 119, 91, 198, 169, 188, 254, 171, 122, 255, 148, 37, 33, 223, 136, 38, 30, 254, 29, 154, 79, 4, 218, 70, 46, 67, 59, 111, 25, 73, 223, 115, 54, 20, 223, 39, 198, 246, 141, 238, 221, 172, 234, 61, 30, 211, 77, 108, 243, 22, 211, 124, 206, 166, 173, 170, 54, 169, 202, 20, 223, 180, 134, 232, 101, 51, 39, 182, 61, 239, 83, 119, 55, 194, 121, 215, 241, 50, 84, 95, 27, 188, 99, 157, 198, 137, 237, 248, 151, 49, 134, 100, 221, 127, 153, 190, 226, 155, 92, 33, 161, 243, 47, 23, 31, 196, 242, 109, 168, 207, 77, 250, 184, 182, 49, 182, 254, 166, 244, 68, 147, 183, 72, 29, 125, 109, 173, 146, 50, 234, 13, 109, 111, 17, 254, 14, 185, 222, 166, 189, 177, 219, 17, 98, 203, 44, 187, 230, 113, 62, 203, 62, 182, 118, 178, 21, 223, 120, 202, 58, 31, 18, 47, 161, 101, 219, 232, 239, 122, 189, 141, 221, 242, 138, 197, 24, 109, 241, 41, 67, 213, 230, 50, 165, 8, 155, 103, 197, 102, 30, 49, 145, 151, 132, 212, 19, 67, 47, 155, 254, 101, 202, 151, 135, 255, 116, 109, 44, 35, 126, 92, 252, 83, 68, 28, 21, 97, 243, 60, 234, 114, 209, 169, 140, 250, 203, 106, 127, 86, 157, 236, 185, 109, 84, 250, 150, 152, 109, 233, 223, 225, 162, 34, 242, 201, 127, 199, 110, 96, 13, 205, 112, 28, 27, 89, 26, 100, 13, 121, 168, 237, 19, 254, 207, 145, 58, 251, 197, 236, 195, 62, 117, 217, 214, 235, 91, 102, 140, 54, 186, 74, 104, 27, 125, 203, 142, 85, 71, 104, 253, 121, 248, 64, 64, 191, 207, 23, 127, 23, 105, 218, 189, 211, 179, 88, 11, 151, 105, 100, 188, 183, 144, 197, 250, 61, 65, 224, 120, 97, 146, 222, 119, 232, 62, 127, 107, 57, 178, 125, 179, 254, 46, 50, 123, 103, 74, 223, 201, 229, 53, 254, 217, 148, 97, 180, 87, 1, 241, 152, 21, 155, 38, 91, 138, 223, 6, 9, 223, 251, 252, 46, 196, 57, 198, 10, 236, 183, 114, 140, 216, 72, 148, 191, 53, 158, 163, 127, 93, 255, 102, 56, 123, 127, 106, 122, 47, 63, 133, 244, 183, 39, 166, 252, 229, 25, 23, 212, 230, 177, 198, 54, 159, 49, 46, 150, 175, 122, 101, 229, 112, 191, 96, 113, 198, 124, 36, 222, 207, 103, 141, 63, 38, 253, 133, 142, 42, 93, 125, 245, 247, 185, 222, 212, 215, 202, 238, 67, 46, 136, 223, 41, 101, 222, 143, 164, 119, 68, 3, 237, 13, 253, 94, 199, 243, 239, 181, 210, 124, 67, 182, 143, 236, 123, 122, 94, 151, 87, 72, 151, 252, 255, 3, 29, 66, 228, 191, 143, 79, 199, 180, 169, 242, 244, 166, 211, 250, 132, 246, 43, 97, 19, 185, 110, 211, 183, 79, 84, 178, 206, 103, 9, 213, 161, 140, 251, 140, 77, 124, 235, 206, 211, 184, 20, 115, 50, 249, 94, 147, 37, 161, 253, 35, 175, 182, 11, 145, 207, 171, 218, 28, 243, 25, 74, 70, 246, 185, 172, 95, 12, 255, 187, 66, 219, 175, 250, 6, 195, 69, 138, 244, 63, 253, 237, 105, 86, 204, 143, 215, 213, 107, 54, 177, 245, 15, 149, 162, 238, 133, 3, 117, 90, 124, 67, 145, 213, 175, 92, 237, 151, 53, 207, 180, 125, 134, 115, 125, 62, 148, 197, 247, 121, 209, 247, 121, 201, 183, 126, 157, 62, 62, 207, 200, 62, 245, 135, 232, 234, 98, 87, 185, 158, 16, 201, 91, 207, 34, 36, 166, 45, 99, 180, 53, 52, 62, 105, 186, 156, 199, 116, 141, 79, 27, 92, 174, 205, 210, 53, 164, 111, 248, 232, 31, 35, 94, 109, 245, 160, 182, 178, 105, 115, 72, 123, 66, 36, 15, 219, 134, 138, 169, 204, 24, 62, 116, 209, 33, 73, 134, 235, 119, 209, 67, 149, 87, 46, 199, 164, 131, 46, 77, 181, 85, 213, 105, 210, 223, 166, 60, 213, 245, 46, 177, 98, 123, 141, 174, 45, 121, 245, 153, 172, 152, 176, 169, 39, 207, 250, 93, 36, 70, 57, 161, 250, 231, 209, 254, 24, 182, 45, 194, 23, 121, 215, 27, 234, 223, 80, 125, 66, 109, 20, 106, 243, 60, 226, 168, 104, 41, 163, 78, 157, 252, 31];\nvar trieData$1 = {\n  type: type$1,\n  data: data$1\n};\nvar _class$6;\nvar _temp$2;\nvar decompositions = useData.decompositions;\nvar trie$1 = new UnicodeTrie(new Uint8Array(trieData$1.data));\nvar stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nvar IndicShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {\n  inherits(IndicShaper, _DefaultShaper);\n  function IndicShaper() {\n    classCallCheck(this, IndicShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n  IndicShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables);\n    plan.addStage(['locl', 'ccmp']);\n    plan.addStage(initialReordering);\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n    plan.addStage(finalReordering);\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  };\n  IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        var decomposed = d.map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n  return IndicShaper;\n}(DefaultShaper), _class$6.zeroMarkWidths = 'NONE', _temp$2);\nfunction indicCategory(glyph) {\n  return trie$1.get(glyph.codePoints[0]) >> 8;\n}\nfunction indicPosition(glyph) {\n  return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);\n}\nvar IndicInfo = function IndicInfo(category, position, syllableType, syllable) {\n  classCallCheck(this, IndicInfo);\n  this.category = category;\n  this.position = position;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\nfunction setupSyllables(font, glyphs) {\n  var syllable = 0;\n  var last = 0;\n  for (var _iterator = stateMachine.match(glyphs.map(indicCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var _ref2 = _ref,\n      start = _ref2[0],\n      end = _ref2[1],\n      tags$$1 = _ref2[2];\n    if (start > last) {\n      ++syllable;\n      for (var _i2 = last; _i2 < start; _i2++) {\n        glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n    ++syllable;\n\n    // Create shaper info\n    for (var _i3 = start; _i3 <= end; _i3++) {\n      glyphs[_i3].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i3]), indicPosition(glyphs[_i3]), tags$$1[0], syllable);\n    }\n    last = end + 1;\n  }\n  if (last < glyphs.length) {\n    ++syllable;\n    for (var i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\nfunction wouldSubstitute(glyphs, feature) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _glyph$features;\n    var _ref3;\n    if (_isArray2) {\n      if (_i4 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i4++];\n    } else {\n      _i4 = _iterator2.next();\n      if (_i4.done) break;\n      _ref3 = _i4.value;\n    }\n    var glyph = _ref3;\n    glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);\n  }\n  var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n  return glyphs.length === 1;\n}\nfunction consonantPosition(font, consonant, virama) {\n  var glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n  return POSITIONS.Base_C;\n}\nfunction initialReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  var virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    var info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    var _glyphs$start$shaperI = glyphs[start].shaperInfo,\n      category = _glyphs$start$shaperI.category,\n      syllableType = _glyphs$start$shaperI.syllableType;\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n\n      // Insert after possible Repha.\n      var _i5 = start;\n      while (_i5 < end && glyphs[_i5].shaperInfo.category === CATEGORIES.Repha) {\n        _i5++;\n      }\n      glyphs.splice(_i5++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    var base = end;\n    var limit = start;\n    var hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          var _i6 = end;\n          var seenBelow = false;\n          do {\n            var _info = glyphs[--_i6].shaperInfo;\n\n            // until a consonant is found\n            if (isConsonant(glyphs[_i6])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {\n                base = _i6;\n                break;\n              }\n\n              // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n              if (_info.position === POSITIONS.Below_C) {\n                seenBelow = true;\n              }\n              base = _i6;\n            } else if (start < _i6 && _info.category === CATEGORIES.ZWJ && glyphs[_i6 - 1].shaperInfo.category === CATEGORIES.H) {\n              // A ZWJ after a Halant stops the base search, and requests an explicit\n              // half form.\n              // A ZWJ before a Halant, requests a subjoined form instead, and hence\n              // search continues.  This is particularly important for Bengali\n              // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n              break;\n            }\n          } while (_i6 > limit);\n          break;\n        }\n      case 'First':\n        {\n          // The first consonant is always the base.\n          base = start;\n\n          // Mark all subsequent consonants as below.\n          for (var _i7 = base + 1; _i7 < end; _i7++) {\n            if (isConsonant(glyphs[_i7])) {\n              glyphs[_i7].shaperInfo.position = POSITIONS.Below_C;\n            }\n          }\n        }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (var _i8 = start; _i8 < base; _i8++) {\n      var _info2 = glyphs[_i8].shaperInfo;\n      _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);\n    }\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (var _i9 = base + 1; _i9 < end; _i9++) {\n      if (glyphs[_i9].shaperInfo.category === CATEGORIES.M) {\n        for (var j = _i9 + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (var _i10 = base + 1; _i10 < end; _i10++) {\n        if (glyphs[_i10].shaperInfo.category === CATEGORIES.H) {\n          var _j = void 0;\n          for (_j = end - 1; _j > _i10; _j--) {\n            if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {\n              break;\n            }\n          }\n          if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i10) {\n            // Move Halant to after last consonant.\n            var t = glyphs[_i10];\n            glyphs.splice.apply(glyphs, [_i10, 0].concat(glyphs.splice(_i10 + 1, _j - _i10)));\n            glyphs[_j] = t;\n          }\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    var lastPos = POSITIONS.Start;\n    for (var _i11 = start; _i11 < end; _i11++) {\n      var _info3 = glyphs[_i11].shaperInfo;\n      if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {\n        _info3.position = lastPos;\n        if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (var _j2 = _i11; _j2 > start; _j2--) {\n            if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              _info3.position = glyphs[_j2 - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (_info3.position !== POSITIONS.SMVD) {\n        lastPos = _info3.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    var last = base;\n    for (var _i12 = base + 1; _i12 < end; _i12++) {\n      if (isConsonant(glyphs[_i12])) {\n        for (var _j3 = last + 1; _j3 < _i12; _j3++) {\n          if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[_j3].shaperInfo.position = glyphs[_i12].shaperInfo.position;\n          }\n        }\n        last = _i12;\n      } else if (glyphs[_i12].shaperInfo.category === CATEGORIES.M) {\n        last = _i12;\n      }\n    }\n    var arr = glyphs.slice(start, end);\n    arr.sort(function (a, b) {\n      return a.shaperInfo.position - b.shaperInfo.position;\n    });\n    glyphs.splice.apply(glyphs, [start, arr.length].concat(arr));\n\n    // Find base again\n    for (var _i13 = start; _i13 < end; _i13++) {\n      if (glyphs[_i13].shaperInfo.position === POSITIONS.Base_C) {\n        base = _i13;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (var _i14 = start; _i14 < end && glyphs[_i14].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i14++) {\n      glyphs[_i14].features.rphf = true;\n    }\n\n    // Pre-base\n    var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (var _i15 = start; _i15 < base; _i15++) {\n      glyphs[_i15].features.half = true;\n      if (blwf) {\n        glyphs[_i15].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (var _i16 = base + 1; _i16 < end; _i16++) {\n      glyphs[_i16].features.abvf = true;\n      glyphs[_i16].features.pstf = true;\n      glyphs[_i16].features.blwf = true;\n    }\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (var _i17 = start; _i17 + 1 < base; _i17++) {\n        if (glyphs[_i17].shaperInfo.category === CATEGORIES.Ra && glyphs[_i17 + 1].shaperInfo.category === CATEGORIES.H && (_i17 + 1 === base || glyphs[_i17 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n          glyphs[_i17].features.blwf = true;\n          glyphs[_i17 + 1].features.blwf = true;\n        }\n      }\n    }\n    var prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (var _i18 = base + 1; _i18 + prefLen - 1 < end; _i18++) {\n        var _g2 = [glyphs[_i18].copy(), glyphs[_i18 + 1].copy()];\n        if (wouldSubstitute(_g2, 'pref')) {\n          for (var _j4 = 0; _j4 < prefLen; _j4++) {\n            glyphs[_i18++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; _i18 < end; _i18++) {\n              glyphs[_i18].features.cfar = true;\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (var _i19 = start + 1; _i19 < end; _i19++) {\n      if (isJoiner(glyphs[_i19])) {\n        var nonJoiner = glyphs[_i19].shaperInfo.category === CATEGORIES.ZWNJ;\n        var _j5 = _i19;\n        do {\n          _j5--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[_j5].features.half;\n          }\n        } while (_j5 > start && !isConsonant(glyphs[_j5]));\n      }\n    }\n  }\n}\nfunction finalReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    var tryPref = !!features.pref;\n\n    // Find base again\n    var base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (var i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (var _i20 = base + 1; _i20 < end; _i20++) {\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n            if (_i20 === end || !isHalantOrCoeng(glyphs[_i20])) {\n              break;\n            }\n            _i20++; // Skip halant.\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n            if (_i20 < end && isConsonant(glyphs[_i20]) && glyphs[_i20].shaperInfo.position === POSITIONS.Below_C) {\n              base = _i20;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) {\n      // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      var newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (var _i21 = newPos; _i21 > start; _i21--) {\n          if (glyphs[_i21 - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            var oldPos = _i21 - 1;\n            if (oldPos < base && base <= newPos) {\n              // Shouldn't actually happen.\n              base--;\n            }\n            var tmp = glyphs[oldPos];\n            glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));\n            glyphs[newPos] = tmp;\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      var newRephPos = void 0;\n      var rephPos = indicConfig.rephPos;\n      var found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (var _i22 = base + 1; _i22 < newRephPos; _i22++) {\n            if (glyphs[_i22].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n      var reph = glyphs[start];\n      glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));\n      glyphs[newRephPos] = reph;\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (var _i23 = base + 1; _i23 < end; _i23++) {\n        if (glyphs[_i23].features.pref) {\n          // 1. Only reorder a glyph produced by substitution during application\n          //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n          //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[_i23].isLigated && !glyphs[_i23].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            var _newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                _newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                var _oldPos2 = _i23;\n                for (var j = base + 1; j < _oldPos2; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    _newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n            if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (_newPos < end && isJoiner(glyphs[_newPos])) {\n                _newPos++;\n              }\n            }\n            var _oldPos = _i23;\n            var _tmp = glyphs[_oldPos];\n            glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));\n            glyphs[_newPos] = _tmp;\n            if (_newPos <= base && base < _oldPos) {\n              base++;\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\nvar type$2 = \"Buffer\";\nvar data$2 = [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 169, 208, 1, 81, 12, 174, 243, 237, 156, 127, 168, 29, 71, 21, 199, 231, 221, 247, 222, 253, 245, 110, 94, 242, 108, 126, 244, 217, 24, 155, 182, 20, 35, 98, 173, 138, 105, 21, 12, 109, 197, 90, 5, 83, 21, 141, 69, 169, 173, 149, 38, 42, 216, 7, 66, 26, 80, 82, 193, 104, 161, 137, 86, 37, 226, 175, 170, 49, 40, 36, 129, 162, 45, 20, 76, 171, 96, 219, 32, 54, 234, 31, 166, 138, 86, 13, 180, 193, 254, 209, 98, 181, 85, 12, 175, 180, 20, 191, 227, 206, 225, 158, 119, 50, 51, 59, 179, 187, 179, 123, 159, 185, 7, 62, 204, 238, 236, 236, 204, 153, 51, 115, 118, 103, 102, 127, 60, 223, 82, 106, 98, 82, 169, 30, 152, 3, 27, 193, 38, 112, 41, 184, 220, 196, 205, 87, 16, 190, 21, 188, 29, 188, 27, 124, 192, 147, 238, 122, 112, 179, 37, 126, 7, 88, 0, 59, 193, 110, 240, 69, 240, 101, 176, 31, 220, 101, 248, 33, 75, 127, 8, 252, 4, 252, 20, 252, 194, 146, 223, 207, 192, 49, 240, 60, 234, 255, 107, 163, 219, 156, 65, 199, 81, 248, 40, 194, 63, 128, 147, 224, 73, 240, 12, 248, 55, 120, 1, 76, 78, 41, 53, 3, 230, 192, 60, 216, 8, 54, 129, 75, 192, 102, 176, 101, 42, 75, 127, 53, 194, 173, 96, 27, 248, 8, 216, 14, 110, 1, 59, 193, 110, 176, 7, 236, 3, 251, 193, 93, 224, 32, 56, 2, 238, 53, 251, 247, 131, 135, 192, 113, 112, 2, 60, 6, 158, 0, 79, 129, 231, 192, 105, 240, 210, 84, 166, 115, 123, 90, 169, 89, 176, 118, 58, 219, 223, 128, 240, 98, 240, 90, 240, 6, 240, 22, 112, 37, 120, 167, 57, 254, 94, 132, 31, 4, 55, 128, 29, 96, 97, 58, 171, 183, 102, 23, 219, 174, 130, 207, 33, 191, 61, 21, 231, 201, 217, 43, 242, 254, 42, 246, 191, 5, 126, 0, 14, 131, 123, 166, 179, 250, 30, 5, 15, 130, 71, 192, 239, 114, 244, 121, 12, 199, 159, 0, 79, 129, 127, 152, 243, 79, 131, 23, 193, 84, 91, 169, 65, 59, 139, 91, 141, 112, 61, 184, 8, 188, 166, 61, 236, 75, 111, 196, 246, 102, 176, 5, 92, 13, 182, 130, 109, 230, 156, 235, 77, 120, 51, 194, 79, 129, 237, 172, 15, 238, 196, 254, 238, 118, 58, 91, 17, 95, 64, 25, 95, 2, 95, 7, 223, 5, 63, 2, 119, 179, 114, 239, 195, 246, 207, 193, 49, 19, 119, 28, 225, 9, 240, 71, 112, 50, 64, 191, 39, 145, 230, 153, 118, 102, 171, 103, 193, 34, 56, 4, 84, 71, 169, 110, 39, 139, 95, 129, 112, 208, 201, 210, 175, 52, 113, 154, 181, 108, 155, 179, 1, 241, 23, 131, 87, 139, 227, 175, 119, 164, 39, 46, 235, 100, 101, 79, 49, 189, 125, 233, 121, 186, 162, 232, 60, 222, 132, 114, 183, 128, 171, 192, 53, 96, 43, 216, 6, 62, 220, 241, 159, 123, 147, 56, 62, 152, 60, 51, 205, 39, 145, 230, 211, 224, 51, 157, 172, 223, 124, 158, 217, 224, 164, 167, 94, 119, 32, 221, 87, 192, 55, 193, 1, 135, 30, 54, 255, 63, 212, 25, 214, 235, 199, 157, 172, 175, 220, 135, 240, 1, 83, 174, 222, 126, 216, 108, 223, 157, 99, 219, 42, 236, 59, 102, 204, 217, 200, 216, 127, 198, 140, 25, 51, 102, 204, 152, 49, 99, 198, 196, 50, 103, 153, 79, 54, 205, 225, 246, 112, 77, 96, 123, 128, 126, 191, 98, 115, 215, 223, 136, 121, 236, 39, 60, 231, 83, 221, 127, 143, 115, 254, 218, 201, 214, 97, 254, 134, 240, 239, 224, 159, 224, 52, 120, 201, 196, 183, 187, 208, 167, 155, 165, 95, 131, 112, 30, 108, 4, 155, 186, 217, 241, 75, 17, 94, 14, 174, 48, 251, 215, 32, 124, 15, 184, 174, 235, 46, 95, 167, 187, 209, 115, 124, 204, 152, 49, 99, 198, 164, 101, 110, 178, 89, 154, 174, 255, 152, 49, 99, 210, 144, 218, 191, 119, 96, 252, 184, 208, 205, 158, 11, 221, 138, 240, 54, 203, 120, 242, 246, 110, 246, 108, 95, 111, 223, 41, 142, 127, 99, 4, 198, 159, 31, 27, 100, 236, 1, 199, 192, 219, 2, 88, 4, 151, 173, 88, 26, 183, 139, 237, 31, 192, 246, 159, 192, 185, 179, 74, 93, 11, 22, 102, 77, 60, 194, 199, 103, 135, 233, 158, 197, 246, 1, 216, 224, 113, 112, 126, 79, 169, 15, 129, 239, 128, 27, 176, 255, 189, 118, 22, 254, 210, 236, 115, 218, 253, 51, 227, 36, 87, 34, 205, 71, 89, 186, 131, 216, 62, 101, 246, 47, 152, 193, 49, 112, 112, 166, 249, 251, 79, 211, 228, 249, 203, 247, 181, 237, 76, 63, 61, 130, 240, 30, 112, 180, 155, 205, 19, 31, 236, 198, 223, 79, 247, 154, 52, 131, 156, 244, 182, 252, 30, 41, 80, 158, 43, 95, 121, 254, 111, 145, 247, 163, 221, 165, 233, 72, 223, 189, 158, 242, 254, 130, 115, 78, 129, 167, 187, 195, 186, 233, 116, 207, 97, 255, 63, 38, 191, 23, 88, 190, 147, 61, 119, 253, 108, 249, 199, 182, 101, 108, 251, 207, 64, 159, 21, 96, 13, 88, 15, 46, 2, 175, 2, 15, 152, 252, 94, 135, 237, 205, 96, 11, 184, 202, 28, 127, 23, 120, 159, 241, 215, 155, 192, 142, 222, 48, 191, 5, 108, 239, 2, 159, 5, 123, 192, 62, 240, 53, 240, 109, 112, 176, 151, 175, 143, 126, 159, 230, 8, 210, 221, 235, 72, 171, 231, 237, 247, 227, 216, 67, 189, 225, 254, 113, 108, 159, 96, 251, 127, 238, 101, 239, 150, 232, 253, 83, 216, 126, 218, 83, 110, 81, 91, 219, 242, 104, 218, 151, 99, 124, 189, 46, 92, 229, 255, 171, 23, 231, 167, 203, 217, 86, 77, 151, 191, 216, 91, 154, 239, 139, 198, 246, 45, 220, 15, 251, 253, 102, 108, 62, 138, 109, 62, 74, 253, 109, 208, 175, 215, 38, 190, 119, 132, 238, 48, 239, 19, 173, 238, 103, 225, 121, 8, 47, 4, 155, 204, 254, 37, 253, 97, 218, 205, 125, 127, 254, 189, 142, 255, 62, 220, 20, 121, 239, 73, 133, 188, 71, 245, 102, 211, 102, 87, 32, 124, 71, 205, 237, 87, 117, 255, 91, 110, 126, 233, 211, 61, 164, 14, 186, 13, 175, 101, 253, 88, 191, 187, 247, 126, 236, 95, 215, 207, 250, 255, 97, 246, 126, 163, 78, 183, 200, 222, 49, 189, 17, 251, 31, 55, 113, 183, 228, 244, 127, 27, 139, 145, 125, 141, 222, 49, 60, 29, 144, 86, 191, 11, 120, 107, 127, 105, 28, 127, 47, 241, 97, 51, 166, 166, 186, 223, 102, 194, 219, 17, 238, 235, 12, 245, 191, 83, 212, 107, 191, 217, 63, 106, 25, 147, 47, 71, 22, 91, 19, 255, 99, 20, 100, 130, 209, 18, 251, 60, 13, 133, 147, 236, 248, 84, 32, 50, 63, 229, 136, 75, 45, 163, 97, 241, 177, 144, 80, 95, 106, 89, 160, 182, 106, 89, 206, 107, 137, 112, 218, 64, 18, 210, 183, 82, 247, 133, 201, 196, 249, 87, 45, 237, 166, 21, 40, 33, 33, 109, 121, 54, 249, 190, 205, 103, 206, 38, 153, 112, 48, 10, 34, 245, 224, 215, 188, 229, 46, 182, 49, 131, 220, 94, 46, 82, 180, 207, 216, 198, 82, 69, 218, 87, 218, 111, 57, 217, 176, 46, 191, 11, 205, 59, 198, 246, 85, 251, 33, 111, 123, 215, 117, 41, 143, 255, 119, 113, 205, 59, 202, 74, 81, 123, 147, 14, 29, 6, 166, 158, 193, 243, 157, 170, 233, 1, 76, 129, 213, 140, 217, 215, 219, 3, 19, 174, 16, 244, 4, 125, 193, 44, 59, 151, 234, 184, 146, 217, 172, 199, 242, 10, 213, 143, 210, 23, 153, 23, 170, 18, 118, 33, 253, 187, 134, 144, 188, 148, 72, 39, 247, 139, 232, 16, 114, 156, 139, 75, 167, 144, 246, 37, 25, 24, 228, 190, 110, 223, 16, 31, 234, 91, 226, 92, 117, 146, 101, 199, 218, 40, 239, 254, 231, 59, 206, 253, 207, 87, 182, 175, 46, 69, 116, 142, 109, 223, 188, 109, 45, 51, 38, 180, 181, 175, 20, 242, 95, 185, 63, 107, 73, 235, 147, 144, 254, 152, 119, 142, 11, 221, 46, 171, 84, 54, 215, 165, 249, 238, 92, 164, 126, 161, 237, 235, 107, 147, 24, 157, 171, 106, 223, 162, 254, 75, 109, 202, 175, 209, 74, 45, 189, 62, 87, 37, 101, 253, 151, 198, 174, 121, 101, 228, 149, 223, 132, 253, 233, 222, 87, 228, 250, 153, 39, 210, 55, 101, 125, 165, 158, 69, 237, 223, 18, 245, 43, 42, 218, 191, 242, 238, 181, 182, 122, 184, 108, 110, 75, 171, 44, 233, 93, 233, 92, 229, 216, 226, 67, 251, 16, 23, 242, 37, 62, 254, 225, 50, 80, 75, 219, 159, 239, 135, 250, 159, 237, 254, 233, 146, 34, 245, 176, 173, 137, 230, 173, 21, 240, 177, 80, 204, 120, 40, 198, 31, 203, 250, 115, 172, 29, 244, 190, 111, 60, 171, 212, 153, 215, 82, 190, 159, 215, 158, 52, 222, 181, 217, 65, 74, 89, 127, 46, 35, 212, 230, 69, 198, 187, 77, 181, 175, 43, 45, 137, 188, 94, 167, 104, 95, 155, 255, 75, 145, 186, 150, 105, 223, 151, 25, 138, 72, 89, 191, 41, 226, 99, 100, 127, 9, 183, 65, 222, 245, 242, 156, 128, 186, 133, 180, 65, 29, 254, 37, 215, 26, 108, 235, 14, 49, 254, 85, 68, 183, 20, 109, 25, 147, 46, 68, 15, 46, 54, 31, 227, 125, 133, 124, 145, 218, 108, 5, 75, 51, 112, 224, 235, 15, 177, 54, 37, 61, 138, 172, 29, 213, 233, 115, 33, 109, 211, 99, 113, 114, 45, 199, 54, 142, 37, 105, 41, 127, 222, 250, 252, 142, 96, 149, 9, 245, 177, 178, 207, 243, 165, 61, 21, 11, 243, 226, 93, 18, 219, 207, 229, 113, 101, 9, 109, 186, 196, 218, 95, 153, 253, 57, 71, 190, 46, 63, 146, 246, 87, 44, 204, 171, 155, 45, 79, 91, 188, 124, 134, 94, 148, 22, 11, 229, 152, 211, 53, 38, 173, 218, 39, 116, 158, 211, 34, 92, 165, 220, 18, 234, 99, 169, 253, 152, 11, 95, 147, 117, 173, 209, 74, 104, 140, 199, 247, 59, 106, 184, 198, 234, 171, 239, 234, 8, 84, 100, 250, 20, 104, 201, 155, 235, 76, 123, 142, 241, 243, 93, 253, 216, 230, 19, 54, 73, 221, 55, 98, 176, 221, 91, 53, 3, 101, 239, 47, 122, 13, 95, 247, 153, 89, 19, 183, 6, 172, 85, 217, 53, 106, 46, 178, 108, 105, 67, 122, 79, 39, 79, 87, 215, 115, 131, 57, 181, 84, 143, 190, 26, 142, 177, 100, 30, 93, 11, 60, 47, 89, 247, 34, 182, 157, 83, 195, 177, 9, 229, 99, 43, 183, 107, 236, 58, 101, 209, 195, 7, 157, 75, 237, 215, 196, 243, 125, 91, 31, 111, 250, 89, 99, 158, 159, 87, 97, 167, 84, 245, 72, 97, 163, 162, 247, 23, 25, 39, 199, 38, 41, 203, 183, 193, 203, 143, 177, 81, 213, 229, 199, 74, 21, 246, 87, 53, 151, 159, 167, 155, 22, 126, 223, 176, 205, 29, 92, 115, 50, 130, 198, 31, 125, 53, 28, 123, 232, 123, 240, 58, 149, 141, 191, 166, 25, 180, 6, 163, 183, 165, 143, 200, 251, 48, 181, 85, 108, 253, 83, 137, 239, 26, 88, 199, 117, 81, 223, 87, 171, 238, 3, 49, 54, 229, 125, 67, 142, 55, 8, 57, 86, 227, 114, 174, 97, 37, 219, 150, 204, 155, 124, 166, 45, 231, 203, 107, 125, 236, 251, 3, 85, 251, 77, 217, 190, 87, 180, 220, 162, 231, 75, 248, 186, 85, 25, 253, 164, 132, 222, 183, 83, 147, 178, 15, 144, 31, 208, 218, 20, 191, 78, 165, 236, 151, 52, 70, 215, 190, 178, 142, 49, 47, 208, 50, 203, 116, 115, 249, 43, 159, 99, 146, 95, 219, 174, 241, 114, 110, 201, 225, 215, 119, 146, 233, 136, 58, 185, 164, 236, 249, 121, 227, 214, 212, 99, 90, 110, 35, 221, 70, 117, 191, 19, 166, 239, 189, 182, 57, 161, 92, 87, 112, 181, 245, 108, 78, 254, 82, 66, 245, 202, 91, 71, 10, 225, 229, 224, 60, 19, 186, 136, 157, 59, 52, 213, 78, 28, 126, 255, 180, 93, 99, 200, 151, 103, 89, 186, 212, 253, 70, 174, 221, 83, 72, 215, 158, 144, 103, 102, 90, 100, 91, 187, 234, 46, 175, 65, 124, 189, 96, 157, 135, 245, 6, 125, 237, 161, 119, 167, 92, 101, 199, 92, 159, 185, 132, 92, 119, 66, 165, 236, 220, 154, 95, 95, 116, 250, 149, 14, 40, 141, 45, 190, 235, 57, 143, 191, 231, 73, 98, 139, 163, 113, 68, 71, 196, 119, 44, 113, 49, 242, 10, 176, 129, 237, 79, 58, 8, 181, 151, 92, 159, 138, 181, 119, 204, 122, 72, 72, 124, 108, 222, 242, 222, 21, 115, 158, 150, 87, 6, 212, 49, 70, 108, 99, 244, 208, 243, 228, 120, 161, 14, 105, 114, 44, 170, 28, 219, 174, 227, 161, 245, 9, 57, 47, 79, 39, 91, 104, 43, 39, 70, 175, 178, 245, 168, 114, 253, 51, 70, 31, 223, 24, 33, 180, 77, 93, 249, 132, 30, 47, 210, 183, 108, 229, 87, 93, 142, 111, 236, 20, 34, 177, 249, 165, 210, 183, 108, 154, 148, 246, 108, 162, 92, 87, 91, 142, 130, 14, 117, 233, 209, 132, 52, 173, 219, 40, 244, 229, 24, 61, 38, 19, 235, 236, 179, 187, 28, 115, 150, 181, 95, 21, 246, 175, 67, 242, 202, 170, 195, 254, 117, 181, 115, 19, 253, 42, 69, 191, 41, 42, 41, 250, 87, 213, 58, 22, 121, 246, 226, 154, 135, 185, 242, 204, 91, 47, 116, 157, 95, 180, 14, 69, 230, 114, 182, 244, 82, 175, 186, 165, 78, 255, 169, 203, 63, 235, 180, 135, 77, 228, 218, 104, 25, 61, 138, 156, 151, 66, 242, 234, 91, 85, 59, 184, 242, 169, 187, 31, 196, 74, 83, 253, 186, 108, 157, 71, 193, 247, 82, 60, 199, 161, 124, 99, 211, 242, 117, 98, 190, 110, 108, 123, 15, 173, 99, 137, 171, 18, 190, 134, 78, 107, 248, 69, 109, 31, 122, 94, 213, 117, 136, 93, 175, 181, 189, 15, 88, 39, 250, 25, 173, 237, 91, 25, 23, 161, 223, 18, 150, 121, 126, 193, 197, 246, 44, 183, 8, 121, 122, 186, 198, 38, 46, 125, 109, 239, 56, 243, 103, 18, 177, 245, 15, 65, 62, 23, 149, 207, 74, 249, 115, 38, 106, 215, 24, 209, 250, 54, 249, 44, 88, 66, 207, 248, 92, 239, 12, 211, 115, 96, 253, 60, 110, 141, 129, 254, 21, 17, 11, 73, 209, 254, 234, 107, 111, 122, 239, 34, 181, 189, 66, 203, 176, 189, 95, 193, 159, 177, 83, 156, 124, 223, 58, 68, 120, 57, 235, 2, 116, 161, 190, 106, 59, 63, 196, 254, 178, 29, 171, 182, 33, 23, 126, 63, 209, 199, 232, 121, 98, 149, 126, 210, 99, 33, 181, 131, 108, 55, 215, 121, 116, 127, 166, 176, 78, 41, 98, 127, 221, 215, 120, 223, 235, 43, 251, 125, 147, 190, 1, 8, 17, 158, 191, 237, 155, 121, 254, 94, 224, 132, 201, 187, 238, 239, 158, 203, 136, 28, 207, 156, 95, 146, 208, 57, 188, 79, 66, 230, 252, 182, 99, 121, 105, 93, 229, 248, 210, 209, 220, 44, 197, 248, 218, 166, 71, 75, 249, 109, 102, 91, 151, 137, 41, 67, 198, 41, 101, 183, 117, 93, 34, 251, 159, 109, 205, 35, 239, 156, 50, 229, 165, 154, 59, 21, 145, 81, 153, 159, 151, 153, 195, 74, 29, 203, 206, 133, 155, 92, 147, 160, 242, 235, 166, 42, 73, 221, 167, 83, 231, 31, 98, 15, 125, 239, 148, 223, 124, 251, 190, 53, 161, 116, 244, 46, 88, 200, 120, 173, 170, 177, 88, 200, 125, 95, 207, 81, 102, 212, 153, 239, 242, 105, 201, 123, 55, 53, 100, 28, 17, 51, 119, 9, 145, 212, 254, 89, 149, 158, 203, 89, 7, 95, 153, 124, 206, 64, 255, 85, 73, 217, 95, 109, 243, 4, 215, 55, 84, 190, 127, 110, 230, 205, 171, 165, 108, 44, 73, 29, 227, 240, 11, 84, 243, 255, 66, 181, 253, 87, 79, 190, 211, 172, 109, 175, 175, 47, 182, 113, 51, 95, 227, 106, 66, 127, 87, 223, 242, 125, 219, 77, 199, 232, 187, 110, 21, 81, 70, 89, 127, 174, 178, 190, 178, 77, 234, 46, 223, 247, 79, 70, 159, 31, 235, 115, 207, 81, 195, 127, 28, 217, 252, 121, 70, 13, 219, 138, 215, 47, 198, 47, 109, 115, 188, 170, 109, 64, 101, 133, 74, 149, 101, 22, 109, 51, 249, 156, 67, 254, 247, 64, 183, 209, 42, 67, 222, 245, 54, 68, 71, 91, 186, 178, 182, 136, 57, 223, 231, 31, 85, 247, 133, 24, 180, 173, 125, 215, 95, 98, 70, 185, 199, 167, 101, 251, 40, 191, 255, 140, 250, 255, 158, 125, 105, 73, 248, 255, 239, 228, 218, 155, 252, 6, 167, 204, 255, 74, 149, 10, 123, 190, 33, 253, 142, 36, 244, 89, 81, 204, 179, 36, 95, 249, 69, 9, 185, 198, 211, 61, 150, 127, 139, 68, 223, 188, 83, 223, 162, 49, 4, 181, 85, 232, 61, 171, 108, 255, 78, 85, 119, 18, 219, 119, 254, 178, 206, 33, 115, 168, 162, 72, 157, 203, 254, 87, 220, 102, 3, 249, 47, 26, 215, 61, 158, 210, 241, 250, 247, 148, 253, 190, 17, 42, 117, 182, 63, 255, 71, 84, 222, 53, 153, 218, 182, 42, 253, 203, 194, 69, 63, 43, 211, 207, 205, 46, 84, 249, 255, 60, 146, 117, 43, 171, 191, 92, 155, 46, 43, 169, 230, 208, 41, 231, 227, 77, 205, 243, 201, 230, 190, 181, 193, 170, 218, 165, 168, 200, 181, 244, 208, 53, 226, 186, 215, 79, 235, 88, 67, 15, 201, 191, 174, 58, 143, 226, 122, 180, 77, 108, 101, 52, 213, 159, 171, 170, 119, 136, 61, 99, 108, 79, 219, 117, 172, 63, 142, 98, 191, 43, 155, 71, 138, 190, 159, 194, 135, 83, 248, 97, 234, 114, 203, 232, 86, 84, 63, 223, 249, 85, 151, 95, 149, 254, 77, 151, 95, 101, 159, 138, 45, 191, 73, 249, 47];\nvar trieData$2 = {\n  type: type$2,\n  data: data$2\n};\nvar _class$7;\nvar _temp$3;\nvar categories$1 = useData.categories;\nvar decompositions$2 = useData.decompositions;\nvar trie$2 = new UnicodeTrie(new Uint8Array(trieData$2.data));\nvar stateMachine$1 = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nvar UniversalShaper = (_temp$3 = _class$7 = function (_DefaultShaper) {\n  inherits(UniversalShaper, _DefaultShaper);\n  function UniversalShaper() {\n    classCallCheck(this, UniversalShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n  UniversalShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables$1);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  };\n  UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      if (decompositions$2[codepoint]) {\n        var decomposed = decompositions$2[codepoint].map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n  return UniversalShaper;\n}(DefaultShaper), _class$7.zeroMarkWidths = 'BEFORE_GPOS', _temp$3);\nfunction useCategory(glyph) {\n  return trie$2.get(glyph.codePoints[0]);\n}\nvar USEInfo = function USEInfo(category, syllableType, syllable) {\n  classCallCheck(this, USEInfo);\n  this.category = category;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\nfunction setupSyllables$1(font, glyphs) {\n  var syllable = 0;\n  for (var _iterator = stateMachine$1.match(glyphs.map(useCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var _ref2 = _ref,\n      start = _ref2[0],\n      end = _ref2[1],\n      tags = _ref2[2];\n    ++syllable;\n\n    // Create shaper info\n    for (var i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (var _i2 = start; _i2 < start + limit; _i2++) {\n      glyphs[_i2].features.rphf = true;\n    }\n  }\n}\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref3;\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref3 = _i3.value;\n    }\n    var glyph = _ref3;\n    glyph.substituted = false;\n  }\n}\nfunction recordRphf(font, glyphs) {\n  for (var _iterator3 = glyphs, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref4;\n    if (_isArray3) {\n      if (_i4 >= _iterator3.length) break;\n      _ref4 = _iterator3[_i4++];\n    } else {\n      _i4 = _iterator3.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n    var glyph = _ref4;\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\nfunction recordPref(font, glyphs) {\n  for (var _iterator4 = glyphs, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref5;\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref5 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n    var glyph = _ref5;\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\nfunction reorder(font, glyphs) {\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {\n    var i = void 0,\n      j = void 0;\n    var info = glyphs[start].shaperInfo;\n    var type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n          glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));\n      }\n    }\n  }\n}\nfunction nextSyllable$1(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\nvar SHAPERS = {\n  arab: ArabicShaper,\n  // Arabic\n  mong: ArabicShaper,\n  // Mongolian\n  syrc: ArabicShaper,\n  // Syriac\n  'nko ': ArabicShaper,\n  // N'Ko\n  phag: ArabicShaper,\n  // Phags Pa\n  mand: ArabicShaper,\n  // Mandaic\n  mani: ArabicShaper,\n  // Manichaean\n  phlp: ArabicShaper,\n  // Psalter Pahlavi\n\n  hang: HangulShaper,\n  // Hangul\n\n  bng2: IndicShaper,\n  // Bengali\n  beng: IndicShaper,\n  // Bengali\n  dev2: IndicShaper,\n  // Devanagari\n  deva: IndicShaper,\n  // Devanagari\n  gjr2: IndicShaper,\n  // Gujarati\n  gujr: IndicShaper,\n  // Gujarati\n  guru: IndicShaper,\n  // Gurmukhi\n  gur2: IndicShaper,\n  // Gurmukhi\n  knda: IndicShaper,\n  // Kannada\n  knd2: IndicShaper,\n  // Kannada\n  mlm2: IndicShaper,\n  // Malayalam\n  mlym: IndicShaper,\n  // Malayalam\n  ory2: IndicShaper,\n  // Oriya\n  orya: IndicShaper,\n  // Oriya\n  taml: IndicShaper,\n  // Tamil\n  tml2: IndicShaper,\n  // Tamil\n  telu: IndicShaper,\n  // Telugu\n  tel2: IndicShaper,\n  // Telugu\n  khmr: IndicShaper,\n  // Khmer\n\n  bali: UniversalShaper,\n  // Balinese\n  batk: UniversalShaper,\n  // Batak\n  brah: UniversalShaper,\n  // Brahmi\n  bugi: UniversalShaper,\n  // Buginese\n  buhd: UniversalShaper,\n  // Buhid\n  cakm: UniversalShaper,\n  // Chakma\n  cham: UniversalShaper,\n  // Cham\n  dupl: UniversalShaper,\n  // Duployan\n  egyp: UniversalShaper,\n  // Egyptian Hieroglyphs\n  gran: UniversalShaper,\n  // Grantha\n  hano: UniversalShaper,\n  // Hanunoo\n  java: UniversalShaper,\n  // Javanese\n  kthi: UniversalShaper,\n  // Kaithi\n  kali: UniversalShaper,\n  // Kayah Li\n  khar: UniversalShaper,\n  // Kharoshthi\n  khoj: UniversalShaper,\n  // Khojki\n  sind: UniversalShaper,\n  // Khudawadi\n  lepc: UniversalShaper,\n  // Lepcha\n  limb: UniversalShaper,\n  // Limbu\n  mahj: UniversalShaper,\n  // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper,\n  // Meitei Mayek\n  modi: UniversalShaper,\n  // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper,\n  // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper,\n  // Rejang\n  saur: UniversalShaper,\n  // Saurashtra\n  shrd: UniversalShaper,\n  // Sharada\n  sidd: UniversalShaper,\n  // Siddham\n  sinh: UniversalShaper,\n  // Sinhala\n  sund: UniversalShaper,\n  // Sundanese\n  sylo: UniversalShaper,\n  // Syloti Nagri\n  tglg: UniversalShaper,\n  // Tagalog\n  tagb: UniversalShaper,\n  // Tagbanwa\n  tale: UniversalShaper,\n  // Tai Le\n  lana: UniversalShaper,\n  // Tai Tham\n  tavt: UniversalShaper,\n  // Tai Viet\n  takr: UniversalShaper,\n  // Takri\n  tibt: UniversalShaper,\n  // Tibetan\n  tfng: UniversalShaper,\n  // Tifinagh\n  tirh: UniversalShaper,\n  // Tirhuta\n\n  latn: DefaultShaper,\n  // Latin\n  DFLT: DefaultShaper // Default\n};\nfunction choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n  for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var s = _ref;\n    var shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n  return DefaultShaper;\n}\nvar GSUBProcessor = function (_OTProcessor) {\n  inherits(GSUBProcessor, _OTProcessor);\n  function GSUBProcessor() {\n    classCallCheck(this, GSUBProcessor);\n    return possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n  GSUBProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    var _this2 = this;\n    switch (lookupType) {\n      case 1:\n        {\n          // Single Substitution\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n          var glyph = this.glyphIterator.cur;\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          // Multiple Substitution\n          var _index = this.coverageIndex(table.coverage);\n          if (_index !== -1) {\n            var _glyphs;\n            var sequence = table.sequences.get(_index);\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n            var features = this.glyphIterator.cur.features;\n            var curGlyph = this.glyphIterator.cur;\n            var replacement = sequence.slice(1).map(function (gid, i) {\n              var glyph = new GlyphInfo(_this2.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n            (_glyphs = this.glyphs).splice.apply(_glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));\n            return true;\n          }\n          return false;\n        }\n      case 3:\n        {\n          // Alternate Substitution\n          var _index2 = this.coverageIndex(table.coverage);\n          if (_index2 !== -1) {\n            var USER_INDEX = 0; // TODO\n            this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];\n            return true;\n          }\n          return false;\n        }\n      case 4:\n        {\n          // Ligature Substitution\n          var _index3 = this.coverageIndex(table.coverage);\n          if (_index3 === -1) {\n            return false;\n          }\n          for (var _iterator = table.ligatureSets.get(_index3), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n            var ligature = _ref;\n            var matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) {\n              continue;\n            }\n            var _curGlyph = this.glyphIterator.cur;\n\n            // Concatenate all of the characters the new ligature will represent\n            var characters = _curGlyph.codePoints.slice();\n            for (var _iterator2 = matched, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n              var _ref2;\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref2 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref2 = _i2.value;\n              }\n              var _index4 = _ref2;\n              characters.push.apply(characters, this.glyphs[_index4].codePoints);\n            }\n\n            // Create the replacement ligature glyph\n            var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features, _curGlyph.stringIndex);\n            ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true;\n\n            // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n            var isMarkLigature = _curGlyph.isMark;\n            for (var i = 0; i < matched.length && isMarkLigature; i++) {\n              isMarkLigature = this.glyphs[matched[i]].isMark;\n            }\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n            var lastLigID = _curGlyph.ligatureID;\n            var lastNumComps = _curGlyph.codePoints.length;\n            var curComps = lastNumComps;\n            var idx = this.glyphIterator.index + 1;\n\n            // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n            for (var _iterator3 = matched, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n              var _ref3;\n              if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref3 = _iterator3[_i3++];\n              } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref3 = _i3.value;\n              }\n              var matchIndex = _ref3;\n\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) {\n                idx = matchIndex;\n              } else {\n                while (idx < matchIndex) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                  this.glyphs[idx].ligatureComponent = ligatureComponent;\n                  idx++;\n                }\n              }\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            }\n\n            // Adjust ligature components for any marks following\n            if (lastLigID && !isMarkLigature) {\n              for (var _i4 = idx; _i4 < this.glyphs.length; _i4++) {\n                if (this.glyphs[_i4].ligatureID === lastLigID) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i4].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[_i4].ligatureComponent = ligatureComponent;\n                } else {\n                  break;\n                }\n              }\n            }\n\n            // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n            for (var _i5 = matched.length - 1; _i5 >= 0; _i5--) {\n              this.glyphs.splice(matched[_i5], 1);\n            }\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n          return false;\n        }\n      case 5:\n        // Contextual Substitution\n        return this.applyContext(table);\n      case 6:\n        // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n      case 7:\n        // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error('GSUB lookupType ' + lookupType + ' is not supported');\n    }\n  };\n  return GSUBProcessor;\n}(OTProcessor);\nvar GPOSProcessor = function (_OTProcessor) {\n  inherits(GPOSProcessor, _OTProcessor);\n  function GPOSProcessor() {\n    classCallCheck(this, GPOSProcessor);\n    return possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n  GPOSProcessor.prototype.applyPositionValue = function applyPositionValue(sequenceIndex, value) {\n    var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  };\n  GPOSProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          // Single positioning value\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          // Pair Adjustment Positioning\n          var nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) {\n            return false;\n          }\n          var _index = this.coverageIndex(table.coverage);\n          if (_index === -1) {\n            return false;\n          }\n          switch (table.version) {\n            case 1:\n              // Adjustments for glyph pairs\n              var set$$1 = table.pairSets.get(_index);\n              for (var _iterator = set$$1, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n                var _ref;\n                if (_isArray) {\n                  if (_i >= _iterator.length) break;\n                  _ref = _iterator[_i++];\n                } else {\n                  _i = _iterator.next();\n                  if (_i.done) break;\n                  _ref = _i.value;\n                }\n                var _pair = _ref;\n                if (_pair.secondGlyph === nextGlyph.id) {\n                  this.applyPositionValue(0, _pair.value1);\n                  this.applyPositionValue(1, _pair.value2);\n                  return true;\n                }\n              }\n              return false;\n            case 2:\n              // Class pair adjustment\n              var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              var class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) {\n                return false;\n              }\n              var pair = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair.value1);\n              this.applyPositionValue(1, pair.value2);\n              return true;\n          }\n        }\n      case 3:\n        {\n          // Cursive Attachment Positioning\n          var nextIndex = this.glyphIterator.peekIndex();\n          var _nextGlyph = this.glyphs[nextIndex];\n          if (!_nextGlyph) {\n            return false;\n          }\n          var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) {\n            return false;\n          }\n          var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) {\n            return false;\n          }\n          var entry = this.getAnchor(nextRecord.entryAnchor);\n          var exit = this.getAnchor(curRecord.exitAnchor);\n          var cur = this.positions[this.glyphIterator.index];\n          var next = this.positions[nextIndex];\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n              var d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            _nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n          return true;\n        }\n      case 4:\n        {\n          // Mark to base positioning\n          var markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {}\n          if (baseGlyphIndex < 0) {\n            return false;\n          }\n          var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) {\n            return false;\n          }\n          var markRecord = table.markArray[markIndex];\n          var baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n      case 5:\n        {\n          // Mark to ligature positioning\n          var _markIndex = this.coverageIndex(table.markCoverage);\n          if (_markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var _baseGlyphIndex = this.glyphIterator.index;\n          while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}\n          if (_baseGlyphIndex < 0) {\n            return false;\n          }\n          var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);\n          if (ligIndex === -1) {\n            return false;\n          }\n          var ligAttach = table.ligatureArray[ligIndex];\n          var markGlyph = this.glyphIterator.cur;\n          var ligGlyph = this.glyphs[_baseGlyphIndex];\n          var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n          var _markRecord = table.markArray[_markIndex];\n          var _baseAnchor = ligAttach[compIndex][_markRecord.class];\n          this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);\n          return true;\n        }\n      case 6:\n        {\n          // Mark to mark positioning\n          var mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) {\n            return false;\n          }\n\n          // get the previous mark to attach to\n          var prevIndex = this.glyphIterator.peekIndex(-1);\n          var prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) {\n            return false;\n          }\n          var _cur = this.glyphIterator.cur;\n\n          // The following logic was borrowed from Harfbuzz\n          var good = false;\n          if (_cur.ligatureID === prev.ligatureID) {\n            if (!_cur.ligatureID) {\n              // Marks belonging to the same base\n              good = true;\n            } else if (_cur.ligatureComponent === prev.ligatureComponent) {\n              // Marks belonging to the same ligature component\n              good = true;\n            }\n          } else {\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {\n              good = true;\n            }\n          }\n          if (!good) {\n            return false;\n          }\n          var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) {\n            return false;\n          }\n          var _markRecord2 = table.mark1Array[mark1Index];\n          var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];\n          this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);\n          return true;\n        }\n      case 7:\n        // Contextual positioning\n        return this.applyContext(table);\n      case 8:\n        // Chaining contextual positioning\n        return this.applyChainingContext(table);\n      case 9:\n        // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error('Unsupported GPOS table: ' + lookupType);\n    }\n  };\n  GPOSProcessor.prototype.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    var baseCoords = this.getAnchor(baseAnchor);\n    var markCoords = this.getAnchor(markRecord.markAnchor);\n    var basePos = this.positions[baseGlyphIndex];\n    var markPos = this.positions[this.glyphIterator.index];\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  };\n  GPOSProcessor.prototype.getAnchor = function getAnchor(anchor) {\n    // TODO: contour point, device tables\n    var x = anchor.xCoordinate;\n    var y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n    return {\n      x: x,\n      y: y\n    };\n  };\n  GPOSProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n    this.fixMarkAttachment();\n  };\n  GPOSProcessor.prototype.fixCursiveAttachment = function fixCursiveAttachment(i) {\n    var glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      var j = glyph.cursiveAttachment;\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  };\n  GPOSProcessor.prototype.fixMarkAttachment = function fixMarkAttachment() {\n    for (var i = 0; i < this.glyphs.length; i++) {\n      var glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        var j = glyph.markAttachment;\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n        if (this.direction === 'ltr') {\n          for (var k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (var _k = j + 1; _k < i + 1; _k++) {\n            this.positions[i].xOffset += this.positions[_k].xAdvance;\n            this.positions[i].yOffset += this.positions[_k].yAdvance;\n          }\n        }\n      }\n    }\n  };\n  return GPOSProcessor;\n}(OTProcessor);\nvar OTLayoutEngine = function () {\n  function OTLayoutEngine(font) {\n    classCallCheck(this, OTLayoutEngine);\n    this.font = font;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n  OTLayoutEngine.prototype.setup = function setup(glyphRun) {\n    // Select a script based on what is available in GSUB/GPOS.\n    var script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, glyphRun.glyphs, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (var key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  };\n  OTLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, glyphRun.glyphs);\n    }\n  };\n  OTLayoutEngine.prototype.position = function position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun);\n    }\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, glyphRun.glyphs, glyphRun.positions);\n    }\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  };\n  OTLayoutEngine.prototype.zeroMarkAdvances = function zeroMarkAdvances(glyphRun) {\n    for (var i = 0; i < glyphRun.glyphs; i++) {\n      if (glyphRun.glyphs[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n  OTLayoutEngine.prototype.cleanup = function cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  };\n  OTLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push.apply(features, Object.keys(this.GSUBProcessor.features));\n    }\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push.apply(features, Object.keys(this.GPOSProcessor.features));\n    }\n    return features;\n  };\n  return OTLayoutEngine;\n}();\nvar LayoutEngine = function () {\n  function LayoutEngine(font) {\n    classCallCheck(this, LayoutEngine);\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n  LayoutEngine.prototype.layout = function layout(string, features, script, language, direction$$1) {\n    var _this = this;\n\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction$$1 = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Attempt to detect the script from the string if not provided.\n    if (script == null) {\n      script = forString(string);\n    }\n    var glyphs = this.glyphsForString(string);\n    var glyphRun = new GlyphRun(glyphs, features, script, language, direction$$1);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    // Map glyph infos back to normal Glyph objects\n    glyphRun.stringIndices = glyphRun.glyphs.map(function (glyphInfo) {\n      return glyphInfo.stringIndex;\n    });\n    glyphRun.glyphs = glyphRun.glyphs.map(function (glyphInfo) {\n      return _this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);\n    });\n    return glyphRun;\n  };\n  LayoutEngine.prototype.glyphsForString = function glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n      var stringIndex = idx - 1;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(new GlyphInfo(this.font, this.font._cmapProcessor.lookup(last, code), [last, code], null, stringIndex));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(new GlyphInfo(this.font, this.font._cmapProcessor.lookup(last), [last], null, stringIndex));\n      }\n      last = code;\n      state = nextState;\n    }\n    return glyphs;\n  };\n  LayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  };\n  LayoutEngine.prototype.position = function position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(function (glyph) {\n      return new GlyphPosition(glyph.advanceWidth);\n    });\n    var positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  };\n  LayoutEngine.prototype.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {\n    var space = this.font.glyphForCodePoint(0x20);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n  LayoutEngine.prototype.isDefaultIgnorable = function isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    var plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00ad;\n        case 0x03:\n          return ch === 0x034f;\n        case 0x06:\n          return ch === 0x061c;\n        case 0x17:\n          return 0x17b4 <= ch && ch <= 0x17b5;\n        case 0x18:\n          return 0x180b <= ch && ch <= 0x180e;\n        case 0x20:\n          return 0x200b <= ch && ch <= 0x200f || 0x202a <= ch && ch <= 0x202e || 0x2060 <= ch && ch <= 0x206f;\n        case 0xfe:\n          return 0xfe00 <= ch && ch <= 0xfe0f || ch === 0xfeff;\n        case 0xff:\n          return 0xfff0 <= ch && ch <= 0xfff8;\n        default:\n          return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1bca0 <= ch && ch <= 0x1bca3 || 0x1d173 <= ch && ch <= 0x1d17a;\n        case 0x0e:\n          return 0xe0000 <= ch && ch <= 0xe0fff;\n        default:\n          return false;\n      }\n    }\n  };\n  LayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n    if (this.engine) {\n      features.push.apply(features, this.engine.getAvailableFeatures(script, language));\n    }\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n    return features;\n  };\n  LayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var result = new Set();\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (var _iterator = codePoints, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var codePoint = _ref;\n      result.add(String.fromCodePoint(codePoint));\n    }\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (var _iterator2 = this.engine.stringsForGlyph(gid), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var string = _ref2;\n        result.add(string);\n      }\n    }\n    return Array.from(result);\n  };\n  return LayoutEngine;\n}();\nvar SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\n\nvar Path = function () {\n  function Path() {\n    classCallCheck(this, Path);\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n\n  Path.prototype.toFunction = function toFunction() {\n    var cmds = this.commands.map(function (c) {\n      return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';\n    });\n    return new Function('ctx', cmds.join('\\n'));\n  };\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n\n  Path.prototype.toSVG = function toSVG() {\n    var cmds = this.commands.map(function (c) {\n      var args = c.args.map(function (arg) {\n        return Math.round(arg * 100) / 100;\n      });\n      return '' + SVG_COMMANDS[c.command] + args.join(' ');\n    });\n    return cmds.join('');\n  };\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  Path.prototype.mapPoints = function mapPoints(fn) {\n    var path = new Path();\n    for (var _iterator = this.commands, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var c = _ref;\n      var args = [];\n      for (var _i2 = 0; _i2 < c.args.length; _i2 += 2) {\n        var _fn = fn(c.args[_i2], c.args[_i2 + 1]),\n          x = _fn[0],\n          y = _fn[1];\n        args.push(x, y);\n      }\n      path[c.command].apply(path, args);\n    }\n    return path;\n  };\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n\n  Path.prototype.transform = function transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints(function (x, y) {\n      x = m0 * x + m2 * y + m4;\n      y = m1 * x + m3 * y + m5;\n      return [x, y];\n    });\n  };\n\n  /**\n   * Translates the path by the given offset.\n   */\n\n  Path.prototype.translate = function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  };\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n\n  Path.prototype.rotate = function rotate(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  };\n\n  /**\n   * Scales the path.\n   */\n\n  Path.prototype.scale = function scale(scaleX) {\n    var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  };\n  createClass(Path, [{\n    key: 'cbox',\n    get: function get$$1() {\n      if (!this._cbox) {\n        var cbox = new BBox();\n        for (var _iterator2 = this.commands, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref2;\n          if (_isArray2) {\n            if (_i3 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i3++];\n          } else {\n            _i3 = _iterator2.next();\n            if (_i3.done) break;\n            _ref2 = _i3.value;\n          }\n          var command = _ref2;\n          for (var _i4 = 0; _i4 < command.args.length; _i4 += 2) {\n            cbox.addPoint(command.args[_i4], command.args[_i4 + 1]);\n          }\n        }\n        this._cbox = Object.freeze(cbox);\n      }\n      return this._cbox;\n    }\n\n    /**\n     * Gets the exact bounding box of the path by evaluating curve segments.\n     * Slower to compute than the control box, but more accurate.\n     * @type {BBox}\n     */\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      if (this._bbox) {\n        return this._bbox;\n      }\n      var bbox = new BBox();\n      var cx = 0,\n        cy = 0;\n      var f = function f(t) {\n        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n      };\n      for (var _iterator3 = this.commands, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i5 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i5++];\n        } else {\n          _i5 = _iterator3.next();\n          if (_i5.done) break;\n          _ref3 = _i5.value;\n        }\n        var c = _ref3;\n        switch (c.command) {\n          case 'moveTo':\n          case 'lineTo':\n            var _c$args = c.args,\n              x = _c$args[0],\n              y = _c$args[1];\n            bbox.addPoint(x, y);\n            cx = x;\n            cy = y;\n            break;\n          case 'quadraticCurveTo':\n          case 'bezierCurveTo':\n            if (c.command === 'quadraticCurveTo') {\n              // http://fontforge.org/bezier.html\n              var _c$args2 = c.args,\n                qp1x = _c$args2[0],\n                qp1y = _c$args2[1],\n                p3x = _c$args2[2],\n                p3y = _c$args2[3];\n              var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n              var cp1y = cy + 2 / 3 * (qp1y - cy);\n              var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n              var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n            } else {\n              var _c$args3 = c.args,\n                cp1x = _c$args3[0],\n                cp1y = _c$args3[1],\n                cp2x = _c$args3[2],\n                cp2y = _c$args3[3],\n                p3x = _c$args3[4],\n                p3y = _c$args3[5];\n            }\n\n            // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n            bbox.addPoint(p3x, p3y);\n            var p0 = [cx, cy];\n            var p1 = [cp1x, cp1y];\n            var p2 = [cp2x, cp2y];\n            var p3 = [p3x, p3y];\n            for (var i = 0; i <= 1; i++) {\n              var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n              var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n              c = 3 * p1[i] - 3 * p0[i];\n              if (a === 0) {\n                if (b === 0) {\n                  continue;\n                }\n                var t = -c / b;\n                if (0 < t && t < 1) {\n                  if (i === 0) {\n                    bbox.addPoint(f(t), bbox.maxY);\n                  } else if (i === 1) {\n                    bbox.addPoint(bbox.maxX, f(t));\n                  }\n                }\n                continue;\n              }\n              var b2ac = Math.pow(b, 2) - 4 * c * a;\n              if (b2ac < 0) {\n                continue;\n              }\n              var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t1 && t1 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t1), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t1));\n                }\n              }\n              var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t2 && t2 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t2), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t2));\n                }\n              }\n            }\n            cx = p3x;\n            cy = p3y;\n            break;\n        }\n      }\n      return this._bbox = Object.freeze(bbox);\n    }\n  }]);\n  return Path;\n}();\nvar _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];\nvar _loop = function _loop() {\n  var command = _arr[_i6];\n  Path.prototype[command] = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command: command,\n      args: args\n    });\n    return this;\n  };\n};\nfor (var _i6 = 0; _i6 < _arr.length; _i6++) {\n  _loop();\n}\nvar StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\nvar _class$8;\nfunction _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nvar Glyph = (_class$8 = function () {\n  function Glyph(id, codePoints, font) {\n    classCallCheck(this, Glyph);\n\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n  Glyph.prototype._getPath = function _getPath() {\n    return new Path();\n  };\n  Glyph.prototype._getCBox = function _getCBox() {\n    return this.path.cbox;\n  };\n  Glyph.prototype._getBBox = function _getBBox() {\n    return this.path.bbox;\n  };\n  Glyph.prototype._getTableMetrics = function _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n    var metric = table.metrics.get(table.metrics.length - 1);\n    var res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n    return res;\n  };\n  Glyph.prototype._getMetrics = function _getMetrics(cbox) {\n    if (this._metrics) {\n      return this._metrics;\n    }\n    var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),\n      advanceWidth = _getTableMetrics2.advance,\n      leftBearing = _getTableMetrics2.bearing;\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n\n    if (this._font.vmtx) {\n      var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),\n        advanceHeight = _getTableMetrics3.advance,\n        topBearing = _getTableMetrics3.bearing;\n    } else {\n      var os2 = void 0;\n      if (typeof cbox === 'undefined' || cbox === null) {\n        cbox = this.cbox;\n      }\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        var hhea = this._font.hhea;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n    return this._metrics = {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    };\n  };\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  Glyph.prototype.getScaledPath = function getScaledPath(size) {\n    var scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  };\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n\n  Glyph.prototype._getName = function _getName() {\n    var post = this._font.post;\n    if (!post) {\n      return null;\n    }\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n      case 2:\n        var id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n        return post.names[id - StandardNames.length];\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  };\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  Glyph.prototype.render = function render(ctx, size) {\n    ctx.save();\n    var scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n    var fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n    ctx.restore();\n  };\n  createClass(Glyph, [{\n    key: 'cbox',\n    get: function get$$1() {\n      return this._getCBox();\n    }\n\n    /**\n     * The glyph’s bounding box, i.e. the rectangle that encloses the\n     * glyph outline as tightly as possible.\n     * @type {BBox}\n     */\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      return this._getBBox();\n    }\n\n    /**\n     * A vector Path object representing the glyph outline.\n     * @type {Path}\n     */\n  }, {\n    key: 'path',\n    get: function get$$1() {\n      // Cache the path so we only decode it once\n      // Decoding is actually performed by subclasses\n      return this._getPath();\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get$$1() {\n      return this._getMetrics().advanceWidth;\n    }\n\n    /**\n     * The glyph's advance height.\n     * @type {number}\n     */\n  }, {\n    key: 'advanceHeight',\n    get: function get$$1() {\n      return this._getMetrics().advanceHeight;\n    }\n  }, {\n    key: 'ligatureCaretPositions',\n    get: function get$$1() {}\n  }, {\n    key: 'name',\n    get: function get$$1() {\n      return this._getName();\n    }\n  }]);\n  return Glyph;\n}(), _applyDecoratedDescriptor$4(_class$8.prototype, 'cbox', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'cbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'bbox', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'bbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'path', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'path'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceWidth', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'advanceWidth'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceHeight', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'advanceHeight'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'name', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'name'), _class$8.prototype), _class$8);\n\n// The header for both simple and composite glyphs\nvar GlyfHeader = new r.Struct({\n  numberOfContours: r.int16,\n  // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16\n});\n\n// Flags for simple glyphs\nvar ON_CURVE = 1 << 0;\nvar X_SHORT_VECTOR = 1 << 1;\nvar Y_SHORT_VECTOR = 1 << 2;\nvar REPEAT = 1 << 3;\nvar SAME_X = 1 << 4;\nvar SAME_Y = 1 << 5;\n\n// Flags for composite glyphs\nvar ARG_1_AND_2_ARE_WORDS = 1 << 0;\nvar WE_HAVE_A_SCALE = 1 << 3;\nvar MORE_COMPONENTS = 1 << 5;\nvar WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\nvar WE_HAVE_A_TWO_BY_TWO = 1 << 7;\nvar WE_HAVE_INSTRUCTIONS = 1 << 8;\n// Represents a point in a simple glyph\nvar Point = function () {\n  function Point(onCurve, endContour) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    classCallCheck(this, Point);\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n  Point.prototype.copy = function copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  };\n  return Point;\n}();\n\n// Represents a component in a composite glyph\n\nvar Component = function Component(glyphID, dx, dy) {\n  classCallCheck(this, Component);\n  this.glyphID = glyphID;\n  this.dx = dx;\n  this.dy = dy;\n  this.pos = 0;\n  this.scaleX = this.scaleY = 1;\n  this.scale01 = this.scale10 = 0;\n};\n\n/**\n * Represents a TrueType glyph.\n */\n\nvar TTFGlyph = function (_Glyph) {\n  inherits(TTFGlyph, _Glyph);\n  function TTFGlyph() {\n    classCallCheck(this, TTFGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  // Parses just the glyph header and returns the bounding box\n  TTFGlyph.prototype._getCBox = function _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    var glyph = GlyfHeader.decode(stream);\n    var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  };\n\n  // Parses a single glyph coordinate\n\n  TTFGlyph.prototype._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n    return val;\n  };\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n\n  TTFGlyph.prototype._decode = function _decode() {\n    var glyfPos = this._font.loca.offsets[this.id];\n    var nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) {\n      return null;\n    }\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    var startPos = stream.pos;\n    var glyph = GlyfHeader.decode(stream);\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n    return glyph;\n  };\n  TTFGlyph.prototype._decodeSimple = function _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n    var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n    var flags = [];\n    var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        var count = stream.readUInt8();\n        for (var j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n    var px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n    var py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n    if (this._font._variationProcessor) {\n      var points = glyph.points.slice();\n      points.push.apply(points, this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n    return;\n  };\n  TTFGlyph.prototype._decodeComposite = function _decodeComposite(glyph, stream) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    // this is a composite glyph\n    glyph.components = [];\n    var haveInstructions = false;\n    var flags = MORE_COMPONENTS;\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      var gPos = stream.pos - offset;\n      var glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n      glyph.components.push(component);\n    }\n    if (this._font._variationProcessor) {\n      var points = [];\n      for (var j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n      points.push.apply(points, this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n      for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n    return haveInstructions;\n  };\n  TTFGlyph.prototype._getPhantomPoints = function _getPhantomPoints(glyph) {\n    var cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n    var _metrics = this._metrics,\n      advanceWidth = _metrics.advanceWidth,\n      advanceHeight = _metrics.advanceHeight,\n      leftBearing = _metrics.leftBearing,\n      topBearing = _metrics.topBearing;\n    return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  };\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n\n  TTFGlyph.prototype._getContours = function _getContours() {\n    var glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n    var points = [];\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (var _iterator = glyph.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var component = _ref;\n        var _contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (var i = 0; i < _contours.length; i++) {\n          var contour = _contours[i];\n          for (var j = 0; j < contour.length; j++) {\n            var _point = contour[j];\n            var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;\n            var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;\n            points.push(new Point(_point.onCurve, _point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n    var contours = [];\n    var cur = [];\n    for (var k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n    return contours;\n  };\n  TTFGlyph.prototype._getMetrics = function _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n    var cbox = this._getCBox(true);\n    _Glyph.prototype._getMetrics.call(this, cbox);\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n    return this._metrics;\n  };\n\n  // Converts contours to a Path object that can be rendered\n\n  TTFGlyph.prototype._getPath = function _getPath() {\n    var contours = this._getContours();\n    var path = new Path();\n    for (var i = 0; i < contours.length; i++) {\n      var contour = contours[i];\n      var firstPt = contour[0];\n      var lastPt = contour[contour.length - 1];\n      var start = 0;\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n        var curvePt = firstPt;\n      }\n      path.moveTo(firstPt.x, firstPt.y);\n      for (var j = start; j < contour.length; j++) {\n        var pt = contour[j];\n        var prevPt = j === 0 ? firstPt : contour[j - 1];\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          var midX = (prevPt.x + pt.x) / 2;\n          var midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n      path.closePath();\n    }\n    return path;\n  };\n  return TTFGlyph;\n}(Glyph);\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\n\nvar CFFGlyph = function (_Glyph) {\n  inherits(CFFGlyph, _Glyph);\n  function CFFGlyph() {\n    classCallCheck(this, CFFGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n  CFFGlyph.prototype._getName = function _getName() {\n    if (this._font.CFF2) {\n      return _Glyph.prototype._getName.call(this);\n    }\n    return this._font['CFF '].getGlyphName(this.id);\n  };\n  CFFGlyph.prototype.bias = function bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  };\n  CFFGlyph.prototype._getPath = function _getPath() {\n    var stream = this._font.stream;\n    var pos = stream.pos;\n    var cff = this._font.CFF2 || this._font['CFF '];\n    var str = cff.topDict.CharStrings[this.id];\n    var end = str.offset + str.length;\n    stream.pos = str.offset;\n    var path = new Path();\n    var stack = [];\n    var trans = [];\n    var width = null;\n    var nStems = 0;\n    var x = 0,\n      y = 0;\n    var usedGsubrs = void 0;\n    var usedSubrs = void 0;\n    var open = false;\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n    var gsubrs = cff.globalSubrIndex || [];\n    var gsubrsBias = this.bias(gsubrs);\n    var privateDict = cff.privateDictForGlyph(this.id);\n    var subrs = privateDict.Subrs || [];\n    var subrsBias = this.bias(subrs);\n    var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    var vsindex = privateDict.vsindex;\n    var variationProcessor = this._font._variationProcessor;\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n      path.moveTo(x, y);\n      open = true;\n    }\n    var parse = function parse() {\n      while (stream.pos < end) {\n        var op = stream.readUInt8();\n        if (op < 32) {\n          switch (op) {\n            case 1: // hstem\n            case 3: // vstem\n            case 18: // hstemhm\n            case 23:\n              // vstemhm\n              parseStems();\n              break;\n            case 4:\n              // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n            case 5:\n              // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n            case 6: // hlineto\n            case 7:\n              // vlineto\n              var phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n            case 8:\n              // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n            case 10:\n              // callsubr\n              var index = stack.pop() + subrsBias;\n              var subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 11:\n              // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n            case 14:\n              // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n              if (stack.length > 0) {\n                checkWidth();\n              }\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n            case 15:\n              {\n                // vsindex\n                if (cff.version < 2) {\n                  throw new Error('vsindex operator not supported in CFF v1');\n                }\n                vsindex = stack.pop();\n                break;\n              }\n            case 16:\n              {\n                // blend\n                if (cff.version < 2) {\n                  throw new Error('blend operator not supported in CFF v1');\n                }\n                if (!variationProcessor) {\n                  throw new Error('blend operator in non-variation font');\n                }\n                var blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                var numBlends = stack.pop();\n                var numOperands = numBlends * blendVector.length;\n                var delta = stack.length - numOperands;\n                var base = delta - numBlends;\n                for (var i = 0; i < numBlends; i++) {\n                  var sum = stack[base + i];\n                  for (var j = 0; j < blendVector.length; j++) {\n                    sum += blendVector[j] * stack[delta++];\n                  }\n                  stack[base + i] = sum;\n                }\n                while (numOperands--) {\n                  stack.pop();\n                }\n                break;\n              }\n            case 19: // hintmask\n            case 20:\n              // cntrmask\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n            case 21:\n              // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n            case 22:\n              // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n            case 24:\n              // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n            case 25:\n              // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n            case 26:\n              // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n            case 27:\n              // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n            case 28:\n              // shortint\n              stack.push(stream.readInt16BE());\n              break;\n            case 29:\n              // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 30: // vhcurveto\n            case 31:\n              // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3:\n                  // and\n                  var a = stack.pop();\n                  var b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n                case 4:\n                  // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n                case 5:\n                  // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n                case 9:\n                  // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n                case 10:\n                  // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n                case 11:\n                  // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n                case 12:\n                  // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n                case 14:\n                  // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n                case 15:\n                  // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n                case 18:\n                  // drop\n                  stack.pop();\n                  break;\n                case 20:\n                  // put\n                  var val = stack.pop();\n                  var idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n                case 21:\n                  // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n                case 22:\n                  // ifelse\n                  var s1 = stack.pop();\n                  var s2 = stack.pop();\n                  var v1 = stack.pop();\n                  var v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n                case 23:\n                  // random\n                  stack.push(Math.random());\n                  break;\n                case 24:\n                  // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n                case 26:\n                  // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n                case 27:\n                  // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n                case 28:\n                  // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n                case 29:\n                  // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n                  stack.push(stack[idx]);\n                  break;\n                case 30:\n                  // roll\n                  var n = stack.pop();\n                  var _j = stack.pop();\n                  if (_j >= 0) {\n                    while (_j > 0) {\n                      var t = stack[n - 1];\n                      for (var _i = n - 2; _i >= 0; _i--) {\n                        stack[_i + 1] = stack[_i];\n                      }\n                      stack[0] = t;\n                      _j--;\n                    }\n                  } else {\n                    while (_j < 0) {\n                      var t = stack[0];\n                      for (var _i2 = 0; _i2 <= n; _i2++) {\n                        stack[_i2] = stack[_i2 + 1];\n                      }\n                      stack[n - 1] = t;\n                      _j++;\n                    }\n                  }\n                  break;\n                case 34:\n                  // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  var c3x = c2x + stack.shift();\n                  var c3y = c2y;\n                  var c4x = c3x + stack.shift();\n                  var c4y = c3y;\n                  var c5x = c4x + stack.shift();\n                  var c5y = c4y;\n                  var c6x = c5x + stack.shift();\n                  var c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 35:\n                  // flex\n                  var pts = [];\n                  for (var _i3 = 0; _i3 <= 5; _i3++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n                case 36:\n                  // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 37:\n                  // flex1\n                  var startx = x;\n                  var starty = y;\n                  pts = [];\n                  for (var _i4 = 0; _i4 <= 4; _i4++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                    // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n                  pts.push(x, y);\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  break;\n                default:\n                  throw new Error('Unknown op: 12 ' + op);\n              }\n              break;\n            default:\n              throw new Error('Unknown op: ' + op);\n          }\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n    parse();\n    if (open) {\n      path.closePath();\n    }\n    return path;\n  };\n  return CFFGlyph;\n}(Glyph);\nvar SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(function (t) {\n    return t.parent.buflen - t._currentOffset;\n  })\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\n\nvar SBIXGlyph = function (_TTFGlyph) {\n  inherits(SBIXGlyph, _TTFGlyph);\n  function SBIXGlyph() {\n    classCallCheck(this, SBIXGlyph);\n    return possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));\n  }\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  SBIXGlyph.prototype.getImageForSize = function getImageForSize(size) {\n    for (var i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) {\n        break;\n      }\n    }\n    var offsets = table.imageOffsets;\n    var start = offsets[this.id];\n    var end = offsets[this.id + 1];\n    if (start === end) {\n      return null;\n    }\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, {\n      buflen: end - start\n    });\n  };\n  SBIXGlyph.prototype.render = function render(ctx, size) {\n    var img = this.getImageForSize(size);\n    if (img != null) {\n      var scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {\n        height: size,\n        x: img.originX,\n        y: (this.bbox.minY - img.originY) * scale\n      });\n    }\n    if (this._font.sbix.flags.renderOutlines) {\n      _TTFGlyph.prototype.render.call(this, ctx, size);\n    }\n  };\n  return SBIXGlyph;\n}(TTFGlyph);\nvar COLRLayer = function COLRLayer(glyph, color) {\n  classCallCheck(this, COLRLayer);\n  this.glyph = glyph;\n  this.color = color;\n};\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\n\nvar COLRGlyph = function (_Glyph) {\n  inherits(COLRGlyph, _Glyph);\n  function COLRGlyph() {\n    classCallCheck(this, COLRGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n  COLRGlyph.prototype._getBBox = function _getBBox() {\n    var bbox = new BBox();\n    for (var i = 0; i < this.layers.length; i++) {\n      var layer = this.layers[i];\n      var b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n    return bbox;\n  };\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n\n  COLRGlyph.prototype.render = function render(ctx, size) {\n    for (var _iterator = this.layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var _ref2 = _ref,\n        glyph = _ref2.glyph,\n        color = _ref2.color;\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n    return;\n  };\n  createClass(COLRGlyph, [{\n    key: 'layers',\n    get: function get$$1() {\n      var cpal = this._font.CPAL;\n      var colr = this._font.COLR;\n      var low = 0;\n      var high = colr.baseGlyphRecord.length - 1;\n      while (low <= high) {\n        var mid = low + high >> 1;\n        var rec = colr.baseGlyphRecord[mid];\n        if (this.id < rec.gid) {\n          high = mid - 1;\n        } else if (this.id > rec.gid) {\n          low = mid + 1;\n        } else {\n          var baseLayer = rec;\n          break;\n        }\n      }\n\n      // if base glyph not found in COLR table,\n      // default to normal glyph from glyf or CFF\n      if (baseLayer == null) {\n        var g = this._font._getBaseGlyph(this.id);\n        var color = {\n          red: 0,\n          green: 0,\n          blue: 0,\n          alpha: 255\n        };\n        return [new COLRLayer(g, color)];\n      }\n\n      // otherwise, return an array of all the layers\n      var layers = [];\n      for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n        var rec = colr.layerRecords[i];\n        var color = cpal.colorRecords[rec.paletteIndex];\n        var g = this._font._getBaseGlyph(rec.gid);\n        layers.push(new COLRLayer(g, color));\n      }\n      return layers;\n    }\n  }]);\n  return COLRGlyph;\n}(Glyph);\nvar TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nvar TUPLE_COUNT_MASK = 0x0fff;\nvar EMBEDDED_TUPLE_COORD = 0x8000;\nvar INTERMEDIATE_TUPLE = 0x4000;\nvar PRIVATE_POINT_NUMBERS = 0x2000;\nvar TUPLE_INDEX_MASK = 0x0fff;\nvar POINTS_ARE_WORDS = 0x80;\nvar POINT_RUN_COUNT_MASK = 0x7f;\nvar DELTAS_ARE_ZERO = 0x80;\nvar DELTAS_ARE_WORDS = 0x40;\nvar DELTA_RUN_COUNT_MASK = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\n\nvar GlyphVariationProcessor = function () {\n  function GlyphVariationProcessor(font, coords) {\n    classCallCheck(this, GlyphVariationProcessor);\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n  GlyphVariationProcessor.prototype.normalizeCoords = function normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    var normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      var axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        var segment = this.font.avar.segment[i];\n        for (var j = 0; j < segment.correspondence.length; j++) {\n          var pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            var prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n            break;\n          }\n        }\n      }\n    }\n    return normalized;\n  };\n  GlyphVariationProcessor.prototype.transformPoints = function transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) {\n      return;\n    }\n    var gvar = this.font.gvar;\n    if (gid >= gvar.glyphCount) {\n      return;\n    }\n    var offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) {\n      return;\n    }\n\n    // Read the gvar data for this glyph\n    var stream = this.font.stream;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n    var tupleCount = stream.readUInt16BE();\n    var offsetToData = offset + stream.readUInt16BE();\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n    var origPoints = glyphPoints.map(function (pt) {\n      return pt.copy();\n    });\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (var i = 0; i < tupleCount; i++) {\n      var tupleDataSize = stream.readUInt16BE();\n      var tupleIndex = stream.readUInt16BE();\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (var a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (var _a = 0; _a < gvar.axisCount; _a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n        var endCoords = [];\n        for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      var nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      var xDeltas = this.decodeDeltas(nPoints);\n      var yDeltas = this.decodeDeltas(nPoints);\n      if (points.length === 0) {\n        // all points\n        for (var _i = 0; _i < glyphPoints.length; _i++) {\n          var point = glyphPoints[_i];\n          point.x += Math.round(xDeltas[_i] * factor);\n          point.y += Math.round(yDeltas[_i] * factor);\n        }\n      } else {\n        var outPoints = origPoints.map(function (pt) {\n          return pt.copy();\n        });\n        var hasDelta = glyphPoints.map(function () {\n          return false;\n        });\n        for (var _i2 = 0; _i2 < points.length; _i2++) {\n          var idx = points[_i2];\n          if (idx < glyphPoints.length) {\n            var _point = outPoints[idx];\n            hasDelta[idx] = true;\n            _point.x += Math.round(xDeltas[_i2] * factor);\n            _point.y += Math.round(yDeltas[_i2] * factor);\n          }\n        }\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n        for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {\n          var deltaX = outPoints[_i3].x - origPoints[_i3].x;\n          var deltaY = outPoints[_i3].y - origPoints[_i3].y;\n          glyphPoints[_i3].x += deltaX;\n          glyphPoints[_i3].y += deltaY;\n        }\n      }\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  };\n  GlyphVariationProcessor.prototype.decodePoints = function decodePoints() {\n    var stream = this.font.stream;\n    var count = stream.readUInt8();\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n    var points = new Uint16Array(count);\n    var i = 0;\n    var point = 0;\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n      for (var j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n    return points;\n  };\n  GlyphVariationProcessor.prototype.decodeDeltas = function decodeDeltas(count) {\n    var stream = this.font.stream;\n    var i = 0;\n    var deltas = new Int16Array(count);\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n      } else {\n        var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (var j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n    return deltas;\n  };\n  GlyphVariationProcessor.prototype.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    var normalized = this.normalizedCoords;\n    var gvar = this.font.gvar;\n    var factor = 1;\n    for (var i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n      if (normalized[i] === 0) {\n        return 0;\n      }\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {\n          return 0;\n        }\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {\n          return 0;\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n    return factor;\n  };\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n\n  GlyphVariationProcessor.prototype.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n    var point = 0;\n    while (point < points.length) {\n      var firstPoint = point;\n\n      // find the end point of the contour\n      var endPoint = point;\n      var pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n      if (point > endPoint) {\n        continue;\n      }\n      var firstDelta = point;\n      var curDelta = point;\n      point++;\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n      point = endPoint + 1;\n    }\n  };\n  GlyphVariationProcessor.prototype.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n    var iterable = ['x', 'y'];\n    for (var i = 0; i < iterable.length; i++) {\n      var k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n      var in1 = inPoints[ref1][k];\n      var in2 = inPoints[ref2][k];\n      var out1 = outPoints[ref1][k];\n      var out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n        for (var _p = p1; _p <= p2; _p++) {\n          var out = inPoints[_p][k];\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n          outPoints[_p][k] = out;\n        }\n      }\n    }\n  };\n  GlyphVariationProcessor.prototype.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {\n    var deltaX = outPoints[ref].x - inPoints[ref].x;\n    var deltaY = outPoints[ref].y - inPoints[ref].y;\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n    for (var p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  };\n  GlyphVariationProcessor.prototype.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {\n    var outerIndex = void 0,\n      innerIndex = void 0;\n    if (table.advanceWidthMapping) {\n      var idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n      var entryFormat = table.advanceWidthMapping.entryFormat;\n      var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];\n      outerIndex = _table$advanceWidthMa.outerIndex;\n      innerIndex = _table$advanceWidthMa.innerIndex;\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  };\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n\n  GlyphVariationProcessor.prototype.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n    var deltaSet = varData.deltaSets[innerIndex];\n    var blendVector = this.getBlendVector(itemStore, outerIndex);\n    var netAdjustment = 0;\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n    return netAdjustment;\n  };\n  GlyphVariationProcessor.prototype.getBlendVector = function getBlendVector(itemStore, outerIndex) {\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n    var normalizedCoords = this.normalizedCoords;\n    var blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      var scalar = 1;\n      var regionIndex = varData.regionIndexes[master];\n      var axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (var j = 0; j < axes.length; j++) {\n        var axis = axes[j];\n        var axisScalar = void 0;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n          // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n          // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n          // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n      blendVector[master] = scalar;\n    }\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  };\n  return GlyphVariationProcessor;\n}();\nvar Subset = function () {\n  function Subset(font) {\n    classCallCheck(this, Subset);\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n  Subset.prototype.includeGlyph = function includeGlyph(glyph) {\n    if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {\n      glyph = glyph.id;\n    }\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n    return this.mapping[glyph];\n  };\n  Subset.prototype.encodeStream = function encodeStream() {\n    var _this = this;\n    var s = new r.EncodeStream();\n    process.nextTick(function () {\n      _this.encode(s);\n      return s.end();\n    });\n    return s;\n  };\n  return Subset;\n}();\n\n// Flags for simple glyphs\nvar ON_CURVE$1 = 1 << 0;\nvar X_SHORT_VECTOR$1 = 1 << 1;\nvar Y_SHORT_VECTOR$1 = 1 << 2;\nvar REPEAT$1 = 1 << 3;\nvar SAME_X$1 = 1 << 4;\nvar SAME_Y$1 = 1 << 5;\nvar Point$1 = function () {\n  function Point() {\n    classCallCheck(this, Point);\n  }\n  Point.size = function size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  };\n  Point.encode = function encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  };\n  return Point;\n}();\nvar Glyf = new r.Struct({\n  numberOfContours: r.int16,\n  // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point$1, 0),\n  yPoints: new r.Array(Point$1, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\n\nvar TTFGlyphEncoder = function () {\n  function TTFGlyphEncoder() {\n    classCallCheck(this, TTFGlyphEncoder);\n  }\n  TTFGlyphEncoder.prototype.encodeSimple = function encodeSimple(path) {\n    var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var endPtsOfContours = [];\n    var xPoints = [];\n    var yPoints = [];\n    var flags = [];\n    var same = 0;\n    var lastX = 0,\n      lastY = 0,\n      lastFlag = 0;\n    var pointCount = 0;\n    for (var i = 0; i < path.commands.length; i++) {\n      var c = path.commands[i];\n      for (var j = 0; j < c.args.length; j += 2) {\n        var x = c.args[j];\n        var y = c.args[j + 1];\n        var flag = 0;\n\n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          var next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            var midX = (lastX + next.args[0]) / 2;\n            var midY = (lastY + next.args[1]) / 2;\n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n\n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE$1;\n        }\n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT$1;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n          flags.push(flag);\n          lastFlag = flag;\n        }\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n    var bbox = path.bbox;\n    var glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    var size = Glyf.size(glyf);\n    var tail = 4 - size % 4;\n    var stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n\n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n    return stream.buffer;\n  };\n  TTFGlyphEncoder.prototype._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    var diff = value - last;\n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n      points.push(diff);\n    }\n    return flag;\n  };\n  return TTFGlyphEncoder;\n}();\nvar TTFSubset = function (_Subset) {\n  inherits(TTFSubset, _Subset);\n  function TTFSubset(font) {\n    classCallCheck(this, TTFSubset);\n    var _this = possibleConstructorReturn(this, _Subset.call(this, font));\n    _this.glyphEncoder = new TTFGlyphEncoder();\n    return _this;\n  }\n  TTFSubset.prototype._addGlyph = function _addGlyph(gid) {\n    var glyph = this.font.getGlyph(gid);\n    var glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    var curOffset = this.font.loca.offsets[gid];\n    var nextOffset = this.font.loca.offsets[gid + 1];\n    var stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n    var buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = Buffer.from(buffer);\n      for (var _iterator = glyf.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var component = _ref;\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  };\n  TTFSubset.prototype.encode = function encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: []\n    };\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    var i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n    var maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n    this.loca.offsets.push(this.offset);\n    tables.loca.preEncode.call(this.loca);\n    var head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n    var hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    Directory.encode(stream, {\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  };\n  return TTFSubset;\n}(Subset);\nvar CFFSubset = function (_Subset) {\n  inherits(CFFSubset, _Subset);\n  function CFFSubset(font) {\n    classCallCheck(this, CFFSubset);\n    var _this = possibleConstructorReturn(this, _Subset.call(this, font));\n    _this.cff = _this.font['CFF '];\n    if (!_this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n    return _this;\n  }\n  CFFSubset.prototype.subsetCharstrings = function subsetCharstrings() {\n    this.charstrings = [];\n    var gsubrs = {};\n    for (var _iterator = this.glyphs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var gid = _ref;\n      this.charstrings.push(this.cff.getCharString(gid));\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  };\n  CFFSubset.prototype.subsetSubrs = function subsetSubrs(subrs, used) {\n    var res = [];\n    for (var i = 0; i < subrs.length; i++) {\n      var subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(Buffer.from([11])); // return\n      }\n    }\n    return res;\n  };\n  CFFSubset.prototype.subsetFontdict = function subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n    var used_fds = {};\n    var used_subrs = [];\n    for (var _iterator2 = this.glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var gid = _ref2;\n      var fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n      }\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(topDict.FDArray.length - 1);\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[used_subrs.length - 1][subr] = true;\n      }\n    }\n    for (var i = 0; i < topDict.FDArray.length; i++) {\n      var dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n    return;\n  };\n  CFFSubset.prototype.createCIDFontdict = function createCIDFontdict(topDict) {\n    var used_subrs = {};\n    for (var _iterator3 = this.glyphs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n      var gid = _ref3;\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n    var privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n    topDict.FDArray = [{\n      Private: privateDict\n    }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{\n        first: 0,\n        fd: 0\n      }],\n      sentinel: this.charstrings.length\n    };\n  };\n  CFFSubset.prototype.addString = function addString(string) {\n    if (!string) {\n      return null;\n    }\n    if (!this.strings) {\n      this.strings = [];\n    }\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  };\n  CFFSubset.prototype.encode = function encode(stream) {\n    this.subsetCharstrings();\n    var charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{\n        first: 1,\n        nLeft: this.charstrings.length - 2\n      }]\n    };\n    var topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n    var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];\n    for (var _i4 = 0; _i4 < _arr.length; _i4++) {\n      var key = _arr[_i4];\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n    var top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: this.cff.length,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n    CFFTop.encode(stream, top);\n  };\n  return CFFSubset;\n}(Subset);\nvar _class;\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nvar TTFFont = (_class = function () {\n  TTFFont.probe = function probe(buffer) {\n    var format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  };\n  function TTFFont(stream) {\n    var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    classCallCheck(this, TTFFont);\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (var tag in this.directory.tables) {\n      var table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n  TTFFont.prototype._getTable = function _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit$1.logErrors) {\n          console.error('Error decoding table ' + table.tag);\n          console.error(e.stack);\n        }\n      }\n    }\n    return this._tables[table.tag];\n  };\n  TTFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n    return null;\n  };\n  TTFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, {\n      _startOffset: 0\n    });\n  };\n  TTFFont.prototype._decodeTable = function _decodeTable(table) {\n    var pos = this.stream.pos;\n    var stream = this._getTableStream(table.tag);\n    var result = tables[table.tag].decode(stream, this, table.length);\n    this.stream.pos = pos;\n    return result;\n  };\n\n  /**\n   * The unique PostScript name for this font\n   * @type {string}\n   */\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n  TTFFont.prototype.getName = function getName(key) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';\n    var record = this.name.records[key];\n    if (record) {\n      return record[lang];\n    }\n    return null;\n  };\n\n  /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  TTFFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  };\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n\n  TTFFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  };\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n\n  TTFFont.prototype.glyphsForString = function glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n      last = code;\n      state = nextState;\n    }\n    return glyphs;\n  };\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  TTFFont.prototype.layout = function layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  };\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n\n  TTFFont.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  };\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n\n  TTFFont.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  };\n  TTFFont.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n\n  TTFFont.prototype.getGlyph = function getGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n      } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n\n  TTFFont.prototype.createSubset = function createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n    return new TTFSubset(this);\n  };\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  TTFFont.prototype.getVariation = function getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n    if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    var coords = this.fvar.axis.map(function (axis, i) {\n      var axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n    var stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n    var font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n    return font;\n  };\n\n  // Standardized format plugin API\n  TTFFont.prototype.getFont = function getFont(name) {\n    return this.getVariation(name);\n  };\n  createClass(TTFFont, [{\n    key: 'postscriptName',\n    get: function get$$1() {\n      var name = this.name.records.postscriptName;\n      if (name) {\n        var lang = Object.keys(name)[0];\n        return name[lang];\n      }\n      return null;\n    }\n  }, {\n    key: 'fullName',\n    get: function get$$1() {\n      return this.getName('fullName');\n    }\n\n    /**\n     * The font's family name, e.g. \"Helvetica\"\n     * @type {string}\n     */\n  }, {\n    key: 'familyName',\n    get: function get$$1() {\n      return this.getName('fontFamily');\n    }\n\n    /**\n     * The font's sub-family, e.g. \"Bold\".\n     * @type {string}\n     */\n  }, {\n    key: 'subfamilyName',\n    get: function get$$1() {\n      return this.getName('fontSubfamily');\n    }\n\n    /**\n     * The font's copyright information\n     * @type {string}\n     */\n  }, {\n    key: 'copyright',\n    get: function get$$1() {\n      return this.getName('copyright');\n    }\n\n    /**\n     * The font's version number\n     * @type {string}\n     */\n  }, {\n    key: 'version',\n    get: function get$$1() {\n      return this.getName('version');\n    }\n\n    /**\n     * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n     * @type {number}\n     */\n  }, {\n    key: 'ascent',\n    get: function get$$1() {\n      return this.hhea.ascent;\n    }\n\n    /**\n     * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n     * @type {number}\n     */\n  }, {\n    key: 'descent',\n    get: function get$$1() {\n      return this.hhea.descent;\n    }\n\n    /**\n     * The amount of space that should be included between lines\n     * @type {number}\n     */\n  }, {\n    key: 'lineGap',\n    get: function get$$1() {\n      return this.hhea.lineGap;\n    }\n\n    /**\n     * The offset from the normal underline position that should be used\n     * @type {number}\n     */\n  }, {\n    key: 'underlinePosition',\n    get: function get$$1() {\n      return this.post.underlinePosition;\n    }\n\n    /**\n     * The weight of the underline that should be used\n     * @type {number}\n     */\n  }, {\n    key: 'underlineThickness',\n    get: function get$$1() {\n      return this.post.underlineThickness;\n    }\n\n    /**\n     * If this is an italic font, the angle the cursor should be drawn at to match the font design\n     * @type {number}\n     */\n  }, {\n    key: 'italicAngle',\n    get: function get$$1() {\n      return this.post.italicAngle;\n    }\n\n    /**\n     * The height of capital letters above the baseline.\n     * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n     * @type {number}\n     */\n  }, {\n    key: 'capHeight',\n    get: function get$$1() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.capHeight : this.ascent;\n    }\n\n    /**\n     * The height of lower case letters in the font.\n     * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n     * @type {number}\n     */\n  }, {\n    key: 'xHeight',\n    get: function get$$1() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.xHeight : 0;\n    }\n\n    /**\n     * The number of glyphs in the font.\n     * @type {number}\n     */\n  }, {\n    key: 'numGlyphs',\n    get: function get$$1() {\n      return this.maxp.numGlyphs;\n    }\n\n    /**\n     * The size of the font’s internal coordinate grid\n     * @type {number}\n     */\n  }, {\n    key: 'unitsPerEm',\n    get: function get$$1() {\n      return this.head.unitsPerEm;\n    }\n\n    /**\n     * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n     * @type {BBox}\n     */\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n  }, {\n    key: '_cmapProcessor',\n    get: function get$$1() {\n      return new CmapProcessor(this.cmap);\n    }\n\n    /**\n     * An array of all of the unicode code points supported by the font.\n     * @type {number[]}\n     */\n  }, {\n    key: 'characterSet',\n    get: function get$$1() {\n      return this._cmapProcessor.getCharacterSet();\n    }\n  }, {\n    key: '_layoutEngine',\n    get: function get$$1() {\n      return new LayoutEngine(this);\n    }\n  }, {\n    key: 'availableFeatures',\n    get: function get$$1() {\n      return this._layoutEngine.getAvailableFeatures();\n    }\n  }, {\n    key: 'variationAxes',\n    get: function get$$1() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n      for (var _iterator = this.fvar.axis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var axis = _ref;\n        res[axis.axisTag.trim()] = {\n          name: axis.name.en,\n          min: axis.minValue,\n          default: axis.defaultValue,\n          max: axis.maxValue\n        };\n      }\n      return res;\n    }\n\n    /**\n     * Returns an object describing the named variation instances\n     * that the font designer has specified. Keys are variation names\n     * and values are the variation settings for this instance.\n     *\n     * @type {object}\n     */\n  }, {\n    key: 'namedVariations',\n    get: function get$$1() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n      for (var _iterator2 = this.fvar.instance, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var instance = _ref2;\n        var settings = {};\n        for (var i = 0; i < this.fvar.axis.length; i++) {\n          var axis = this.fvar.axis[i];\n          settings[axis.axisTag.trim()] = instance.coord[i];\n        }\n        res[instance.name.en] = settings;\n      }\n      return res;\n    }\n  }, {\n    key: '_variationProcessor',\n    get: function get$$1() {\n      if (!this.fvar) {\n        return null;\n      }\n      var variationCoords = this.variationCoords;\n\n      // Ignore if no variation coords and not CFF2\n      if (!variationCoords && !this.CFF2) {\n        return null;\n      }\n      if (!variationCoords) {\n        variationCoords = this.fvar.axis.map(function (axis) {\n          return axis.defaultValue;\n        });\n      }\n      return new GlyphVariationProcessor(this, variationCoords);\n    }\n  }]);\n  return TTFFont;\n}(), _applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'variationAxes', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'variationAxes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'namedVariations', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'namedVariations'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_variationProcessor', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_variationProcessor'), _class.prototype), _class);\nvar WOFFDirectoryEntry = new r.Struct({\n  tag: new r.String(4),\n  offset: new r.Pointer(r.uint32, 'void', {\n    type: 'global'\n  }),\n  compLength: r.uint32,\n  length: r.uint32,\n  origChecksum: r.uint32\n});\nvar WOFFDirectory = new r.Struct({\n  tag: new r.String(4),\n  // should be 'wOFF'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFFDirectoryEntry, 'numTables')\n});\nWOFFDirectory.process = function () {\n  var tables$$1 = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var table = _ref;\n    tables$$1[table.tag] = table;\n  }\n  this.tables = tables$$1;\n};\nvar WOFFFont = function (_TTFFont) {\n  inherits(WOFFFont, _TTFFont);\n  function WOFFFont() {\n    classCallCheck(this, WOFFFont);\n    return possibleConstructorReturn(this, _TTFFont.apply(this, arguments));\n  }\n  WOFFFont.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  };\n  WOFFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, {\n      _startOffset: 0\n    });\n  };\n  WOFFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        var outBuffer = Buffer.alloc(table.length);\n        var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n    return null;\n  };\n  return WOFFFont;\n}(TTFFont);\nvar TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts'),\n    dsigTag: r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\nvar TrueTypeCollection = function () {\n  TrueTypeCollection.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  };\n  function TrueTypeCollection(stream) {\n    classCallCheck(this, TrueTypeCollection);\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n    this.header = TTCHeader.decode(stream);\n  }\n  TrueTypeCollection.prototype.getFont = function getFont(name) {\n    for (var _iterator = this.header.offsets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var offset = _ref;\n      var stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n    return null;\n  };\n  createClass(TrueTypeCollection, [{\n    key: 'fonts',\n    get: function get$$1() {\n      var fonts = [];\n      for (var _iterator2 = this.header.offsets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var offset = _ref2;\n        var stream = new r.DecodeStream(this.stream.buffer);\n        stream.pos = offset;\n        fonts.push(new TTFFont(stream));\n      }\n      return fonts;\n    }\n  }]);\n  return TrueTypeCollection;\n}();\nvar DFontName = new r.String(r.uint8);\nvar DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\nvar Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\nvar Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {\n    return t.maxTypeIndex + 1;\n  }), {\n    type: 'parent'\n  })\n});\nvar TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, function (t) {\n    return t.length + 1;\n  })\n});\nvar DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\nvar DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\nvar DFont = function () {\n  DFont.probe = function probe(buffer) {\n    var stream = new r.DecodeStream(buffer);\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n    for (var _iterator = header.map.typeList.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var type = _ref;\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n    return false;\n  };\n  function DFont(stream) {\n    classCallCheck(this, DFont);\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n    for (var _iterator2 = this.header.map.typeList.types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var type = _ref2;\n      for (var _iterator3 = type.refList, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var ref = _ref3;\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n  DFont.prototype.getFont = function getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n    for (var _iterator4 = this.sfnt.refList, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n      var ref = _ref4;\n      var pos = this.header.dataOffset + ref.dataOffset + 4;\n      var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n    return null;\n  };\n  createClass(DFont, [{\n    key: 'fonts',\n    get: function get$$1() {\n      var fonts = [];\n      for (var _iterator5 = this.sfnt.refList, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n        var ref = _ref5;\n        var pos = this.header.dataOffset + ref.dataOffset + 4;\n        var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n        fonts.push(new TTFFont(stream));\n      }\n      return fonts;\n    }\n  }]);\n  return DFont;\n}();\n\n// Register font formats\nfontkit$1.registerFormat(TTFFont);\nfontkit$1.registerFormat(WOFFFont);\nfontkit$1.registerFormat(TrueTypeCollection);\nfontkit$1.registerFormat(DFont);\nexport default fontkit$1;","map":{"version":3,"names":["r","PropertyDescriptor","resolveLength","isEqual","unicode","UnicodeTrie","StateMachine","cloneDeep","inflate","fs","fontkit$1","logErrors","formats","registerFormat","format","push","openSync","filename","postscriptName","Error","buffer","readFileSync","create","open","callback","readFile","err","font","e","i","length","probe","DecodeStream","getFont","cache","target","key","descriptor","get","value","call","Object","defineProperty","fn","Map","memoized","_len","arguments","args","Array","_key","has","result","apply","set","SubHeader","Struct","firstCode","uint16","entryCount","idDelta","int16","idRangeOffset","CmapGroup","startCharCode","uint32","endCharCode","glyphID","UnicodeValueRange","startUnicodeValue","uint24","additionalCount","uint8","UVSMapping","unicodeValue","DefaultUVS","NonDefaultUVS","VarSelectorRecord","varSelector","defaultUVS","Pointer","type","nonDefaultUVS","CmapSubtable","VersionedStruct","language","codeMap","LazyArray","subHeaderKeys","subHeaderCount","t","Math","max","subHeaders","glyphIndexArray","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCode","reservedPad","Reserved","startCode","_currentOffset","glyphIndices","reserved","is32","nGroups","groups","numRecords","varSelectors","CmapEntry","platformID","encodingID","table","lazy","cmap","version","numSubtables","tables","head","int32","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","modified","xMin","yMin","xMax","yMax","macStyle","Bitfield","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","hhea","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfMetrics","HmtxEntry","advance","bearing","hmtx","metrics","parent","bearings","maxp","numGlyphs","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","getEncoding","languageID","undefined","MAC_LANGUAGE_ENCODINGS","ENCODINGS","LANGUAGES","NameRecord","nameID","string","String","relativeTo","allowNull","LangTagRecord","tag","NameTable","count","stringOffset","records","langTagCount","langTags","NAMES","process","stream","_iterator","_isArray","isArray","_i","Symbol","iterator","_ref","next","done","record","obj","preEncode","val","indexOf","Buffer","byteLength","en","size","OS2","header","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulCharRange","vendorID","fsSelection","usFirstCharIndex","usLastCharIndex","typoAscender","typoDescender","typoLineGap","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContent","usLowerOpticalPointSize","usUpperOpticalPointSize","versions","post","fixed32","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","offsets","map","cvt","controlValues","fpgm","instructions","loca","prep","controlValueProgram","glyf","_typeof","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","enumerable","configurable","writable","protoProps","staticProps","inherits","subClass","superClass","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","CFFIndex","getCFFVersion","ctx","hdrSize","decode","readUInt32BE","readUInt16BE","offSize","readUInt8","offsetType","pos","ret","startPos","start","end","offset","arr","item","encode","writeUInt16BE","sizes","s","writeUInt8","_iterator2","_isArray2","_i2","_ref2","_iterator3","_isArray3","_i3","_ref3","_item","FLOAT_EOF","FLOAT_LOOKUP","FLOAT_ENCODE_LOOKUP","CFFOperand","readInt16BE","readInt32BE","str","b","n1","n2","parseFloat","forceLarge","ceil","Number","writeInt32BE","c1","c2","writeInt16BE","CFFDict","ops","fields","field","decodeOperands","operands","_this","op","encodeOperands","_this2","_startOffset","_field","dict","includePointers","pointerSize","startOffset","len","k","pointers","pointerOffset","_iterator4","_isArray4","_i4","_ref4","_iterator5","_isArray5","_i5","_ref5","_op","ptr","CFFPointer","_r$Pointer","options","Ptr","valueOf","CFFBlendOp","numBlends","pop","CFFPrivateDict","standardStrings","StandardEncoding","ExpertEncoding","ISOAdobeCharset","ExpertCharset","ExpertSubsetCharset","LangSysTable","reqFeatureIndex","featureCount","featureIndexes","LangSysRecord","langSys","Script","defaultLangSys","langSysRecords","ScriptRecord","script","ScriptList","Feature","featureParams","lookupCount","lookupListIndexes","FeatureRecord","feature","FeatureList","LookupFlags","markAttachmentType","LookupList","SubTable","Lookup","lookupType","subTableCount","subTables","markFilteringSet","Optional","useMarkFilteringSet","RangeRecord","startCoverageIndex","Coverage","glyphCount","glyphs","rangeCount","rangeRecords","ClassRangeRecord","class","ClassDef","startGlyph","classValueArray","classRangeCount","classRangeRecord","Device","a","deltaFormat","LookupRecord","sequenceIndex","lookupListIndex","Rule","input","lookupRecords","RuleSet","ClassRule","classes","ClassSet","Context","coverage","ruleSetCount","ruleSets","classDef","classSetCnt","classSet","coverages","ChainRule","backtrackGlyphCount","backtrack","inputGlyphCount","lookaheadGlyphCount","lookahead","ChainRuleSet","ChainingContext","chainCount","chainRuleSets","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","_","F2DOT14","Fixed","RegionAxisCoordinates","startCoord","peakCoord","endCoord","VariationRegionList","axisCount","regionCount","variationRegions","DeltaSet","shortDeltas","shortDeltaCount","regionDeltas","int8","regionIndexCount","deltas","concat","ItemVariationData","itemCount","regionIndexes","deltaSets","ItemVariationStore","variationRegionList","variationDataCount","itemVariationData","ConditionTable","axisIndex","filterRangeMinValue","filterRangeMaxValue","ConditionSet","conditionCount","conditionTable","FeatureTableSubstitutionRecord","featureIndex","alternateFeatureTable","FeatureTableSubstitution","substitutionCount","substitutions","FeatureVariationRecord","conditionSet","featureTableSubstitution","FeatureVariations","majorVersion","minorVersion","featureVariationRecordCount","featureVariationRecords","PredefinedOp","predefinedOps","index","CFFEncodingVersion","_r$Number","Range1","first","nLeft","Range2","CFFCustomEncoding","nCodes","codes","nRanges","ranges","CFFEncoding","RangeArray","_r$Array","res","range","CFFCustomCharset","CharStrings","CFFCharset","FDRange3","fd","FDRange4","FDSelect","fds","sentinel","CFFPrivateOp","FontDict","CFFTopDict","VariationStore","itemVariationStore","CFF2TopDict","CFFTop","fixed16","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDict","CFFFont","top","isCIDFont","ROS","sid","getCharString","glyph","readBuffer","getGlyphName","gid","charset","fdForGlyph","low","high","mid","privateDictForGlyph","FDArray","Private","get$$1","FullName","FamilyName","VerticalOrigin","glyphIndex","vertOriginY","VORG","defaultVertOriginY","numVertOriginYMetrics","BigMetrics","height","width","horiBearingX","horiBearingY","horiAdvance","vertBearingX","vertBearingY","vertAdvance","SmallMetrics","bearingX","bearingY","EBDTComponent","xOffset","yOffset","ByteAligned","BitAligned","data","pad","numComponents","components","dataLen","SBitLineMetrics","ascender","descender","widthMax","caretSlopeNumerator","caretSlopeDenominator","minOriginSB","minAdvanceSB","maxBeforeBL","minAfterBL","CodeOffsetPair","glyphCode","IndexSubtable","imageFormat","imageDataOffset","offsetArray","lastGlyphIndex","firstGlyphIndex","imageSize","bigMetrics","glyphArray","glyphCodeArray","IndexSubtableArray","subtable","BitmapSizeTable","indexSubTableArray","indexTablesSize","numberOfIndexSubTables","colorRef","hori","vert","startGlyphIndex","endGlyphIndex","ppemX","ppemY","bitDepth","EBLC","numSizes","ImageTable","ppem","resolution","imageOffsets","sbix","numImgTables","imageTables","LayerRecord","paletteIndex","BaseGlyphRecord","firstLayerIndex","numLayers","COLR","numBaseGlyphRecords","baseGlyphRecord","layerRecords","numLayerRecords","ColorRecord","blue","green","red","alpha","CPAL","numPaletteEntries","numPalettes","numColorRecords","colorRecords","colorRecordIndices","offsetPaletteTypeArray","offsetPaletteLabelArray","offsetPaletteEntryLabelArray","BaseCoord","coordinate","referenceGlyph","baseCoordPoint","deviceTable","BaseValues","defaultIndex","baseCoordCount","baseCoords","FeatMinMaxRecord","minCoord","maxCoord","MinMax","featMinMaxCount","featMinMaxRecords","BaseLangSysRecord","minMax","BaseScript","baseValues","defaultMinMax","baseLangSysCount","baseLangSysRecords","BaseScriptRecord","BaseScriptList","BaseTagList","Axis","baseTagList","baseScriptList","BASE","horizAxis","vertAxis","AttachPoint","AttachList","attachPoints","CaretValue","caretValuePoint","LigGlyph","LigCaretList","ligGlyphCount","ligGlyphs","MarkGlyphSetsDef","markSetTableFormat","markSetCount","GDEF","glyphClassDef","attachList","ligCaretList","markAttachClassDef","markGlyphSetsDef","ValueFormat","types","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","yPlaDevice","xAdvDevice","yAdvDevice","ValueRecord","buildStruct","struct","rel","PairValueRecord","secondGlyph","value1","value2","PairSet","Class2Record","Anchor","xCoordinate","yCoordinate","anchorPoint","xDeviceTable","yDeviceTable","EntryExitRecord","entryAnchor","exitAnchor","MarkRecord","markAnchor","MarkArray","BaseRecord","classCount","BaseArray","ComponentRecord","LigatureAttach","LigatureArray","GPOSLookup","valueFormat","valueCount","values","valueFormat1","valueFormat2","pairSetCount","pairSets","classDef1","classDef2","class1Count","class2Count","classRecords","entryExitCount","entryExitRecords","markCoverage","baseCoverage","markArray","baseArray","ligatureCoverage","ligatureArray","mark1Coverage","mark2Coverage","mark1Array","mark2Array","posFormat","extension","GPOS","scriptList","featureList","lookupList","featureVariations","Sequence","AlternateSet","Ligature","compCount","LigatureSet","GSUBLookup","deltaGlyphID","substitute","substFormat","sequences","alternateSet","ligatureSets","substitutes","GSUB","JstfGSUBModList","JstfPriority","shrinkageEnableGSUB","shrinkageDisableGSUB","shrinkageEnableGPOS","shrinkageDisableGPOS","shrinkageJstfMax","extensionEnableGSUB","extensionDisableGSUB","extensionEnableGPOS","extensionDisableGPOS","extensionJstfMax","JstfLangSys","JstfLangSysRecord","jstfLangSys","JstfScript","extenderGlyphs","langSysCount","JstfScriptRecord","JSTF","scriptCount","VariableSizeNumber","_size","readUInt24BE","MapDataEntry","entry","entryFormat","outerIndex","innerIndex","DeltaSetIndexMap","mapCount","mapData","HVAR","advanceWidthMapping","LSBMapping","RSBMapping","Signature","SignatureBlock","cbSignature","signature","DSIG","ulVersion","usNumSigs","usFlag","signatures","signatureBlocks","GaspRange","rangeMaxPPEM","rangeGaspBehavior","gasp","numRanges","gaspRanges","DeviceRecord","pixelSize","maximumWidth","widths","hdmx","sizeDeviceRecord","KernPair","left","right","ClassTable","firstGlyph","nGlyphs","Kern2Array","off","leftTable","rowWidth","KernSubtable","nPairs","pairs","rightTable","array","kernValueCount","leftClassCount","rightClassCount","kernValue","leftClass","rightClass","kernIndex","KernTable","subVersion","padding","tupleIndex","kern","nTables","LTSH","yPels","PCLT","fontNumber","pitch","style","typeFamily","symbolSet","typeface","characterComplement","fileName","strokeWeight","widthType","serifStyle","Ratio","bCharSet","xRatio","yStartRatio","yEndRatio","vTable","yPelHeight","VdmxGroup","recs","startsz","endsz","entries","VDMX","numRecs","numRatios","ratioRanges","vhea","advanceHeightMax","minTopSideBearing","minBottomSideBearing","yMaxExtent","VmtxEntry","vmtx","shortFrac","Correspondence","fromCoord","toCoord","Segment","pairCount","correspondence","avar","segment","UnboundedArrayAccessor","base","_items","getItem","inspect","name","UnboundedArray","LookupTable","ValueType","Shadow","BinarySearchHeader","unitSize","nUnits","LookupSegmentSingle","lastGlyph","LookupSegmentArray","LookupSingle","binarySearchHeader","segments","StateTable","entryData","assign","newState","Entry","StateArray","nClasses","StateHeader","classTable","stateArray","entryTable","StateTable1","ClassLookupTable","newStateOffset","StateHeader1","BslnSubtable","mappingData","standardGlyph","controlPoints","bsln","defaultBaseline","Setting","setting","fontFeatures","FeatureName","nSettings","settingTable","featureFlags","defaultSetting","feat","featureNameCount","reserved1","reserved2","featureNames","Axis$1","axisTag","minValue","defaultValue","maxValue","Instance","coord","postscriptNameID","instanceSize","fvar","offsetToData","countSizePairs","axisSize","instanceCount","axis","shortFrac$1","Offset","gvar","globalCoordCount","globalCoords","ClassTable$1","subFeatureFlags","stateTable","WidthDeltaRecord","justClass","beforeGrowLimit","beforeShrinkLimit","afterGrowLimit","afterShrinkLimit","growFlags","shrinkFlags","WidthDeltaCluster","ActionData","lowerLimit","upperLimit","order","addGlyph","substThreshold","substGlyph","variationAxis","minimumLimit","noStretchValue","maximumLimit","Action","actionClass","actionType","actionLength","actionData","PostcompensationAction","PostCompensationTable","lookupTable","JustificationTable","wdcOffset","postCompensationTable","widthDeltaClusters","just","horizontal","vertical","LigatureData","action","ContextualData","markIndex","currentIndex","InsertionData","currentInsertIndex","markedInsertIndex","SubstitutionTable","items","SubtableData","substitutionTable","ligatureActions","ligatureList","insertionActions","Subtable","FeatureEntry","featureType","featureSetting","enableFlags","disableFlags","MorxChain","defaultFlags","chainLength","nFeatureEntries","nSubtables","features","subtables","morx","unused","nChains","chains","OpticalBounds","bottom","opbd","CBLC","TableEntry","checkSum","Directory","numTables","tables$$1","VoidPointer","floor","log","LN2","binarySearch","cmp","min","_class$1","_applyDecoratedDescriptor$1","property","decorators","context","desc","forEach","initializer","slice","reverse","reduce","decorator","iconv","require","CmapProcessor","cmapTable","encoding","findSubtable","encodingExists","uvs","lookup","codepoint","variationSelector","buf","fromCodePoint","getVariationSelector","rangeOffset","_gid","_min","_max","_mid","group","selectors","toArray","x","sel","getCharacterSet","endCodes","tail","_res","codePointsForGlyph","_res2","delta","c","g","_res3","_i6","_ref6","_res4","_iterator6","_isArray6","_i7","_ref7","_group","getOwnPropertyDescriptor","KernProcessor","positions","id","getKerning","crossStream","variation","pairIdx","pair","leftOffset","rightOffset","override","UnicodeLayoutEngine","positionGlyphs","clusterStart","clusterEnd","isMark","positionCluster","baseBox","cbox","copy","codePoints","minX","yGap","mark","markBox","position","combiningClass","getCombiningClass","maxX","minY","maxY","codePoint","BBox","Infinity","addPoint","y","abs","UNICODE_SCRIPTS","Caucasian_Albanian","Arabic","Imperial_Aramaic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Chakma","Canadian_Aboriginal","Carian","Cham","Cherokee","Coptic","Cypriot","Cyrillic","Devanagari","Deseret","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Hangul","Han","Hanunoo","Hebrew","Hiragana","Pahawh_Hmong","Katakana_Or_Hiragana","Old_Italic","Javanese","Kayah_Li","Katakana","Kharoshthi","Khmer","Khojki","Kannada","Kaithi","Tai_Tham","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Mandaic","Manichaean","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Malayalam","Modi","Mongolian","Mro","Meetei_Mayek","Myanmar","Old_North_Arabian","Nabataean","Nko","Ogham","Ol_Chiki","Old_Turkic","Oriya","Osmanya","Palmyrene","Pau_Cin_Hau","Old_Permic","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Miao","Inscriptional_Parthian","Rejang","Runic","Samaritan","Old_South_Arabian","Saurashtra","Shavian","Sharada","Siddham","Khudawadi","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagbanwa","Takri","Tai_Le","New_Tai_Lue","Tamil","Tai_Viet","Telugu","Tifinagh","Tagalog","Thaana","Thai","Tibetan","Tirhuta","Ugaritic","Vai","Warang_Citi","Old_Persian","Cuneiform","Yi","Inherited","Common","Unknown","OPENTYPE_SCRIPTS","fromOpenType","forString","idx","code","charCodeAt","_script","getScript","RTL","arab","hebr","syrc","thaa","cprt","khar","phnx","lydi","avst","armi","phli","prti","sarb","orkh","samr","mand","merc","mero","mani","mend","nbat","narb","palm","phlp","direction","GlyphRun","direction$$1","stringIndices","bbox","p","GlyphPosition","allTypographicFeatures","exclusive","allTypeFeatures","ligatures","requiredLigatures","commonLigatures","rareLigatures","rebusPictures","diphthongLigatures","squaredLigatures","abbrevSquaredLigatures","symbolLigatures","contextualLigatures","historicalLigatures","cursiveConnection","unconnected","partiallyConnected","cursive","letterCase","verticalSubstitution","substituteVerticalForms","linguisticRearrangement","numberSpacing","monospacedNumbers","proportionalNumbers","thirdWidthNumbers","quarterWidthNumbers","smartSwash","wordInitialSwashes","wordFinalSwashes","nonFinalSwashes","diacritics","showDiacritics","hideDiacritics","decomposeDiacritics","verticalPosition","normalPosition","superiors","inferiors","ordinals","scientificInferiors","fractions","noFractions","verticalFractions","diagonalFractions","overlappingCharacters","preventOverlap","typographicExtras","slashedZero","mathematicalExtras","mathematicalGreek","ornamentSets","noOrnaments","dingbats","piCharacters","fleurons","decorativeBorders","internationalSymbols","mathSymbols","characterAlternatives","noAlternates","designComplexity","designLevel1","designLevel2","designLevel3","designLevel4","designLevel5","styleOptions","noStyleOptions","displayText","engravedText","illuminatedCaps","titlingCaps","tallCaps","characterShape","traditionalCharacters","simplifiedCharacters","JIS1978Characters","JIS1983Characters","JIS1990Characters","traditionalAltOne","traditionalAltTwo","traditionalAltThree","traditionalAltFour","traditionalAltFive","expertCharacters","JIS2004Characters","hojoCharacters","NLCCharacters","traditionalNamesCharacters","numberCase","lowerCaseNumbers","upperCaseNumbers","textSpacing","proportionalText","monospacedText","halfWidthText","thirdWidthText","quarterWidthText","altProportionalText","altHalfWidthText","transliteration","noTransliteration","annotation","noAnnotation","boxAnnotation","roundedBoxAnnotation","circleAnnotation","invertedCircleAnnotation","parenthesisAnnotation","periodAnnotation","romanNumeralAnnotation","diamondAnnotation","invertedBoxAnnotation","invertedRoundedBoxAnnotation","kanaSpacing","fullWidthKana","proportionalKana","ideographicSpacing","fullWidthIdeographs","proportionalIdeographs","halfWidthIdeographs","unicodeDecomposition","canonicalComposition","compatibilityComposition","transcodingComposition","rubyKana","CJKSymbolAlternatives","noCJKSymbolAlternatives","CJKSymbolAltOne","CJKSymbolAltTwo","CJKSymbolAltThree","CJKSymbolAltFour","CJKSymbolAltFive","ideographicAlternatives","noIdeographicAlternatives","ideographicAltOne","ideographicAltTwo","ideographicAltThree","ideographicAltFour","ideographicAltFive","CJKVerticalRomanPlacement","CJKVerticalRomanCentered","CJKVerticalRomanHBaseline","italicCJKRoman","CJKItalicRoman","caseSensitiveLayout","caseSensitiveSpacing","alternateKana","alternateHorizKana","alternateVertKana","stylisticAlternatives","noStylisticAlternates","stylisticAltOne","stylisticAltTwo","stylisticAltThree","stylisticAltFour","stylisticAltFive","stylisticAltSix","stylisticAltSeven","stylisticAltEight","stylisticAltNine","stylisticAltTen","stylisticAltEleven","stylisticAltTwelve","stylisticAltThirteen","stylisticAltFourteen","stylisticAltFifteen","stylisticAltSixteen","stylisticAltSeventeen","stylisticAltEighteen","stylisticAltNineteen","stylisticAltTwenty","contextualAlternates","swashAlternates","contextualSwashAlternates","lowerCase","defaultLowerCase","lowerCaseSmallCaps","lowerCasePetiteCaps","upperCase","defaultUpperCase","upperCaseSmallCaps","upperCasePetiteCaps","languageTag","CJKRomanSpacing","halfWidthCJKRoman","proportionalCJKRoman","defaultCJKRoman","fullWidthCJKRoman","selector","OTMapping","rlig","clig","dlig","hlig","liga","hist","smcp","pcap","frac","dnom","numr","afrc","case","ccmp","cpct","valt","swsh","cswh","curs","c2pc","c2sc","init","fin2","medi","med2","fin3","fina","pkna","half","halt","hkna","vkna","ital","lnum","onum","mgrk","calt","vrt2","tnum","pnum","sups","subs","ordn","pwid","hwid","qwid","twid","fwid","palt","trad","smpl","jp78","jp83","jp90","jp04","expt","hojo","nlck","tnam","ruby","titl","zero","ss01","ss02","ss03","ss04","ss05","ss06","ss07","ss08","ss09","ss10","ss11","ss12","ss13","ss14","ss15","ss16","ss17","ss18","ss19","ss20","AATMapping","ot","aat","mapOTToAAT","r$$1","mapFeatureStrings","f","isNaN","typeCode","settingCode","mapAATToOT","_feature","_r","_f","keys","_class$3","_applyDecoratedDescriptor$3","AATLookupTable","seg","glyphsForValue","classValue","_segment","START_OF_TEXT_STATE","END_OF_TEXT_CLASS","OUT_OF_BOUNDS_CLASS","DELETED_GLYPH_CLASS","DONT_ADVANCE","AATStateMachine","processEntry","currentState","dir","classCode","shouldAdvance","row","entryIndex","traverse","opts","state","visited","Set","add","_stateTable","enter","exit","_class$2","_applyDecoratedDescriptor$2","MARK_FIRST","MARK_LAST","VERB","SET_MARK","SET_COMPONENT","PERFORM_ACTION","LAST_MASK","STORE_MASK","OFFSET_MASK","REVERSE_DIRECTION","CURRENT_INSERT_BEFORE","MARKED_INSERT_BEFORE","CURRENT_INSERT_COUNT","MARKED_INSERT_COUNT","AATMorxProcessor","processIndicRearragement","bind","processContextualSubstitution","processLigature","processNoncontextualSubstitutions","processGlyphInsertion","inputCache","chain","processSubtable","splice","ligatureStack","markedGlyph","markedIndex","stateMachine","getStateMachine","getProcessor","reorderGlyphs","subsitutions","getGlyph","_lookup","_lookupTable","_ligatureStack","actions","actionIndex","last","ligatureIndex","ligatureGlyphs","_codePoints","componentGlyph","unshift","store","component","ligatureEntry","_insertGlyphs","insertionActionIndex","isBefore","_glyphs","insertions","_count","_isBefore","getSupportedFeatures","generateInputs","generateInputCache","_iterator7","_isArray7","generateInputsForSubtable","stack","found","_cache","_stack$pop","swap","rangeA","rangeB","reverseA","reverseB","verb","AATLayoutEngine","morxProcessor","fallbackPosition","glyphRun","getAvailableFeatures","stringsForGlyph","glyphStrings","_addStrings","strings","_cmapProcessor","ShapingPlan","stages","globalFeatures","allFeatures","_addFeatures","global","stageIndex","stage","arg","local","addStage","setFeatureOverrides","assignGlobalFeatures","processor","applyFeatures","_class$4","_temp","VARIATION_FEATURES","COMMON_FEATURES","FRACTIONAL_FEATURES","HORIZONTAL_FEATURES","DIRECTIONAL_FEATURES","ltr","rtl","DefaultShaper","plan","_plan","planPreprocessing","planFeatures","planPostprocessing","assignFeatures","userFeatures","isDigit","zeroMarkWidths","trieData","trie","Uint8Array","FEATURES","ShapingClasses","Non_Joining","Left_Joining","Right_Joining","Dual_Joining","Join_Causing","ALAPH","Transparent","ISOL","FINA","FIN2","FIN3","MEDI","MED2","INIT","NONE","STATE_TABLE","ArabicShaper","_DefaultShaper","prev","curAction","prevAction","type$$1","getShapingClass","_STATE_TABLE$state$ty","category","getCategory","GlyphIterator","reset","shouldIgnore","ignoreMarks","ignoreBaseGlyphs","isBase","ignoreLigatures","isLigature","move","peek","increment","peekIndex","DEFAULT_SCRIPTS","OTProcessor","scriptTag","lookups","variationsIndex","_variationProcessor","findVariationsIndex","normalizedCoords","selectScript","ligatureID","currentFeature","findScript","changed","repeat","lang","substituteFeature","substituteFeatureForVariations","lookupsForFeatures","exclude","lookupIndex","sort","substitution","coords","variations","conditions","variationConditionsMatch","every","condition","advances","applyLookups","glyphIterator","_iterator8","_isArray8","_i8","_ref8","_ref9","cur","_iterator9","_isArray9","_i9","_ref10","applyLookup","applyLookupList","_iterator10","_isArray10","_i10","_ref11","lookupRecord","_iterator11","_isArray11","_i11","_ref12","coverageIndex","_iterator12","_isArray12","_i12","_ref13","match","sequence","matched","sequenceMatches","sequenceMatchIndices","coverageSequenceMatches","getClassID","_iterator13","_isArray13","_i13","_ref14","classSequenceMatches","_this3","classID","applyContext","set$$1","_iterator14","_isArray14","_i14","_ref15","rule","_iterator15","_isArray15","_i15","_ref16","_rule","applyChainingContext","_iterator16","_isArray16","_i16","_ref17","rules","_iterator17","_isArray17","_i17","_ref18","_rule2","GlyphInfo","_font","ligatureComponent","isLigated","cursiveAttachment","markAttachment","shaperInfo","substituted","isMultiplied","_id","advanceWidth","_class$5","_temp$1","HangulShaper","getType","STATE_TABLE$1","DECOMPOSE","hasGlyphForCodePoint","decompose","COMPOSE","compose","TONE_MARK","reorderToneMark","INVALID","insertDottedCircle","HANGUL_BASE","HANGUL_END","HANGUL_COUNT","L_BASE","V_BASE","T_BASE","L_COUNT","V_COUNT","T_COUNT","L_END","V_END","T_END","DOTTED_CIRCLE","isL","isV","isT","isTone","isLVT","isLV","isCombiningL","isCombiningV","isCombiningT","X","L","V","T","LV","LVT","M","NO_ACTION","glyphForCodePoint","l","v","ljmo","vjmo","insert","tjmo","prevType","lv","del","getLength","dottedCircle","accepting","tags","indicMachine","categories","decompositions$1","stateTable$1","accepting$1","tags$1","useData","decompositions","CATEGORIES","C","N","H","ZWNJ","ZWJ","SM","VD","A","Placeholder","Dotted_Circle","RS","Coeng","Repha","Ra","CM","POSITIONS","Start","Ra_To_Become_Reph","Pre_M","Pre_C","Base_C","After_Main","Above_C","Before_Sub","Below_C","After_Sub","Before_Post","Post_C","After_Post","Final_C","SMVD","End","CONSONANT_FLAGS","JOINER_FLAGS","HALANT_OR_COENG_FLAGS","INDIC_CONFIGS","Default","hasOldSpec","virama","basePos","rephPos","rephMode","blwfMode","INDIC_DECOMPOSITIONS","type$1","data$1","trieData$1","_class$6","_temp$2","trie$1","IndicShaper","setupSyllables","initialReordering","finalReordering","unicodeScript","indicConfig","isOldSpec","_loop","d","decomposed","indicCategory","indicPosition","IndicInfo","syllableType","syllable","tags$$1","isConsonant","isJoiner","isHalantOrCoeng","wouldSubstitute","_glyph$features","_layoutEngine","engine","GSUBProcessor","consonantPosition","consonant","info","nextSyllable","_glyphs$start$shaperI","limit","hasReph","rphf","_g","seenBelow","_info","_info2","j","disallowDoubleHalants","_j","lastPos","_info3","_j2","_j3","blwf","abvf","pstf","prefLen","pref","_i18","_g2","_j4","cfar","_i19","nonJoiner","_j5","tryPref","BASE_C","_i20","newPos","_i21","oldPos","tmp","newRephPos","_i22","reph","_i23","_newPos","_oldPos2","_oldPos","_tmp","test","type$2","data$2","trieData$2","_class$7","_temp$3","categories$1","decompositions$2","trie$2","stateMachine$1","UniversalShaper","setupSyllables$1","clearSubstitutionFlags","recordRphf","recordPref","reorder","useCategory","USEInfo","nextSyllable$1","isHalant","SHAPERS","mong","phag","hang","bng2","beng","dev2","deva","gjr2","gujr","guru","gur2","knda","knd2","mlm2","mlym","ory2","orya","taml","tml2","telu","tel2","khmr","bali","batk","brah","bugi","buhd","cakm","cham","dupl","egyp","gran","hano","java","kthi","kali","khoj","sind","lepc","limb","mahj","mtei","modi","hmng","rjng","saur","shrd","sidd","sinh","sund","sylo","tglg","tagb","tale","lana","tavt","takr","tibt","tfng","tirh","latn","DFLT","choose","shaper","_OTProcessor","_index","curGlyph","replacement","_index2","USER_INDEX","_index3","ligature","_curGlyph","characters","_index4","ligatureGlyph","isMarkLigature","lastLigID","lastNumComps","curComps","matchIndex","GPOSProcessor","applyPositionValue","variationProcessor","variationStore","getDelta","nextGlyph","_pair","class1","class2","nextIndex","_nextGlyph","curRecord","nextRecord","getAnchor","rightToLeft","baseGlyphIndex","baseIndex","markRecord","baseAnchor","applyAnchor","_markIndex","_baseGlyphIndex","ligIndex","ligAttach","markGlyph","ligGlyph","compIndex","_markRecord","_baseAnchor","mark1Index","prevIndex","_cur","good","mark2Index","_markRecord2","_baseAnchor2","markCoords","markPos","anchor","fixCursiveAttachment","fixMarkAttachment","_k","OTLayoutEngine","setup","zeroMarkAdvances","cleanup","glyphInfos","LayoutEngine","unicodeLayoutEngine","kernProcessor","layout","glyphsForString","hideDefaultIgnorables","glyphInfo","nextState","positioned","space","isDefaultIgnorable","ch","plane","from","SVG_COMMANDS","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","closePath","Path","commands","_bbox","_cbox","toFunction","cmds","command","join","Function","toSVG","round","mapPoints","path","_fn","transform","m0","m1","m2","m3","m4","m5","translate","rotate","angle","cos","sin","scale","scaleX","scaleY","freeze","cx","cy","pow","p0","p1","p2","p3","_c$args","_c$args2","qp1x","qp1y","p3x","p3y","cp1x","cp1y","cp2x","cp2y","_c$args3","b2ac","t1","sqrt","t2","_arr","StandardNames","_class$8","_applyDecoratedDescriptor$4","Glyph","_getPath","_getCBox","_getBBox","_getTableMetrics","metric","_getMetrics","_metrics","_getTableMetrics2","leftBearing","_getTableMetrics3","advanceHeight","topBearing","os2","getAdvanceAdjustment","getScaledPath","_getName","fromCharCode","render","save","fill","restore","GlyfHeader","numberOfContours","ON_CURVE","X_SHORT_VECTOR","Y_SHORT_VECTOR","REPEAT","SAME_X","SAME_Y","ARG_1_AND_2_ARE_WORDS","WE_HAVE_A_SCALE","MORE_COMPONENTS","WE_HAVE_AN_X_AND_Y_SCALE","WE_HAVE_A_TWO_BY_TWO","WE_HAVE_INSTRUCTIONS","Point","onCurve","endContour","Component","dx","dy","scale01","scale10","TTFGlyph","_Glyph","internal","_getTableStream","_parseGlyphCoord","short","same","_decode","glyfPos","nextPos","_decodeSimple","_decodeComposite","points","endPtsOfContours","numCoords","flag","point","px","py","_getPhantomPoints","transformPoints","phantomPoints","haveInstructions","gPos","readInt8","_getContours","_contours","contour","_point","directory","contours","firstPt","lastPt","curvePt","pt","prevPt","midX","midY","CFFGlyph","CFF2","bias","cff","trans","nStems","usedGsubrs","usedSubrs","_usedGsubrs","_usedSubrs","gsubrs","gsubrsBias","privateDict","subrs","Subrs","subrsBias","vstore","vsindex","checkWidth","shift","nominalWidthX","parseStems","parse","phase","c1x","c1y","c2x","c2y","subr","blendVector","getBlendVector","numOperands","sum","s1","s2","v1","v2","random","n","c3x","c3y","c4x","c4y","c5x","c5y","c6x","c6y","pts","startx","starty","b1","SBIXImage","originX","originY","buflen","SBIXGlyph","_TTFGlyph","getImageForSize","img","image","renderOutlines","COLRLayer","color","COLRGlyph","layers","layer","fillColor","cpal","colr","rec","baseLayer","_getBaseGlyph","TUPLES_SHARE_POINT_NUMBERS","TUPLE_COUNT_MASK","EMBEDDED_TUPLE_COORD","INTERMEDIATE_TUPLE","PRIVATE_POINT_NUMBERS","TUPLE_INDEX_MASK","POINTS_ARE_WORDS","POINT_RUN_COUNT_MASK","DELTAS_ARE_ZERO","DELTAS_ARE_WORDS","DELTA_RUN_COUNT_MASK","GlyphVariationProcessor","normalizeCoords","blendVectors","normalized","EPSILON","glyphPoints","tupleCount","here","sharedPoints","decodePoints","origPoints","tupleDataSize","tupleCoords","startCoords","_a","endCoords","_a2","factor","tupleFactor","nPoints","xDeltas","decodeDeltas","yDeltas","outPoints","hasDelta","interpolateMissingDeltas","deltaX","deltaY","Uint16Array","run","runCount","readUInt16","Int16Array","inPoints","firstPoint","endPoint","firstDelta","curDelta","deltaInterpolate","deltaShift","ref1","ref2","iterable","in1","in2","out1","out2","_p","out","ref","_table$advanceWidthMa","itemStore","varData","deltaSet","netAdjustment","master","scalar","regionIndex","axes","axisScalar","Subset","mapping","includeGlyph","encodeStream","EncodeStream","nextTick","ON_CURVE$1","X_SHORT_VECTOR$1","Y_SHORT_VECTOR$1","REPEAT$1","SAME_X$1","SAME_Y$1","Point$1","Glyf","xPoints","yPoints","TTFGlyphEncoder","encodeSimple","lastX","lastY","lastFlag","pointCount","_encodePoint","shortFlag","sameFlag","diff","TTFSubset","_Subset","glyphEncoder","_addGlyph","curOffset","nextOffset","CFFSubset","subsetCharstrings","charstrings","subsetSubrs","used","subsetFontdict","used_fds","used_subrs","FontName","createCIDFontdict","addString","Encoding","CIDCount","_class","_applyDecoratedDescriptor","TTFFont","toString","variationCoords","_directoryPos","_tables","_decodeDirectory","_getTable","_decodeTable","console","error","getName","createSubset","getVariation","settings","namedVariations","trim","default","WOFFDirectoryEntry","compLength","origChecksum","WOFFDirectory","flavor","totalSfntSize","metaOffset","metaLength","metaOrigLength","privOffset","privLength","WOFFFont","_TTFFont","outBuffer","alloc","TTCHeader","numFonts","dsigTag","dsigLength","dsigOffset","TrueTypeCollection","readString","fonts","DFontName","DFontData","Ref","nameOffset","attr","dataOffset","handle","Type","maxTypeIndex","refList","TypeList","DFontMap","typeList","nameListOffset","DFontHeader","dataLength","mapLength","DFont","sfnt"],"sources":["/home/ubuntu/king/portal/client-portal-starter/node_modules/@react-pdf/fontkit/dist/fontkit.browser.es.js"],"sourcesContent":["import r from 'restructure';\nimport { PropertyDescriptor, resolveLength } from 'restructure/src/utils';\nimport isEqual from 'deep-equal';\nimport unicode from '@react-pdf/unicode-properties';\nimport UnicodeTrie from 'unicode-trie';\nimport StateMachine from 'dfa';\nimport cloneDeep from 'clone';\nimport inflate from 'tiny-inflate';\n\nvar fs = {}\n\nvar fontkit$1 = {};\nfontkit$1.logErrors = false;\n\nvar formats = [];\nfontkit$1.registerFormat = function (format) {\n  formats.push(format);\n};\n\nfontkit$1.openSync = function (filename, postscriptName) {\n  {\n    throw new Error('fontkit.openSync unavailable for browser build');\n  }\n  var buffer = fs.readFileSync(filename);\n  return fontkit$1.create(buffer, postscriptName);\n};\n\nfontkit$1.open = function (filename, postscriptName, callback) {\n  {\n    throw new Error('fontkit.open unavailable for browser build');\n  }\n\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n\n  fs.readFile(filename, function (err, buffer) {\n    if (err) {\n      return callback(err);\n    }\n\n    try {\n      var font = fontkit$1.create(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n\n    return callback(null, font);\n  });\n\n  return;\n};\n\nfontkit$1.create = function (buffer, postscriptName) {\n  for (var i = 0; i < formats.length; i++) {\n    var format = formats[i];\n    if (format.probe(buffer)) {\n      var font = new format(new r.DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\n/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nfunction cache(target, key, descriptor) {\n  if (descriptor.get) {\n    var get = descriptor.get;\n    descriptor.get = function () {\n      var value = get.call(this);\n      Object.defineProperty(this, key, { value: value });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    var fn = descriptor.value;\n\n    return {\n      get: function get() {\n        var cache = new Map();\n        function memoized() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          var result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        }\n\n        Object.defineProperty(this, key, { value: memoized });\n        return memoized;\n      }\n    };\n  }\n}\n\nvar SubHeader = new r.Struct({\n  firstCode: r.uint16,\n  entryCount: r.uint16,\n  idDelta: r.int16,\n  idRangeOffset: r.uint16\n});\n\nvar CmapGroup = new r.Struct({\n  startCharCode: r.uint32,\n  endCharCode: r.uint32,\n  glyphID: r.uint32\n});\n\nvar UnicodeValueRange = new r.Struct({\n  startUnicodeValue: r.uint24,\n  additionalCount: r.uint8\n});\n\nvar UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID: r.uint16\n});\n\nvar DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nvar NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\n\nvar VarSelectorRecord = new r.Struct({\n  varSelector: r.uint24,\n  defaultUVS: new r.Pointer(r.uint32, DefaultUVS, { type: 'parent' }),\n  nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, { type: 'parent' })\n});\n\nvar CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: { // Byte encoding\n    length: r.uint16, // Total table length in bytes (set to 262 for format 0)\n    language: r.uint16, // Language code for this encoding subtable, or zero if language-independent\n    codeMap: new r.LazyArray(r.uint8, 256)\n  },\n\n  2: { // High-byte mapping (CJK)\n    length: r.uint16,\n    language: r.uint16,\n    subHeaderKeys: new r.Array(r.uint16, 256),\n    subHeaderCount: function subHeaderCount(t) {\n      return Math.max.apply(Math, t.subHeaderKeys);\n    },\n    subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n\n  4: { // Segment mapping to delta values\n    length: r.uint16, // Total table length in bytes\n    language: r.uint16, // Language code\n    segCountX2: r.uint16,\n    segCount: function segCount(t) {\n      return t.segCountX2 >> 1;\n    },\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    endCode: new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad: new r.Reserved(r.uint16), // This value should be zero\n    startCode: new r.LazyArray(r.uint16, 'segCount'),\n    idDelta: new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, function (t) {\n      return (t.length - t._currentOffset) / 2;\n    })\n  },\n\n  6: { // Trimmed table\n    length: r.uint16,\n    language: r.uint16,\n    firstCode: r.uint16,\n    entryCount: r.uint16,\n    glyphIndices: new r.LazyArray(r.uint16, 'entryCount')\n  },\n\n  8: { // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint16,\n    is32: new r.LazyArray(r.uint8, 8192),\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  10: { // Trimmed Array\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    firstCode: r.uint32,\n    entryCount: r.uint32,\n    glyphIndices: new r.LazyArray(r.uint16, 'numChars')\n  },\n\n  12: { // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  14: { // Unicode Variation Sequences\n    length: r.uint32,\n    numRecords: r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\n\nvar CmapEntry = new r.Struct({\n  platformID: r.uint16, // Platform identifier\n  encodingID: r.uint16, // Platform-specific encoding identifier\n  table: new r.Pointer(r.uint32, CmapSubtable, { type: 'parent', lazy: true })\n});\n\n// character to glyph mapping\nvar cmap = new r.Struct({\n  version: r.uint16,\n  numSubtables: r.uint16,\n  tables: new r.Array(CmapEntry, 'numSubtables')\n});\n\n// font header\nvar head = new r.Struct({\n  version: r.int32, // 0x00010000 (version 1.0)\n  revision: r.int32, // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber: r.uint32, // set to 0x5F0F3CF5\n  flags: r.uint16,\n  unitsPerEm: r.uint16, // range from 64 to 16384\n  created: new r.Array(r.int32, 2),\n  modified: new r.Array(r.int32, 2),\n  xMin: r.int16, // for all glyph bounding boxes\n  yMin: r.int16, // for all glyph bounding boxes\n  xMax: r.int16, // for all glyph bounding boxes\n  yMax: r.int16, // for all glyph bounding boxes\n  macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: r.uint16, // smallest readable size in pixels\n  fontDirectionHint: r.int16,\n  indexToLocFormat: r.int16, // 0 for short offsets, 1 for long\n  glyphDataFormat: r.int16 // 0 for current format\n});\n\n// horizontal header\nvar hhea = new r.Struct({\n  version: r.int32,\n  ascent: r.int16, // Distance from baseline of highest ascender\n  descent: r.int16, // Distance from baseline of lowest descender\n  lineGap: r.int16, // Typographic line gap\n  advanceWidthMax: r.uint16, // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing: r.int16, // Maximum advance width value in 'hmtx' table\n  minRightSideBearing: r.int16, // Minimum right sidebearing value\n  xMaxExtent: r.int16,\n  caretSlopeRise: r.int16, // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun: r.int16, // 0 for vertical\n  caretOffset: r.int16, // Set to 0 for non-slanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16, // 0 for current format\n  numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table\n});\n\nvar HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\n\nvar hmtx = new r.Struct({\n  metrics: new r.LazyArray(HmtxEntry, function (t) {\n    return t.parent.hhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;\n  })\n});\n\n// maxiumum profile\nvar maxp = new r.Struct({\n  version: r.int32,\n  numGlyphs: r.uint16, // The number of glyphs in the font\n  maxPoints: r.uint16, // Maximum points in a non-composite glyph\n  maxContours: r.uint16, // Maximum contours in a non-composite glyph\n  maxComponentPoints: r.uint16, // Maximum points in a composite glyph\n  maxComponentContours: r.uint16, // Maximum contours in a composite glyph\n  maxZones: r.uint16, // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints: r.uint16, // Maximum points used in Z0\n  maxStorage: r.uint16, // Number of Storage Area locations\n  maxFunctionDefs: r.uint16, // Number of FDEFs\n  maxInstructionDefs: r.uint16, // Number of IDEFs\n  maxStackElements: r.uint16, // Maximum stack depth\n  maxSizeOfInstructions: r.uint16, // Maximum byte count for glyph instructions\n  maxComponentElements: r.uint16, // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components\n});\n\n/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nfunction getEncoding(platformID, encodingID) {\n  var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n\n  return ENCODINGS[platformID][encodingID];\n}\n\n// Map of platform ids to encoding ids.\nvar ENCODINGS = [\n// unicode\n['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n\n// macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],\n\n// ISO (deprecated)\n['ascii'],\n\n// windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nvar MAC_LANGUAGE_ENCODINGS = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit', // Unsupported by iconv-lite\n  146: 'macgaelic' // Unsupported by iconv-lite\n};\n\n// Map of platform ids to BCP-47 language codes.\nvar LANGUAGES = [\n// unicode\n[], { // macintosh\n  0: 'en', 30: 'fo', 60: 'ks', 90: 'rw',\n  1: 'fr', 31: 'fa', 61: 'ku', 91: 'rn',\n  2: 'de', 32: 'ru', 62: 'sd', 92: 'ny',\n  3: 'it', 33: 'zh', 63: 'bo', 93: 'mg',\n  4: 'nl', 34: 'nl-BE', 64: 'ne', 94: 'eo',\n  5: 'sv', 35: 'ga', 65: 'sa', 128: 'cy',\n  6: 'es', 36: 'sq', 66: 'mr', 129: 'eu',\n  7: 'da', 37: 'ro', 67: 'bn', 130: 'ca',\n  8: 'pt', 38: 'cz', 68: 'as', 131: 'la',\n  9: 'no', 39: 'sk', 69: 'gu', 132: 'qu',\n  10: 'he', 40: 'si', 70: 'pa', 133: 'gn',\n  11: 'ja', 41: 'yi', 71: 'or', 134: 'ay',\n  12: 'ar', 42: 'sr', 72: 'ml', 135: 'tt',\n  13: 'fi', 43: 'mk', 73: 'kn', 136: 'ug',\n  14: 'el', 44: 'bg', 74: 'ta', 137: 'dz',\n  15: 'is', 45: 'uk', 75: 'te', 138: 'jv',\n  16: 'mt', 46: 'be', 76: 'si', 139: 'su',\n  17: 'tr', 47: 'uz', 77: 'my', 140: 'gl',\n  18: 'hr', 48: 'kk', 78: 'km', 141: 'af',\n  19: 'zh-Hant', 49: 'az-Cyrl', 79: 'lo', 142: 'br',\n  20: 'ur', 50: 'az-Arab', 80: 'vi', 143: 'iu',\n  21: 'hi', 51: 'hy', 81: 'id', 144: 'gd',\n  22: 'th', 52: 'ka', 82: 'tl', 145: 'gv',\n  23: 'ko', 53: 'mo', 83: 'ms', 146: 'ga',\n  24: 'lt', 54: 'ky', 84: 'ms-Arab', 147: 'to',\n  25: 'pl', 55: 'tg', 85: 'am', 148: 'el-polyton',\n  26: 'hu', 56: 'tk', 86: 'ti', 149: 'kl',\n  27: 'es', 57: 'mn-CN', 87: 'om', 150: 'az',\n  28: 'lv', 58: 'mn', 88: 'so', 151: 'nn',\n  29: 'se', 59: 'ps', 89: 'sw'\n},\n\n// ISO (deprecated)\n[], { // windows                                        \n  0x0436: 'af', 0x4009: 'en-IN', 0x0487: 'rw', 0x0432: 'tn',\n  0x041C: 'sq', 0x1809: 'en-IE', 0x0441: 'sw', 0x045B: 'si',\n  0x0484: 'gsw', 0x2009: 'en-JM', 0x0457: 'kok', 0x041B: 'sk',\n  0x045E: 'am', 0x4409: 'en-MY', 0x0412: 'ko', 0x0424: 'sl',\n  0x1401: 'ar-DZ', 0x1409: 'en-NZ', 0x0440: 'ky', 0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH', 0x3409: 'en-PH', 0x0454: 'lo', 0x400A: 'es-BO',\n  0x0C01: 'ar', 0x4809: 'en-SG', 0x0426: 'lv', 0x340A: 'es-CL',\n  0x0801: 'ar-IQ', 0x1C09: 'en-ZA', 0x0427: 'lt', 0x240A: 'es-CO',\n  0x2C01: 'ar-JO', 0x2C09: 'en-TT', 0x082E: 'dsb', 0x140A: 'es-CR',\n  0x3401: 'ar-KW', 0x0809: 'en-GB', 0x046E: 'lb', 0x1C0A: 'es-DO',\n  0x3001: 'ar-LB', 0x0409: 'en', 0x042F: 'mk', 0x300A: 'es-EC',\n  0x1001: 'ar-LY', 0x3009: 'en-ZW', 0x083E: 'ms-BN', 0x440A: 'es-SV',\n  0x1801: 'ary', 0x0425: 'et', 0x043E: 'ms', 0x100A: 'es-GT',\n  0x2001: 'ar-OM', 0x0438: 'fo', 0x044C: 'ml', 0x480A: 'es-HN',\n  0x4001: 'ar-QA', 0x0464: 'fil', 0x043A: 'mt', 0x080A: 'es-MX',\n  0x0401: 'ar-SA', 0x040B: 'fi', 0x0481: 'mi', 0x4C0A: 'es-NI',\n  0x2801: 'ar-SY', 0x080C: 'fr-BE', 0x047A: 'arn', 0x180A: 'es-PA',\n  0x1C01: 'aeb', 0x0C0C: 'fr-CA', 0x044E: 'mr', 0x3C0A: 'es-PY',\n  0x3801: 'ar-AE', 0x040C: 'fr', 0x047C: 'moh', 0x280A: 'es-PE',\n  0x2401: 'ar-YE', 0x140C: 'fr-LU', 0x0450: 'mn', 0x500A: 'es-PR',\n  0x042B: 'hy', 0x180C: 'fr-MC', 0x0850: 'mn-CN', 0x0C0A: 'es',\n  0x044D: 'as', 0x100C: 'fr-CH', 0x0461: 'ne', 0x040A: 'es',\n  0x082C: 'az-Cyrl', 0x0462: 'fy', 0x0414: 'nb', 0x540A: 'es-US',\n  0x042C: 'az', 0x0456: 'gl', 0x0814: 'nn', 0x380A: 'es-UY',\n  0x046D: 'ba', 0x0437: 'ka', 0x0482: 'oc', 0x200A: 'es-VE',\n  0x042D: 'eu', 0x0C07: 'de-AT', 0x0448: 'or', 0x081D: 'sv-FI',\n  0x0423: 'be', 0x0407: 'de', 0x0463: 'ps', 0x041D: 'sv',\n  0x0845: 'bn', 0x1407: 'de-LI', 0x0415: 'pl', 0x045A: 'syr',\n  0x0445: 'bn-IN', 0x1007: 'de-LU', 0x0416: 'pt', 0x0428: 'tg',\n  0x201A: 'bs-Cyrl', 0x0807: 'de-CH', 0x0816: 'pt-PT', 0x085F: 'tzm',\n  0x141A: 'bs', 0x0408: 'el', 0x0446: 'pa', 0x0449: 'ta',\n  0x047E: 'br', 0x046F: 'kl', 0x046B: 'qu-BO', 0x0444: 'tt',\n  0x0402: 'bg', 0x0447: 'gu', 0x086B: 'qu-EC', 0x044A: 'te',\n  0x0403: 'ca', 0x0468: 'ha', 0x0C6B: 'qu', 0x041E: 'th',\n  0x0C04: 'zh-HK', 0x040D: 'he', 0x0418: 'ro', 0x0451: 'bo',\n  0x1404: 'zh-MO', 0x0439: 'hi', 0x0417: 'rm', 0x041F: 'tr',\n  0x0804: 'zh', 0x040E: 'hu', 0x0419: 'ru', 0x0442: 'tk',\n  0x1004: 'zh-SG', 0x040F: 'is', 0x243B: 'smn', 0x0480: 'ug',\n  0x0404: 'zh-TW', 0x0470: 'ig', 0x103B: 'smj-NO', 0x0422: 'uk',\n  0x0483: 'co', 0x0421: 'id', 0x143B: 'smj', 0x042E: 'hsb',\n  0x041A: 'hr', 0x045D: 'iu', 0x0C3B: 'se-FI', 0x0420: 'ur',\n  0x101A: 'hr-BA', 0x085D: 'iu-Latn', 0x043B: 'se', 0x0843: 'uz-Cyrl',\n  0x0405: 'cs', 0x083C: 'ga', 0x083B: 'se-SE', 0x0443: 'uz',\n  0x0406: 'da', 0x0434: 'xh', 0x203B: 'sms', 0x042A: 'vi',\n  0x048C: 'prs', 0x0435: 'zu', 0x183B: 'sma-NO', 0x0452: 'cy',\n  0x0465: 'dv', 0x0410: 'it', 0x1C3B: 'sms', 0x0488: 'wo',\n  0x0813: 'nl-BE', 0x0810: 'it-CH', 0x044F: 'sa', 0x0485: 'sah',\n  0x0413: 'nl', 0x0411: 'ja', 0x1C1A: 'sr-Cyrl-BA', 0x0478: 'ii',\n  0x0C09: 'en-AU', 0x044B: 'kn', 0x0C1A: 'sr', 0x046A: 'yo',\n  0x2809: 'en-BZ', 0x043F: 'kk', 0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA', 0x0453: 'km', 0x081A: 'sr-Latn',\n  0x2409: 'en-029', 0x0486: 'quc', 0x046C: 'nso'\n}];\n\nvar NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID: r.uint16,\n  length: r.uint16,\n  string: new r.Pointer(r.uint16, new r.String('length', function (t) {\n    return getEncoding(t.platformID, t.encodingID, t.languageID);\n  }), { type: 'parent', relativeTo: 'parent.stringOffset', allowNull: false })\n});\n\nvar LangTagRecord = new r.Struct({\n  length: r.uint16,\n  tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), { type: 'parent', relativeTo: 'stringOffset' })\n});\n\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count'),\n    langTagCount: r.uint16,\n    langTags: new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\n\nvar NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved\n'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\n\nNameTable.process = function (stream) {\n  var records = {};\n  for (var _iterator = this.records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var record = _ref;\n\n    // find out what language this is for\n    var language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    var obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n\n  var records = [];\n  for (var key in this.records) {\n    var val = this.records[key];\n    if (key === 'fontFeatures') continue;\n\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth: r.int16, // average weighted advance width of lower case letters and space\n    usWeightClass: r.uint16, // visual weight of stroke in glyphs\n    usWidthClass: r.uint16, // relative change from the normal aspect ratio (width to height ratio)\n    fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights\n    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: r.int16, // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize: r.int16, // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset: r.int16, // recommended horizontal offset for subscripts\n    ySubscriptYOffset: r.int16, // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize: r.int16, // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize: r.int16, // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset: r.int16, // recommended horizontal offset for superscripts\n    ySuperscriptYOffset: r.int16, // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize: r.int16, // width of the strikeout stroke\n    yStrikeoutPosition: r.int16, // position of the strikeout stroke relative to the baseline\n    sFamilyClass: r.int16, // classification of font-family design\n    panose: new r.Array(r.uint8, 10), // describe the visual characteristics of a given typeface\n    ulCharRange: new r.Array(r.uint32, 4),\n    vendorID: new r.String(4), // four character identifier for the font vendor\n    fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font\n    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: r.uint16, // The minimum Unicode index in this font\n    usLastCharIndex: r.uint16 // The maximum Unicode index in this font\n  },\n\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n\n  1: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2)\n  },\n\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16\n  },\n\n  5: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16,\n\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\n\nvar versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\n// PostScript information\nvar post = new r.VersionedStruct(r.fixed32, {\n  header: { // these fields exist at the top of all versions\n    italicAngle: r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition: r.int16, // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16, // Suggested values for the underline thickness\n    isFixedPitch: r.uint32, // Whether the font is monospaced\n    minMemType42: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42: r.uint32, // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n\n  1: {}, // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names: new r.Array(new r.String(r.uint8))\n  },\n\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets: new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n\n  3: {}, // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, function (t) {\n      return t.parent.maxp.numGlyphs;\n    })\n  }\n});\n\n// An array of predefined values accessible by instructions\nvar cvt = new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nvar fpgm = new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n\nvar loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n  }\n};\n\nloca.preEncode = function () {\n  if (this.version != null) return;\n\n  // assume this.offsets is a sorted array\n  this.version = this.offsets[this.offsets.length - 1] > 0xffff ? 1 : 0;\n\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n  }\n};\n\n// Set of instructions executed whenever the point size or font transformation change\nvar prep = new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n\n// only used for encoding\nvar glyf = new r.Array(new r.Buffer());\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar CFFIndex = function () {\n  function CFFIndex(type) {\n    classCallCheck(this, CFFIndex);\n\n    this.type = type;\n  }\n\n  CFFIndex.prototype.getCFFVersion = function getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  };\n\n  CFFIndex.prototype.decode = function decode(stream, parent) {\n    var version = this.getCFFVersion(parent);\n    var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    var offSize = stream.readUInt8();\n    var offsetType = void 0;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset size in CFFIndex: \" + offSize + \" \" + stream.pos);\n    }\n\n    var ret = [];\n    var startPos = stream.pos + (count + 1) * offSize - 1;\n\n    var start = offsetType.decode(stream);\n    for (var i = 0; i < count; i++) {\n      var end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        var pos = stream.pos;\n        stream.pos = startPos + start;\n\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  };\n\n  CFFIndex.prototype.size = function size(arr, parent) {\n    var size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var offset = 1;\n    for (var i = 0; i < arr.length; i++) {\n      var item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n\n    return size;\n  };\n\n  CFFIndex.prototype.encode = function encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var sizes = [];\n    var offset = 1;\n    for (var _iterator = arr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var item = _ref;\n\n      var s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (var _iterator2 = sizes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var size = _ref2;\n\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var _item = _ref3;\n\n      type.encode(stream, _item, parent);\n    }\n\n    return;\n  };\n\n  return CFFIndex;\n}();\n\nvar FLOAT_EOF = 0xf;\nvar FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n\nvar FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nvar CFFOperand = function () {\n  function CFFOperand() {\n    classCallCheck(this, CFFOperand);\n  }\n\n  CFFOperand.decode = function decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      var str = '';\n      while (true) {\n        var b = stream.readUInt8();\n\n        var n1 = b >> 4;\n        if (n1 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n1];\n\n        var n2 = b & 15;\n        if (n2 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  };\n\n  CFFOperand.size = function size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) {\n      // floating point\n      var str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n    } else {\n      return 5;\n    }\n  };\n\n  CFFOperand.encode = function encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    var val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      // floating point\n      stream.writeUInt8(30);\n\n      var str = '' + val;\n      for (var i = 0; i < str.length; i += 2) {\n        var c1 = str[i];\n        var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          var c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8(FLOAT_EOF << 4);\n      }\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  };\n\n  return CFFOperand;\n}();\n\nvar CFFDict = function () {\n  function CFFDict() {\n    var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, CFFDict);\n\n    this.ops = ops;\n    this.fields = {};\n    for (var _iterator = ops, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var field = _ref;\n\n      var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  CFFDict.prototype.decodeOperands = function decodeOperands(type, stream, ret, operands) {\n    var _this = this;\n\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this.decodeOperands(type[i], stream, ret, [op]);\n      });\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  };\n\n  CFFDict.prototype.encodeOperands = function encodeOperands(type, stream, ctx, operands) {\n    var _this2 = this;\n\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this2.encodeOperands(type[i], stream, ctx, op)[0];\n      });\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  };\n\n  CFFDict.prototype.decode = function decode(stream, parent) {\n    var end = stream.pos + parent.length;\n    var ret = {};\n    var operands = [];\n\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent: { value: parent },\n      _startOffset: { value: stream.pos }\n    });\n\n    // fill in defaults\n    for (var key in this.fields) {\n      var field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      var b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = b << 8 | stream.readUInt8();\n        }\n\n        var _field = this.fields[b];\n        if (!_field) {\n          throw new Error('Unknown operator ' + b);\n        }\n\n        var val = this.decodeOperands(_field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof PropertyDescriptor) {\n            Object.defineProperty(ret, _field[1], val);\n          } else {\n            ret[_field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  };\n\n  CFFDict.prototype.size = function size(dict, parent) {\n    var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n\n    var len = 0;\n\n    for (var k in this.fields) {\n      var field = this.fields[k];\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], null, ctx, val);\n      for (var _iterator2 = operands, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var op = _ref2;\n\n        len += CFFOperand.size(op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  };\n\n  CFFDict.prototype.encode = function encode(stream, dict, parent) {\n    var ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (var _iterator3 = this.ops, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var field = _ref3;\n\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (var _iterator4 = operands, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref4 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref4 = _i4.value;\n        }\n\n        var op = _ref4;\n\n        CFFOperand.encode(stream, op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (var _iterator5 = key, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var _op = _ref5;\n\n        stream.writeUInt8(_op);\n      }\n    }\n\n    var i = 0;\n    while (i < ctx.pointers.length) {\n      var ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  };\n\n  return CFFDict;\n}();\n\nvar CFFPointer = function (_r$Pointer) {\n  inherits(CFFPointer, _r$Pointer);\n\n  function CFFPointer(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, CFFPointer);\n\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    return possibleConstructorReturn(this, _r$Pointer.call(this, null, type, options));\n  }\n\n  CFFPointer.prototype.decode = function decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: function decode() {\n        return operands[0];\n      }\n    };\n\n    return _r$Pointer.prototype.decode.call(this, stream, parent, operands);\n  };\n\n  CFFPointer.prototype.encode = function encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: function size() {\n          return 0;\n        }\n      };\n\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    var ptr = null;\n    this.offsetType = {\n      encode: function encode(stream, val) {\n        return ptr = val;\n      }\n    };\n\n    _r$Pointer.prototype.encode.call(this, stream, value, ctx);\n    return [new Ptr(ptr)];\n  };\n\n  return CFFPointer;\n}(r.Pointer);\n\nvar Ptr = function () {\n  function Ptr(val) {\n    classCallCheck(this, Ptr);\n\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  Ptr.prototype.valueOf = function valueOf() {\n    return this.val;\n  };\n\n  return Ptr;\n}();\n\nvar CFFBlendOp = function () {\n  function CFFBlendOp() {\n    classCallCheck(this, CFFBlendOp);\n  }\n\n  CFFBlendOp.decode = function decode(stream, parent, operands) {\n    var numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  };\n\n  return CFFBlendOp;\n}();\n\nvar CFFPrivateDict = new CFFDict([\n// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), { type: 'local' }), null]]);\n\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nvar standardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\n\nvar StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\n\nvar ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\n\nvar ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];\n\n//########################\n// Scripts and Languages #\n//########################\n\nvar LangSysTable = new r.Struct({\n  reserved: new r.Reserved(r.uint16),\n  reqFeatureIndex: r.uint16,\n  featureCount: r.uint16,\n  featureIndexes: new r.Array(r.uint16, 'featureCount')\n});\n\nvar LangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  langSys: new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })\n});\n\nvar Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count: r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\n\nvar ScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, Script, { type: 'parent' })\n});\n\nvar ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nvar Feature = new r.Struct({\n  featureParams: r.uint16, // pointer\n  lookupCount: r.uint16,\n  lookupListIndexes: new r.Array(r.uint16, 'lookupCount')\n});\n\nvar FeatureRecord = new r.Struct({\n  tag: new r.String(4),\n  feature: new r.Pointer(r.uint16, Feature, { type: 'parent' })\n});\n\nvar FeatureList = new r.Array(FeatureRecord, r.uint16);\n\nvar LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\n\nfunction LookupList(SubTable) {\n  var Lookup = new r.Struct({\n    lookupType: r.uint16,\n    flags: LookupFlags,\n    subTableCount: r.uint16,\n    subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new r.Optional(r.uint16, function (t) {\n      return t.flags.flags.useMarkFilteringSet;\n    })\n  });\n\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nvar RangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  startCoverageIndex: r.uint16\n});\n\nvar Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount: r.uint16,\n    glyphs: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nvar ClassRangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  class: r.uint16\n});\n\nvar ClassDef = new r.VersionedStruct(r.uint16, {\n  1: { // Class array\n    startGlyph: r.uint16,\n    glyphCount: r.uint16,\n    classValueArray: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: { // Class ranges\n    classRangeCount: r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nvar Device = new r.Struct({\n  a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16, // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nvar LookupRecord = new r.Struct({\n  sequenceIndex: r.uint16,\n  lookupListIndex: r.uint16\n});\n\nvar Rule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\n\nvar ClassRule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  classes: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\n\nvar Context = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    ruleSetCount: r.uint16,\n    ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: { // Class-based context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    classDef: new r.Pointer(r.uint16, ClassDef),\n    classSetCnt: r.uint16,\n    classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: r.uint16,\n    lookupCount: r.uint16,\n    coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nvar ChainRule = new r.Struct({\n  backtrackGlyphCount: r.uint16,\n  backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.inputGlyphCount - 1;\n  }),\n  lookaheadGlyphCount: r.uint16,\n  lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount: r.uint16,\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\n\nvar ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context glyph substitution\n    coverage: new r.Pointer(r.uint16, Coverage),\n    chainCount: r.uint16,\n    chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  2: { // Class-based chaining context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef: new r.Pointer(r.uint16, ClassDef),\n    inputClassDef: new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),\n    chainCount: r.uint16,\n    chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  3: { // Coverage-based chaining context\n    backtrackGlyphCount: r.uint16,\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount: r.uint16,\n    inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount: r.uint16,\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\nvar _;\n\n/*******************\n * Variation Store *\n *******************/\n\nvar F2DOT14 = new r.Fixed(16, 'BE', 14);\nvar RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\n\nvar VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\n\nvar DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, function (t) {\n    return t.parent.shortDeltaCount;\n  }),\n  regionDeltas: new r.Array(r.int8, function (t) {\n    return t.parent.regionIndexCount - t.parent.shortDeltaCount;\n  }),\n  deltas: function deltas(t) {\n    return t.shortDeltas.concat(t.regionDeltas);\n  }\n});\n\nvar ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\n\nvar ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nvar ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: (_ = {\n    axisIndex: r.uint16\n  }, _['axisIndex'] = r.uint16, _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)\n});\n\nvar ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\n\nvar FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, { type: 'parent' })\n});\n\nvar FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\n\nvar FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, { type: 'parent' }),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, { type: 'parent' })\n});\n\nvar FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\n\nvar PredefinedOp = function () {\n  function PredefinedOp(predefinedOps, type) {\n    classCallCheck(this, PredefinedOp);\n\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  PredefinedOp.prototype.decode = function decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  };\n\n  PredefinedOp.prototype.size = function size(value, ctx) {\n    return this.type.size(value, ctx);\n  };\n\n  PredefinedOp.prototype.encode = function encode(stream, value, ctx) {\n    var index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  };\n\n  return PredefinedOp;\n}();\n\nvar CFFEncodingVersion = function (_r$Number) {\n  inherits(CFFEncodingVersion, _r$Number);\n\n  function CFFEncodingVersion() {\n    classCallCheck(this, CFFEncodingVersion);\n    return possibleConstructorReturn(this, _r$Number.call(this, 'UInt8'));\n  }\n\n  CFFEncodingVersion.prototype.decode = function decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  };\n\n  return CFFEncodingVersion;\n}(r.Number);\n\nvar Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\n\nvar Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\n\nvar CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n\n    // TODO: supplement?\n  } });\n\nvar CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, { lazy: true }));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\n\nvar RangeArray = function (_r$Array) {\n  inherits(RangeArray, _r$Array);\n\n  function RangeArray() {\n    classCallCheck(this, RangeArray);\n    return possibleConstructorReturn(this, _r$Array.apply(this, arguments));\n  }\n\n  RangeArray.prototype.decode = function decode(stream, parent) {\n    var length = resolveLength(this.length, stream, parent);\n    var count = 0;\n    var res = [];\n    while (count < length) {\n      var range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  };\n\n  return RangeArray;\n}(r.Array);\n\nvar CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n\n  1: {\n    ranges: new RangeArray(Range1, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n\n  2: {\n    ranges: new RangeArray(Range2, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  }\n});\n\nvar CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, { lazy: true }));\n\nvar FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\n\nvar FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\n\nvar FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, function (t) {\n      return t.parent.CharStrings.length;\n    })\n  },\n\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\n\nvar ptr = new CFFPointer(CFFPrivateDict);\n\nvar CFFPrivateOp = function () {\n  function CFFPrivateOp() {\n    classCallCheck(this, CFFPrivateOp);\n  }\n\n  CFFPrivateOp.prototype.decode = function decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  };\n\n  CFFPrivateOp.prototype.size = function size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  };\n\n  CFFPrivateOp.prototype.encode = function encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  };\n\n  return CFFPrivateOp;\n}();\n\nvar FontDict = new CFFDict([\n// key       name                   type(s)                                 default\n[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null]]);\n\nvar CFFTopDict = new CFFDict([\n// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],\n\n// CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\n\nvar VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n});\n\nvar CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);\n\nvar CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize: r.uint8,\n    offSize: r.uint8,\n    nameIndex: new CFFIndex(new r.String('length')),\n    topDictIndex: new CFFIndex(CFFTopDict),\n    stringIndex: new CFFIndex(new r.String('length')),\n    globalSubrIndex: new CFFIndex()\n  },\n\n  2: {\n    hdrSize: r.uint8,\n    length: r.uint16,\n    topDict: CFF2TopDict,\n    globalSubrIndex: new CFFIndex()\n  }\n});\n\nvar CFFFont = function () {\n  function CFFFont(stream) {\n    classCallCheck(this, CFFFont);\n\n    this.stream = stream;\n    this.decode();\n  }\n\n  CFFFont.decode = function decode(stream) {\n    return new CFFFont(stream);\n  };\n\n  CFFFont.prototype.decode = function decode() {\n    var start = this.stream.pos;\n    var top = CFFTop.decode(this.stream);\n    for (var key in top) {\n      var val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  };\n\n  CFFFont.prototype.string = function string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  };\n\n  CFFFont.prototype.getCharString = function getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  };\n\n  CFFFont.prototype.getGlyphName = function getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    var charset = this.topDict.charset;\n\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (var i = 0; i < charset.ranges.length; i++) {\n          var range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n\n    return null;\n  };\n\n  CFFFont.prototype.fdForGlyph = function fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        var ranges = this.topDict.FDSelect.ranges;\n\n        var low = 0;\n        var high = ranges.length - 1;\n\n        while (low <= high) {\n          var mid = low + high >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid > ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);\n    }\n  };\n\n  CFFFont.prototype.privateDictForGlyph = function privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      var fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  };\n\n  createClass(CFFFont, [{\n    key: 'postscriptName',\n    get: function get$$1() {\n      if (this.version < 2) {\n        return this.nameIndex[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'fullName',\n    get: function get$$1() {\n      return this.string(this.topDict.FullName);\n    }\n  }, {\n    key: 'familyName',\n    get: function get$$1() {\n      return this.string(this.topDict.FamilyName);\n    }\n  }]);\n  return CFFFont;\n}();\n\nvar VerticalOrigin = new r.Struct({\n  glyphIndex: r.uint16,\n  vertOriginY: r.int16\n});\n\nvar VORG = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  defaultVertOriginY: r.int16,\n  numVertOriginYMetrics: r.uint16,\n  metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n\nvar BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\n\nvar SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\n\nvar EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nvar ByteAligned = function ByteAligned() {\n  classCallCheck(this, ByteAligned);\n};\n\nvar BitAligned = function BitAligned() {\n  classCallCheck(this, BitAligned);\n};\n\nvar glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\nvar SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\n\nvar CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\n\nvar IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n\n  1: {\n    offsetArray: new r.Array(r.uint32, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n\n  3: {\n    offsetArray: new r.Array(r.uint16, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, function (t) {\n      return t.numGlyphs + 1;\n    })\n  },\n\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\n\nvar IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\n\nvar BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\n\nvar EBLC = new r.Struct({\n  version: r.uint32, // 0x00020000\n  numSizes: r.uint32,\n  sizes: new r.Array(BitmapSizeTable, 'numSizes')\n});\n\nvar ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {\n    return t.parent.parent.maxp.numGlyphs + 1;\n  })\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nvar sbix = new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n\nvar LayerRecord = new r.Struct({\n  gid: r.uint16, // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\n\nvar BaseGlyphRecord = new r.Struct({\n  gid: r.uint16, // Glyph ID of reference glyph. This glyph is for reference only\n  // and is not rendered for color.\n  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\n\nvar COLR = new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),\n  numLayerRecords: r.uint16\n});\n\nvar ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\n\nvar CPAL = new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n\nvar BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16 // X or Y value, in design units\n  },\n\n  2: { // Design units plus contour point\n    coordinate: r.int16, // X or Y value, in design units\n    referenceGlyph: r.uint16, // GlyphID of control glyph\n    baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph\n  },\n\n  3: { // Design units plus Device table\n    coordinate: r.int16, // X or Y value, in design units\n    deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value\n  }\n});\n\nvar BaseValues = new r.Struct({\n  defaultIndex: r.uint16, // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\n\nvar FeatMinMaxRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }), // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }) // May be NULL\n});\n\nvar MinMax = new r.Struct({\n  minCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL\n  featMinMaxCount: r.uint16, // May be 0\n  featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\n\nvar BaseLangSysRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, { type: 'parent' })\n});\n\nvar BaseScript = new r.Struct({\n  baseValues: new r.Pointer(r.uint16, BaseValues), // May be NULL\n  defaultMinMax: new r.Pointer(r.uint16, MinMax), // May be NULL\n  baseLangSysCount: r.uint16, // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\n\nvar BaseScriptRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte script identification tag\n  script: new r.Pointer(r.uint16, BaseScript, { type: 'parent' })\n});\n\nvar BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nvar BaseTagList = new r.Array(new r.String(4), r.uint16);\n\nvar Axis = new r.Struct({\n  baseTagList: new r.Pointer(r.uint16, BaseTagList), // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\n\nvar BASE = new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis: new r.Pointer(r.uint16, Axis), // May be NULL\n    vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar AttachPoint = new r.Array(r.uint16, r.uint16);\nvar AttachList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  glyphCount: r.uint16,\n  attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\n\nvar CaretValue = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16\n  },\n\n  2: { // Contour point\n    caretValuePoint: r.uint16\n  },\n\n  3: { // Design units plus Device table\n    coordinate: r.int16,\n    deviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\n\nvar LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\n\nvar LigCaretList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount: r.uint16,\n  ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\n\nvar MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount: r.uint16,\n  coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\n\nvar GDEF = new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef: new r.Pointer(r.uint16, ClassDef),\n    attachList: new r.Pointer(r.uint16, AttachList),\n    ligCaretList: new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\n\nvar types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance: r.int16,\n  yAdvance: r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' })\n};\n\nvar ValueRecord = function () {\n  function ValueRecord() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';\n    classCallCheck(this, ValueRecord);\n\n    this.key = key;\n  }\n\n  ValueRecord.prototype.buildStruct = function buildStruct(parent) {\n    var struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n\n    var fields = {};\n    fields.rel = function () {\n      return struct._startOffset;\n    };\n\n    var format = struct[this.key];\n    for (var key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  };\n\n  ValueRecord.prototype.size = function size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  };\n\n  ValueRecord.prototype.decode = function decode(stream, parent) {\n    var res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  };\n\n  return ValueRecord;\n}();\n\nvar PairValueRecord = new r.Struct({\n  secondGlyph: r.uint16,\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nvar PairSet = new r.Array(PairValueRecord, r.uint16);\n\nvar Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nvar Anchor = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    xCoordinate: r.int16,\n    yCoordinate: r.int16\n  },\n\n  2: { // Design units plus contour point\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    anchorPoint: r.uint16\n  },\n\n  3: { // Design units plus Device tables\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    xDeviceTable: new r.Pointer(r.uint16, Device),\n    yDeviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\n\nvar EntryExitRecord = new r.Struct({\n  entryAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' }),\n  exitAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })\n});\n\nvar MarkRecord = new r.Struct({\n  class: r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })\n});\n\nvar MarkArray = new r.Array(MarkRecord, r.uint16);\n\nvar BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.classCount;\n});\nvar BaseArray = new r.Array(BaseRecord, r.uint16);\n\nvar ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.parent.classCount;\n});\nvar LigatureAttach = new r.Array(ComponentRecord, r.uint16);\nvar LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\n\nvar GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Adjustment\n    1: { // Single positioning value\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      value: new ValueRecord()\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      valueCount: r.uint16,\n      values: new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n\n  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning\n    1: { // Adjustments for glyph pairs\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      pairSetCount: r.uint16,\n      pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n\n    2: { // Class pair adjustment\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      classDef1: new r.Pointer(r.uint16, ClassDef),\n      classDef2: new r.Pointer(r.uint16, ClassDef),\n      class1Count: r.uint16,\n      class2Count: r.uint16,\n      classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n\n  3: { // Cursive Attachment Positioning\n    format: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    entryExitCount: r.uint16,\n    entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n\n  4: { // MarkToBase Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    baseCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    baseArray: new r.Pointer(r.uint16, BaseArray)\n  },\n\n  5: { // MarkToLigature Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    ligatureArray: new r.Pointer(r.uint16, LigatureArray)\n  },\n\n  6: { // MarkToMark Attachment Positioning\n    format: r.uint16,\n    mark1Coverage: new r.Pointer(r.uint16, Coverage),\n    mark2Coverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    mark1Array: new r.Pointer(r.uint16, MarkArray),\n    mark2Array: new r.Pointer(r.uint16, BaseArray)\n  },\n\n  7: Context, // Contextual positioning\n  8: ChainingContext, // Chaining contextual positioning\n\n  9: { // Extension Positioning\n    posFormat: r.uint16,\n    lookupType: r.uint16, // cannot also be 9\n    extension: new r.Pointer(r.uint32, undefined)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\n\nvar GPOS = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\nvar Sequence = new r.Array(r.uint16, r.uint16);\nvar AlternateSet = Sequence;\n\nvar Ligature = new r.Struct({\n  glyph: r.uint16,\n  compCount: r.uint16,\n  components: new r.Array(r.uint16, function (t) {\n    return t.compCount - 1;\n  })\n});\n\nvar LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\n\nvar GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Substitution\n    1: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID: r.int16\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      glyphCount: r.uint16,\n      substitute: new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n\n  2: { // Multiple Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n\n  3: { // Alternate Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n\n  4: { // Ligature Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n\n  5: Context, // Contextual Substitution\n  6: ChainingContext, // Chaining Contextual Substitution\n\n  7: { // Extension Substitution\n    substFormat: r.uint16,\n    lookupType: r.uint16, // cannot also be 7\n    extension: new r.Pointer(r.uint32, undefined)\n  },\n\n  8: { // Reverse Chaining Contextual Single Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount: r.uint16,\n    substitutes: new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\n\nvar GSUB = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\nvar JstfGSUBModList = new r.Array(r.uint16, r.uint16);\n\nvar JstfPriority = new r.Struct({\n  shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\n\nvar JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\n\nvar JstfLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\n\nvar JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount: r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\n\nvar JstfScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, { type: 'parent' })\n});\n\nvar JSTF = new r.Struct({\n  version: r.uint32, // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList: new r.Array(JstfScriptRecord, 'scriptCount')\n});\n\n// TODO: add this to restructure\n\nvar VariableSizeNumber = function () {\n  function VariableSizeNumber(size) {\n    classCallCheck(this, VariableSizeNumber);\n\n    this._size = size;\n  }\n\n  VariableSizeNumber.prototype.decode = function decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n      case 2:\n        return stream.readUInt16BE();\n      case 3:\n        return stream.readUInt24BE();\n      case 4:\n        return stream.readUInt32BE();\n    }\n  };\n\n  VariableSizeNumber.prototype.size = function size(val, parent) {\n    return resolveLength(this._size, null, parent);\n  };\n\n  return VariableSizeNumber;\n}();\n\nvar MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(function (t) {\n    return ((t.parent.entryFormat & 0x0030) >> 4) + 1;\n  }),\n  outerIndex: function outerIndex(t) {\n    return t.entry >> (t.parent.entryFormat & 0x000F) + 1;\n  },\n  innerIndex: function innerIndex(t) {\n    return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;\n  }\n});\n\nvar DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\n\nvar HVAR = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n\nvar Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\n\nvar SignatureBlock = new r.Struct({\n  reserved: new r.Reserved(r.uint16, 2),\n  cbSignature: r.uint32, // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature: new r.Buffer('cbSignature')\n});\n\nvar DSIG = new r.Struct({\n  ulVersion: r.uint32, // Version number of the DSIG table (0x00000001)\n  usNumSigs: r.uint16, // Number of signatures in the table\n  usFlag: r.uint16, // Permission flags\n  signatures: new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n\nvar GaspRange = new r.Struct({\n  rangeMaxPPEM: r.uint16, // Upper limit of range, in ppem\n  rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior\n  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\n\nvar gasp = new r.Struct({\n  version: r.uint16, // set to 0\n  numRanges: r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\n\nvar DeviceRecord = new r.Struct({\n  pixelSize: r.uint8,\n  maximumWidth: r.uint8,\n  widths: new r.Array(r.uint8, function (t) {\n    return t.parent.parent.maxp.numGlyphs;\n  })\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nvar hdmx = new r.Struct({\n  version: r.uint16,\n  numRecords: r.int16,\n  sizeDeviceRecord: r.int32,\n  records: new r.Array(DeviceRecord, 'numRecords')\n});\n\nvar KernPair = new r.Struct({\n  left: r.uint16,\n  right: r.uint16,\n  value: r.int16\n});\n\nvar ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: function max(t) {\n    return t.offsets.length && Math.max.apply(Math, t.offsets);\n  }\n});\n\nvar Kern2Array = new r.Struct({\n  off: function off(t) {\n    return t._startOffset - t.parent.parent._startOffset;\n  },\n  len: function len(t) {\n    return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);\n  },\n  values: new r.LazyArray(r.int16, 'len')\n});\n\nvar KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    pairs: new r.Array(KernPair, 'nPairs')\n  },\n\n  2: {\n    rowWidth: r.uint16,\n    leftTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n    rightTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n    array: new r.Pointer(r.uint16, Kern2Array, { type: 'parent' })\n  },\n\n  3: {\n    glyphCount: r.uint16,\n    kernValueCount: r.uint8,\n    leftClassCount: r.uint8,\n    rightClassCount: r.uint8,\n    flags: r.uint8,\n    kernValue: new r.Array(r.int16, 'kernValueCount'),\n    leftClass: new r.Array(r.uint8, 'glyphCount'),\n    rightClass: new r.Array(r.uint8, 'glyphCount'),\n    kernIndex: new r.Array(r.uint8, function (t) {\n      return t.leftClassCount * t.rightClassCount;\n    })\n  }\n});\n\nvar KernTable = new r.VersionedStruct('version', {\n  0: { // Microsoft uses this format\n    subVersion: r.uint16, // Microsoft has an extra sub-table version number\n    length: r.uint16, // Length of the subtable, in bytes\n    format: r.uint8, // Format of subtable\n    coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical\n    'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n    'crossStream', // If set to 1, kerning is perpendicular to the flow of the text\n    'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  },\n  1: { // Apple uses this format\n    length: r.uint32,\n    coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values\n    'crossStream', // Set if table has cross-stream kerning values\n    'vertical' // Set if table has vertical kerning values\n    ]),\n    format: r.uint8,\n    tupleIndex: r.uint16,\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  }\n});\n\nvar kern = new r.VersionedStruct(r.uint16, {\n  0: { // Microsoft Version\n    nTables: r.uint16,\n    tables: new r.Array(KernTable, 'nTables')\n  },\n\n  1: { // Apple Version\n    reserved: new r.Reserved(r.uint16), // the other half of the version number\n    nTables: r.uint32,\n    tables: new r.Array(KernTable, 'nTables')\n  }\n});\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nvar LTSH = new r.Struct({\n  version: r.uint16,\n  numGlyphs: r.uint16,\n  yPels: new r.Array(r.uint8, 'numGlyphs')\n});\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nvar PCLT = new r.Struct({\n  version: r.uint16,\n  fontNumber: r.uint32,\n  pitch: r.uint16,\n  xHeight: r.uint16,\n  style: r.uint16,\n  typeFamily: r.uint16,\n  capHeight: r.uint16,\n  symbolSet: r.uint16,\n  typeface: new r.String(16),\n  characterComplement: new r.String(8),\n  fileName: new r.String(6),\n  strokeWeight: new r.String(1),\n  widthType: new r.String(1),\n  serifStyle: r.uint8,\n  reserved: new r.Reserved(r.uint8)\n});\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nvar Ratio = new r.Struct({\n  bCharSet: r.uint8, // Character set\n  xRatio: r.uint8, // Value to use for x-Ratio\n  yStartRatio: r.uint8, // Starting y-Ratio value\n  yEndRatio: r.uint8 // Ending y-Ratio value\n});\n\nvar vTable = new r.Struct({\n  yPelHeight: r.uint16, // yPelHeight to which values apply\n  yMax: r.int16, // Maximum value (in pels) for this yPelHeight\n  yMin: r.int16 // Minimum value (in pels) for this yPelHeight\n});\n\nvar VdmxGroup = new r.Struct({\n  recs: r.uint16, // Number of height records in this group\n  startsz: r.uint8, // Starting yPelHeight\n  endsz: r.uint8, // Ending yPelHeight\n  entries: new r.Array(vTable, 'recs') // The VDMX records\n});\n\nvar VDMX = new r.Struct({\n  version: r.uint16, // Version number (0 or 1)\n  numRecs: r.uint16, // Number of VDMX groups present\n  numRatios: r.uint16, // Number of aspect ratio groupings\n  ratioRanges: new r.Array(Ratio, 'numRatios'), // Ratio ranges\n  offsets: new r.Array(r.uint16, 'numRatios'), // Offset to the VDMX group for this ratio range\n  groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings\n});\n\n// Vertical Header Table\nvar vhea = new r.Struct({\n  version: r.uint16, // Version number of the Vertical Header Table\n  ascent: r.int16, // The vertical typographic ascender for this font\n  descent: r.int16, // The vertical typographic descender for this font\n  lineGap: r.int16, // The vertical typographic line gap for this font\n  advanceHeightMax: r.int16, // The maximum advance height measurement found in the font\n  minTopSideBearing: r.int16, // The minimum top side bearing measurement found in the font\n  minBottomSideBearing: r.int16, // The minimum bottom side bearing measurement found in the font\n  yMaxExtent: r.int16,\n  caretSlopeRise: r.int16, // Caret slope (rise/run)\n  caretSlopeRun: r.int16,\n  caretOffset: r.int16, // Set value equal to 0 for nonslanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16, // Set to 0\n  numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table\n});\n\nvar VmtxEntry = new r.Struct({\n  advance: r.uint16, // The advance height of the glyph\n  bearing: r.int16 // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nvar vmtx = new r.Struct({\n  metrics: new r.LazyArray(VmtxEntry, function (t) {\n    return t.parent.vhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;\n  })\n});\n\nvar shortFrac = new r.Fixed(16, 'BE', 14);\n\nvar Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\n\nvar Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\n\nvar avar = new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n\nvar UnboundedArrayAccessor = function () {\n  function UnboundedArrayAccessor(type, stream, parent) {\n    classCallCheck(this, UnboundedArrayAccessor);\n\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  UnboundedArrayAccessor.prototype.getItem = function getItem(index) {\n    if (this._items[index] == null) {\n      var pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  };\n\n  UnboundedArrayAccessor.prototype.inspect = function inspect() {\n    return '[UnboundedArray ' + this.type.constructor.name + ']';\n  };\n\n  return UnboundedArrayAccessor;\n}();\n\nvar UnboundedArray = function (_r$Array) {\n  inherits(UnboundedArray, _r$Array);\n\n  function UnboundedArray(type) {\n    classCallCheck(this, UnboundedArray);\n    return possibleConstructorReturn(this, _r$Array.call(this, type, 0));\n  }\n\n  UnboundedArray.prototype.decode = function decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  };\n\n  return UnboundedArray;\n}(r.Array);\n\nvar LookupTable = function LookupTable() {\n  var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16;\n\n  // Helper class that makes internal structures invisible to pointers\n  var Shadow = function () {\n    function Shadow(type) {\n      classCallCheck(this, Shadow);\n\n      this.type = type;\n    }\n\n    Shadow.prototype.decode = function decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    };\n\n    Shadow.prototype.size = function size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    };\n\n    Shadow.prototype.encode = function encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    };\n\n    return Shadow;\n  }();\n\n  ValueType = new Shadow(ValueType);\n\n  var BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n\n  var LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n\n  var LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {\n      return t.lastGlyph - t.firstGlyph + 1;\n    }), { type: 'parent' })\n  });\n\n  var LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\n\nfunction StateTable() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n\n  var entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {\n    return t.nClasses;\n  }));\n\n  var StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nfunction StateTable1() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n\n  var ClassLookupTable = new r.Struct({\n    version: function version() {\n      return 8;\n    },\n    // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n\n  var entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: function newState(t) {\n      return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;\n    },\n    flags: r.uint16\n  }, entryData);\n\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {\n    return t.nClasses;\n  }));\n\n  var StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n\n  return StateHeader1;\n}\n\nvar BslnSubtable = new r.VersionedStruct('format', {\n  0: { // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n\n  1: { // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n\n  2: { // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n\n  3: { // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\n\nvar bsln = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n\nvar Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\n\nvar FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),\n  featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\n\nvar feat = new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n\nvar Axis$1 = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  }\n});\n\nvar Instance = new r.Struct({\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  },\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, function (t) {\n    return t.parent.axisCount;\n  }),\n  postscriptNameID: new r.Optional(r.uint16, function (t) {\n    return t.parent.instanceSize - t._currentOffset > 0;\n  })\n});\n\nvar fvar = new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis$1, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n\nvar shortFrac$1 = new r.Fixed(16, 'BE', 14);\n\nvar Offset = function () {\n  function Offset() {\n    classCallCheck(this, Offset);\n  }\n\n  Offset.decode = function decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  };\n\n  return Offset;\n}();\n\nvar gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: 'offsetToData', allowNull: false }), function (t) {\n    return t.glyphCount + 1;\n  })\n});\n\nvar ClassTable$1 = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1()\n});\n\nvar WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\n\nvar WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\n\nvar ActionData = new r.VersionedStruct('actionType', {\n  0: { // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n\n  1: { // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n\n  2: { // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n\n  3: {}, // Stretch glyph action (no data, not supported by CoreText)\n\n  4: { // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n\n  5: { // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\n\nvar Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.actionLength - t._currentOffset;\n  })\n});\n\nvar PostcompensationAction = new r.Array(Action, r.uint32);\nvar PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\n\nvar JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable$1, { type: 'parent' }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: 'wdcOffset' }))\n});\n\nvar just = new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n\nvar LigatureData = {\n  action: r.uint16\n};\n\nvar ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\n\nvar InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\n\nvar SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))\n});\n\nvar SubtableData = new r.VersionedStruct('type', {\n  0: { // Indic Rearrangement Subtable\n    stateTable: new StateTable()\n  },\n\n  1: { // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n\n  2: { // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n\n  4: { // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable()\n  },\n\n  5: { // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\n\nvar Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.length - t._currentOffset;\n  })\n});\n\nvar FeatureEntry = new r.Struct({\n  featureType: r.uint16,\n  featureSetting: r.uint16,\n  enableFlags: r.uint32,\n  disableFlags: r.uint32\n});\n\nvar MorxChain = new r.Struct({\n  defaultFlags: r.uint32,\n  chainLength: r.uint32,\n  nFeatureEntries: r.uint32,\n  nSubtables: r.uint32,\n  features: new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables: new r.Array(Subtable, 'nSubtables')\n});\n\nvar morx = new r.Struct({\n  version: r.uint16,\n  unused: new r.Reserved(r.uint16),\n  nChains: r.uint32,\n  chains: new r.Array(MorxChain, 'nChains')\n});\n\nvar OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\n\nvar opbd = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n\nvar tables = {};\n// Required Tables\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = NameTable;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n// TrueType Outlines\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n// PostScript Outlines\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n// Bitmap Glyphs\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n// Advanced OpenType Tables\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n// Apple Advanced Typography Tables\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n\nvar TableEntry = new r.Struct({\n  tag: new r.String(4),\n  checkSum: r.uint32,\n  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  length: r.uint32\n});\n\nvar Directory = new r.Struct({\n  tag: new r.String(4),\n  numTables: r.uint16,\n  searchRange: r.uint16,\n  entrySelector: r.uint16,\n  rangeShift: r.uint16,\n  tables: new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function () {\n  var tables$$1 = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var table = _ref;\n\n    tables$$1[table.tag] = table;\n  }\n\n  this.tables = tables$$1;\n};\n\nDirectory.preEncode = function (stream) {\n  var tables$$1 = [];\n  for (var tag in this.tables) {\n    var table = this.tables[tag];\n    if (table) {\n      tables$$1.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new r.VoidPointer(tables[tag], table),\n        length: tables[tag].size(table)\n      });\n    }\n  }\n\n  this.tag = 'true';\n  this.numTables = tables$$1.length;\n  this.tables = tables$$1;\n\n  this.searchRange = Math.floor(Math.log(this.numTables) / Math.LN2) * 16;\n  this.entrySelector = Math.floor(this.searchRange / Math.LN2);\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nfunction binarySearch(arr, cmp) {\n  var min = 0;\n  var max = arr.length - 1;\n  while (min <= max) {\n    var mid = min + max >> 1;\n    var res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\n\nfunction range(index, end) {\n  var range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\n\nvar _class$1;\n\nfunction _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n// iconv-lite is an optional dependency.\ntry {\n  var iconv = require('iconv-lite');\n} catch (err) {}\n\nvar CmapProcessor = (_class$1 = function () {\n  function CmapProcessor(cmapTable) {\n    classCallCheck(this, CmapProcessor);\n\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n    // 32-bit subtables\n    [3, 10], [0, 6], [0, 4],\n\n    // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);\n\n    // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n    if (!this.cmap && iconv) {\n      for (var _iterator = cmapTable.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var cmap = _ref;\n\n        var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        if (iconv.encodingExists(encoding)) {\n          this.cmap = cmap.table;\n          this.encoding = encoding;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  CmapProcessor.prototype.findSubtable = function findSubtable(cmapTable, pairs) {\n    for (var _iterator2 = pairs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var _ref3 = _ref2,\n          platformID = _ref3[0],\n          encodingID = _ref3[1];\n\n      for (var _iterator3 = cmapTable.tables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref4 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref4 = _i3.value;\n        }\n\n        var cmap = _ref4;\n\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  CmapProcessor.prototype.lookup = function lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      var buf = iconv.encode(String.fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n      for (var i = 0; i < buf.length; i++) {\n        codepoint = codepoint << 8 | buf[i];\n      }\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      var gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4:\n        {\n          var min = 0;\n          var max = cmap.segCount - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n\n            if (codepoint < cmap.startCode.get(mid)) {\n              max = mid - 1;\n            } else if (codepoint > cmap.endCode.get(mid)) {\n              min = mid + 1;\n            } else {\n              var rangeOffset = cmap.idRangeOffset.get(mid);\n              var _gid = void 0;\n\n              if (rangeOffset === 0) {\n                _gid = codepoint + cmap.idDelta.get(mid);\n              } else {\n                var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                _gid = cmap.glyphIndexArray.get(index) || 0;\n                if (_gid !== 0) {\n                  _gid += cmap.idDelta.get(mid);\n                }\n              }\n\n              return _gid & 0xffff;\n            }\n          }\n\n          return 0;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13:\n        {\n          var _min = 0;\n          var _max = cmap.nGroups - 1;\n          while (_min <= _max) {\n            var _mid = _min + _max >> 1;\n            var group = cmap.groups.get(_mid);\n\n            if (codepoint < group.startCharCode) {\n              _max = _mid - 1;\n            } else if (codepoint > group.endCharCode) {\n              _min = _mid + 1;\n            } else {\n              if (cmap.version === 12) {\n                return group.glyphID + (codepoint - group.startCharCode);\n              } else {\n                return group.glyphID;\n              }\n            }\n          }\n\n          return 0;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  CmapProcessor.prototype.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    var selectors = this.uvs.varSelectors.toArray();\n    var i = binarySearch(selectors, function (x) {\n      return variationSelector - x.varSelector;\n    });\n    var sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, function (x) {\n        return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;\n      });\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, function (x) {\n        return codepoint - x.unicodeValue;\n      });\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  };\n\n  CmapProcessor.prototype.getCharacterSet = function getCharacterSet() {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4:\n        {\n          var res = [];\n          var endCodes = cmap.endCode.toArray();\n          for (var i = 0; i < endCodes.length; i++) {\n            var tail = endCodes[i] + 1;\n            var start = cmap.startCode.get(i);\n            res.push.apply(res, range(start, tail));\n          }\n\n          return res;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13:\n        {\n          var _res = [];\n          for (var _iterator4 = cmap.groups.toArray(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n            var _ref5;\n\n            if (_isArray4) {\n              if (_i4 >= _iterator4.length) break;\n              _ref5 = _iterator4[_i4++];\n            } else {\n              _i4 = _iterator4.next();\n              if (_i4.done) break;\n              _ref5 = _i4.value;\n            }\n\n            var group = _ref5;\n\n            _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));\n          }\n\n          return _res;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  CmapProcessor.prototype.codePointsForGlyph = function codePointsForGlyph(gid) {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        {\n          var res = [];\n          for (var i = 0; i < 256; i++) {\n            if (cmap.codeMap.get(i) === gid) {\n              res.push(i);\n            }\n          }\n\n          return res;\n        }\n\n      case 4:\n        {\n          var _res2 = [];\n          for (var _i5 = 0; _i5 < cmap.segCount; _i5++) {\n            var end = cmap.endCode.get(_i5);\n            var start = cmap.startCode.get(_i5);\n            var rangeOffset = cmap.idRangeOffset.get(_i5);\n            var delta = cmap.idDelta.get(_i5);\n\n            for (var c = start; c <= end; c++) {\n              var g = 0;\n              if (rangeOffset === 0) {\n                g = c + delta;\n              } else {\n                var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i5);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) {\n                  g += delta;\n                }\n              }\n\n              if (g === gid) {\n                _res2.push(c);\n              }\n            }\n          }\n\n          return _res2;\n        }\n\n      case 12:\n        {\n          var _res3 = [];\n          for (var _iterator5 = cmap.groups.toArray(), _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n            var _ref6;\n\n            if (_isArray5) {\n              if (_i6 >= _iterator5.length) break;\n              _ref6 = _iterator5[_i6++];\n            } else {\n              _i6 = _iterator5.next();\n              if (_i6.done) break;\n              _ref6 = _i6.value;\n            }\n\n            var group = _ref6;\n\n            if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n              _res3.push(group.startCharCode + (gid - group.glyphID));\n            }\n          }\n\n          return _res3;\n        }\n\n      case 13:\n        {\n          var _res4 = [];\n          for (var _iterator6 = cmap.groups.toArray(), _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n            var _ref7;\n\n            if (_isArray6) {\n              if (_i7 >= _iterator6.length) break;\n              _ref7 = _iterator6[_i7++];\n            } else {\n              _i7 = _iterator6.next();\n              if (_i7.done) break;\n              _ref7 = _i7.value;\n            }\n\n            var _group = _ref7;\n\n            if (gid === _group.glyphID) {\n              _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));\n            }\n          }\n\n          return _res4;\n        }\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  return CmapProcessor;\n}(), _applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype), _class$1);\n\nvar KernProcessor = function () {\n  function KernProcessor(font) {\n    classCallCheck(this, KernProcessor);\n\n    this.kern = font.kern;\n  }\n\n  KernProcessor.prototype.process = function process(glyphs, positions) {\n    for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      var left = glyphs[glyphIndex].id;\n      var right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  };\n\n  KernProcessor.prototype.getKerning = function getKerning(left, right) {\n    var res = 0;\n\n    for (var _iterator = this.kern.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var table = _ref;\n\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n        default:\n          throw new Error('Unsupported kerning table version ' + table.version);\n      }\n\n      var val = 0;\n      var s = table.subtable;\n      switch (table.format) {\n        case 0:\n          var pairIdx = binarySearch(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          var leftOffset = 0,\n              rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          var index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error('Unsupported kerning sub-table format ' + table.format);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  };\n\n  return KernProcessor;\n}();\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\n\nvar UnicodeLayoutEngine = function () {\n  function UnicodeLayoutEngine(font) {\n    classCallCheck(this, UnicodeLayoutEngine);\n\n    this.font = font;\n  }\n\n  UnicodeLayoutEngine.prototype.positionGlyphs = function positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    var clusterStart = 0;\n    var clusterEnd = 0;\n    for (var index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.isMark) {\n        // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  };\n\n  UnicodeLayoutEngine.prototype.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    var base = glyphs[clusterStart];\n    var baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    }\n\n    var xOffset = -positions[clusterStart].xAdvance;\n    var yOffset = 0;\n    var yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (var index = clusterStart + 1; index <= clusterEnd; index++) {\n      var mark = glyphs[index];\n      var markBox = mark.cbox;\n      var position = positions[index];\n\n      var combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default:\n            // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  };\n\n  UnicodeLayoutEngine.prototype.getCombiningClass = function getCombiningClass(codePoint) {\n    var combiningClass = unicode.getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) {\n        // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22':\n        // meteg\n        return 'Below';\n\n      case 'CCC23':\n        // rafe\n        return 'Attached_Above';\n\n      case 'CCC24':\n        // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n      case 'CCC19':\n        // holam\n        return 'Above_Left';\n\n      case 'CCC26':\n        // point varika\n        return 'Above';\n\n      case 'CCC21':\n        // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36':\n        // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n      case 'CCC32':\n        // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103':\n        // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107':\n        // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118':\n        // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122':\n        // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132':\n        // sign u\n        return 'Below';\n\n      case 'CCC130':\n        // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  };\n\n  return UnicodeLayoutEngine;\n}();\n\n/**\n * Represents a glyph bounding box\n */\nvar BBox = function () {\n  function BBox() {\n    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;\n    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;\n    classCallCheck(this, BBox);\n\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n\n\n  BBox.prototype.addPoint = function addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  };\n\n  BBox.prototype.copy = function copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  };\n\n  createClass(BBox, [{\n    key: \"width\",\n    get: function get$$1() {\n      return this.maxX - this.minX;\n    }\n\n    /**\n     * The height of the bounding box\n     * @type {number}\n     */\n\n  }, {\n    key: \"height\",\n    get: function get$$1() {\n      return this.maxY - this.minY;\n    }\n  }]);\n  return BBox;\n}();\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nvar UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\n\nvar OPENTYPE_SCRIPTS = {};\nfor (var script in UNICODE_SCRIPTS) {\n  var tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (var _iterator = tag, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var t = _ref;\n\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\n\n\n\nfunction fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\n\nfunction forString(string) {\n  var len = string.length;\n  var idx = 0;\n  while (idx < len) {\n    var code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      var next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    var _script = unicode.getScript(code);\n    if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n\n\n// The scripts in this map are written from right to left\nvar RTL = {\n  arab: true, // Arabic\n  hebr: true, // Hebrew\n  syrc: true, // Syriac\n  thaa: true, // Thaana\n  cprt: true, // Cypriot Syllabary\n  khar: true, // Kharosthi\n  phnx: true, // Phoenician\n  'nko ': true, // N'Ko\n  lydi: true, // Lydian\n  avst: true, // Avestan\n  armi: true, // Imperial Aramaic\n  phli: true, // Inscriptional Pahlavi\n  prti: true, // Inscriptional Parthian\n  sarb: true, // Old South Arabian\n  orkh: true, // Old Turkic, Orkhon Runic\n  samr: true, // Samaritan\n  mand: true, // Mandaic, Mandaean\n  merc: true, // Meroitic Cursive\n  mero: true, // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true, // Manichaean\n  mend: true, // Mende Kikakui\n  nbat: true, // Nabataean\n  narb: true, // Old North Arabian\n  palm: true, // Palmyrene\n  phlp: true // Psalter Pahlavi\n};\n\nfunction direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\n\nvar GlyphRun = function () {\n  function GlyphRun(glyphs, features, script, language, direction$$1) {\n    classCallCheck(this, GlyphRun);\n\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * An array of indices to indices in the input string for each glyph\n     * @type {number[]}\n     */\n    this.stringIndices = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction$$1 || direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var tag = _ref;\n\n        this.features[tag] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n\n\n  createClass(GlyphRun, [{\n    key: 'advanceWidth',\n    get: function get$$1() {\n      var width = 0;\n      for (var _iterator2 = this.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var position = _ref2;\n\n        width += position.xAdvance;\n      }\n\n      return width;\n    }\n\n    /**\n     * The total advance height of the run.\n     * @type {number}\n     */\n\n  }, {\n    key: 'advanceHeight',\n    get: function get$$1() {\n      var height = 0;\n      for (var _iterator3 = this.positions, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var position = _ref3;\n\n        height += position.yAdvance;\n      }\n\n      return height;\n    }\n\n    /**\n     * The bounding box containing all glyphs in the run.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      var bbox = new BBox();\n\n      var x = 0;\n      var y = 0;\n      for (var index = 0; index < this.glyphs.length; index++) {\n        var glyph = this.glyphs[index];\n        var p = this.positions[index];\n        var b = glyph.bbox;\n\n        bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n        bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n\n        x += p.xAdvance;\n        y += p.yAdvance;\n      }\n\n      return bbox;\n    }\n  }]);\n  return GlyphRun;\n}();\n\n/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nvar GlyphPosition = function GlyphPosition() {\n  var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  classCallCheck(this, GlyphPosition);\n\n  /**\n   * The amount to move the virtual pen in the X direction after rendering this glyph.\n   * @type {number}\n   */\n  this.xAdvance = xAdvance;\n\n  /**\n   * The amount to move the virtual pen in the Y direction after rendering this glyph.\n   * @type {number}\n   */\n  this.yAdvance = yAdvance;\n\n  /**\n   * The offset from the pen position in the X direction at which to render this glyph.\n   * @type {number}\n   */\n  this.xOffset = xOffset;\n\n  /**\n   * The offset from the pen position in the Y direction at which to render this glyph.\n   * @type {number}\n   */\n  this.yOffset = yOffset;\n};\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nvar features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: { // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nvar feature = function feature(name, selector) {\n  return [features[name].code, features[name][selector]];\n};\n\nvar OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'), // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'), // ??\n  numr: feature('fractions', 'diagonalFractions'), // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'), // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n\n  init: feature('smartSwash', 'wordInitialSwashes'), // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'), // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'), // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'), // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'), //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (var i = 1; i <= 99; i++) {\n  OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nvar AATMapping = {};\nfor (var ot in OTMapping) {\n  var aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nfunction mapOTToAAT(features) {\n  var res = {};\n  for (var k in features) {\n    var r$$1 = void 0;\n    if (r$$1 = OTMapping[k]) {\n      if (res[r$$1[0]] == null) {\n        res[r$$1[0]] = {};\n      }\n\n      res[r$$1[0]][r$$1[1]] = features[k];\n    }\n  }\n\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  var type = f[0],\n      setting = f[1];\n\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nfunction mapAATToOT(features) {\n  var res = {};\n  if (Array.isArray(features)) {\n    for (var k = 0; k < features.length; k++) {\n      var r$$1 = void 0;\n      var f = mapFeatureStrings(features[k]);\n      if (r$$1 = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r$$1] = true;\n      }\n    }\n  } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n    for (var type in features) {\n      var _feature = features[type];\n      for (var setting in _feature) {\n        var _r = void 0;\n        var _f = mapFeatureStrings([type, setting]);\n        if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {\n          res[_r] = true;\n        }\n      }\n    }\n  }\n\n  return Object.keys(res);\n}\n\nvar _class$3;\n\nfunction _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar AATLookupTable = (_class$3 = function () {\n  function AATLookupTable(table) {\n    classCallCheck(this, AATLookupTable);\n\n    this.table = table;\n  }\n\n  AATLookupTable.prototype.lookup = function lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n      case 4:\n        {\n          var min = 0;\n          var max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.firstGlyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.firstGlyph) {\n              max = mid - 1;\n            } else if (glyph > seg.lastGlyph) {\n              min = mid + 1;\n            } else {\n              if (this.table.version === 2) {\n                return seg.value;\n              } else {\n                return seg.values[glyph - seg.firstGlyph];\n              }\n            }\n          }\n\n          return null;\n        }\n\n      case 6:\n        {\n          // lookup single\n          var _min = 0;\n          var _max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (_min <= _max) {\n            var mid = _min + _max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.glyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.glyph) {\n              _max = mid - 1;\n            } else if (glyph > seg.glyph) {\n              _min = mid + 1;\n            } else {\n              return seg.value;\n            }\n          }\n\n          return null;\n        }\n\n      case 8:\n        // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n  };\n\n  AATLookupTable.prototype.glyphsForValue = function glyphsForValue(classValue) {\n    var res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4:\n        {\n          for (var _iterator = this.table.segments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var segment = _ref;\n\n            if (this.table.version === 2 && segment.value === classValue) {\n              res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));\n            } else {\n              for (var index = 0; index < segment.values.length; index++) {\n                if (segment.values[index] === classValue) {\n                  res.push(segment.firstGlyph + index);\n                }\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 6:\n        {\n          // lookup single\n          for (var _iterator2 = this.table.segments, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref2;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref2 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref2 = _i2.value;\n            }\n\n            var _segment = _ref2;\n\n            if (_segment.value === classValue) {\n              res.push(_segment.glyph);\n            }\n          }\n\n          break;\n        }\n\n      case 8:\n        {\n          // lookup trimmed\n          for (var i = 0; i < this.table.values.length; i++) {\n            if (this.table.values[i] === classValue) {\n              res.push(this.table.firstGlyph + i);\n            }\n          }\n\n          break;\n        }\n\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n\n    return res;\n  };\n\n  return AATLookupTable;\n}(), _applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype), _class$3);\n\nvar START_OF_TEXT_STATE = 0;\nvar END_OF_TEXT_CLASS = 0;\nvar OUT_OF_BOUNDS_CLASS = 1;\nvar DELETED_GLYPH_CLASS = 2;\nvar DONT_ADVANCE = 0x4000;\n\nvar AATStateMachine = function () {\n  function AATStateMachine(stateTable) {\n    classCallCheck(this, AATStateMachine);\n\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  AATStateMachine.prototype.process = function process(glyphs, reverse, processEntry) {\n    var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    var index = reverse ? glyphs.length - 1 : 0;\n    var dir = reverse ? -1 : 1;\n\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      var glyph = null;\n      var classCode = OUT_OF_BOUNDS_CLASS;\n      var shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) {\n          // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      var row = this.stateTable.stateArray.getItem(currentState);\n      var entryIndex = row[classCode];\n      var entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  };\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n\n\n  AATStateMachine.prototype.traverse = function traverse(opts) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n\n    var _stateTable = this.stateTable,\n        nClasses = _stateTable.nClasses,\n        stateArray = _stateTable.stateArray,\n        entryTable = _stateTable.entryTable;\n\n    var row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (var classCode = 4; classCode < nClasses; classCode++) {\n      var entryIndex = row[classCode];\n      var entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (var _iterator = this.lookupTable.glyphsForValue(classCode), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var glyph = _ref;\n\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  };\n\n  return AATStateMachine;\n}();\n\nvar _class$2;\n\nfunction _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n// indic replacement flags\nvar MARK_FIRST = 0x8000;\nvar MARK_LAST = 0x2000;\nvar VERB = 0x000f;\n\n// contextual substitution and glyph insertion flag\nvar SET_MARK = 0x8000;\n\n// ligature entry flags\nvar SET_COMPONENT = 0x8000;\nvar PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nvar LAST_MASK = 0x80000000;\nvar STORE_MASK = 0x40000000;\nvar OFFSET_MASK = 0x3fffffff;\n\nvar REVERSE_DIRECTION = 0x400000;\nvar CURRENT_INSERT_BEFORE = 0x0800;\nvar MARKED_INSERT_BEFORE = 0x0400;\nvar CURRENT_INSERT_COUNT = 0x03e0;\nvar MARKED_INSERT_COUNT = 0x001f;\n\nvar AATMorxProcessor = (_class$2 = function () {\n  function AATMorxProcessor(font) {\n    classCallCheck(this, AATMorxProcessor);\n\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:true}}\n\n\n  AATMorxProcessor.prototype.process = function process(glyphs) {\n    var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var _iterator = this.morx.chains, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var chain = _ref;\n\n      var flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (var _iterator2 = chain.features, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var feature = _ref2;\n\n        var f = void 0;\n        if ((f = features[feature.featureType]) && f[feature.featureSetting]) {\n          flags &= feature.disableFlags;\n          flags |= feature.enableFlags;\n        }\n      }\n\n      for (var _iterator3 = chain.subtables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var subtable = _ref3;\n\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    var index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  };\n\n  AATMorxProcessor.prototype.processSubtable = function processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n\n    var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  };\n\n  AATMorxProcessor.prototype.getStateMachine = function getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  };\n\n  AATMorxProcessor.prototype.getProcessor = function getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error('Invalid morx subtable type: ' + this.subtable.type);\n    }\n  };\n\n  AATMorxProcessor.prototype.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  };\n\n  AATMorxProcessor.prototype.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {\n    var subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      var lookup = subsitutions.getItem(entry.markIndex);\n      var lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      var _lookup = subsitutions.getItem(entry.currentIndex);\n      var _lookupTable = new AATLookupTable(_lookup);\n      glyph = this.glyphs[index];\n      var gid = _lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  };\n\n  AATMorxProcessor.prototype.processLigature = function processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      var _ligatureStack;\n\n      var actions = this.subtable.table.ligatureActions;\n      var components = this.subtable.table.components;\n      var ligatureList = this.subtable.table.ligatureList;\n\n      var actionIndex = entry.action;\n      var last = false;\n      var ligatureIndex = 0;\n      var codePoints = [];\n      var ligatureGlyphs = [];\n\n      while (!last) {\n        var _codePoints;\n\n        var componentGlyph = this.ligatureStack.pop();\n        (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);\n\n        var action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        var store = !!(action & STORE_MASK);\n        var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n\n        var component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          var ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);\n    }\n  };\n\n  AATMorxProcessor.prototype.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {\n    var lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        var gid = lookupTable.lookup(glyph.id);\n        if (gid) {\n          // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  };\n\n  AATMorxProcessor.prototype._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    var _glyphs;\n\n    var stringIndex = this.glyphs[glyphIndex].stringIndex;\n    var insertions = [];\n    while (count--) {\n      var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));\n  };\n\n  AATMorxProcessor.prototype.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);\n    }\n  };\n\n  AATMorxProcessor.prototype.getSupportedFeatures = function getSupportedFeatures() {\n    var features = [];\n    for (var _iterator4 = this.morx.chains, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var chain = _ref4;\n\n      for (var _iterator5 = chain.features, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var feature = _ref5;\n\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  };\n\n  AATMorxProcessor.prototype.generateInputs = function generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  };\n\n  AATMorxProcessor.prototype.generateInputCache = function generateInputCache() {\n    this.inputCache = {};\n\n    for (var _iterator6 = this.morx.chains, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n      var _ref6;\n\n      if (_isArray6) {\n        if (_i6 >= _iterator6.length) break;\n        _ref6 = _iterator6[_i6++];\n      } else {\n        _i6 = _iterator6.next();\n        if (_i6.done) break;\n        _ref6 = _i6.value;\n      }\n\n      var chain = _ref6;\n\n      var flags = chain.defaultFlags;\n\n      for (var _iterator7 = chain.subtables, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n        var _ref7;\n\n        if (_isArray7) {\n          if (_i7 >= _iterator7.length) break;\n          _ref7 = _iterator7[_i7++];\n        } else {\n          _i7 = _iterator7.next();\n          if (_i7.done) break;\n          _ref7 = _i7.value;\n        }\n\n        var subtable = _ref7;\n\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  };\n\n  AATMorxProcessor.prototype.generateInputsForSubtable = function generateInputsForSubtable(subtable) {\n    var _this = this;\n\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    var reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n\n    var input = [];\n    var stack = [];\n    this.glyphs = [];\n\n    stateMachine.traverse({\n      enter: function enter(glyph, entry) {\n        var glyphs = _this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: _this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        var g = _this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        var count = 0;\n        var found = 0;\n        for (var i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          var result = input.map(function (g) {\n            return g.id;\n          });\n          var _cache = _this.inputCache[found];\n          if (_cache) {\n            _cache.push(result);\n          } else {\n            _this.inputCache[found] = [result];\n          }\n        }\n      },\n\n      exit: function exit() {\n        \n        var _stack$pop = stack.pop();\n\n        _this.glyphs = _stack$pop.glyphs;\n        _this.ligatureStack = _stack$pop.ligatureStack;\n\n        input.pop();\n      }\n    });\n  };\n\n  return AATMorxProcessor;\n}(), _applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], Object.getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype), _class$2);\n\nfunction swap(glyphs, rangeA, rangeB) {\n  var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n\n  var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  switch (verb) {\n    case 0:\n      // no change\n      return glyphs;\n\n    case 1:\n      // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2:\n      // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3:\n      // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4:\n      // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5:\n      // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6:\n      // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7:\n      // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8:\n      // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9:\n      // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10:\n      // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11:\n      // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12:\n      // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13:\n      // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14:\n      // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15:\n      // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error('Unknown verb: ' + verb);\n  }\n}\n\nvar AATLayoutEngine = function () {\n  function AATLayoutEngine(font) {\n    classCallCheck(this, AATLayoutEngine);\n\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  AATLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));\n  };\n\n  AATLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  };\n\n  AATLayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var glyphStrings = this.morxProcessor.generateInputs(gid);\n    var result = new Set();\n\n    for (var _iterator = glyphStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var glyphs = _ref;\n\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  };\n\n  AATLayoutEngine.prototype._addStrings = function _addStrings(glyphs, index, strings, string) {\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var codePoint = _ref2;\n\n      var s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  };\n\n  return AATLayoutEngine;\n}();\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\n\nvar ShapingPlan = function () {\n  function ShapingPlan(font, script, direction$$1) {\n    classCallCheck(this, ShapingPlan);\n\n    this.font = font;\n    this.script = script;\n    this.direction = direction$$1;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n\n\n  ShapingPlan.prototype._addFeatures = function _addFeatures(features, global) {\n    var stageIndex = this.stages.length - 1;\n    var stage = this.stages[stageIndex];\n    for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var feature = _ref;\n\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Add features to the last stage\n   */\n\n\n  ShapingPlan.prototype.add = function add(arg) {\n    var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  };\n\n  /**\n   * Add a new stage\n   */\n\n\n  ShapingPlan.prototype.addStage = function addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  };\n\n  ShapingPlan.prototype.setFeatureOverrides = function setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      for (var tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          var stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  };\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n\n\n  ShapingPlan.prototype.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {\n    for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var glyph = _ref2;\n\n      for (var feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n\n\n  ShapingPlan.prototype.process = function process(processor, glyphs, positions) {\n    for (var _iterator3 = this.stages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var stage = _ref3;\n\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  };\n\n  return ShapingPlan;\n}();\n\nvar _class$4;\nvar _temp;\n\nvar VARIATION_FEATURES = ['rvrn'];\nvar COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nvar FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nvar HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nvar DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nvar DefaultShaper = (_temp = _class$4 = function () {\n  function DefaultShaper() {\n    classCallCheck(this, DefaultShaper);\n  }\n\n  DefaultShaper.plan = function plan(_plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(_plan);\n    this.planFeatures(_plan);\n    this.planPostprocessing(_plan, features);\n\n    // Assign the global features to all the glyphs\n    _plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(_plan, glyphs);\n  };\n\n  DefaultShaper.planPreprocessing = function planPreprocessing(plan) {\n    plan.add({\n      global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),\n      local: FRACTIONAL_FEATURES\n    });\n  };\n\n  DefaultShaper.planFeatures = function planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  };\n\n  DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {\n    plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));\n    plan.setFeatureOverrides(userFeatures);\n  };\n\n  DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (var i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) {\n        // fraction slash\n        var start = i;\n        var end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  };\n\n  return DefaultShaper;\n}(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);\n\nvar type = \"Buffer\";\nvar data = [0, 1, 16, 0, 0, 0, 0, 0, 0, 0, 49, 160, 1, 149, 1, 106, 254, 237, 216, 43, 79, 3, 65, 20, 5, 224, 217, 7, 77, 41, 138, 127, 64, 37, 146, 4, 131, 37, 4, 143, 68, 33, 193, 224, 192, 129, 3, 137, 196, 32, 81, 4, 73, 80, 72, 28, 18, 137, 194, 224, 144, 224, 48, 156, 210, 153, 228, 102, 152, 217, 206, 238, 206, 62, 40, 231, 38, 95, 102, 186, 219, 121, 246, 238, 35, 29, 167, 74, 173, 194, 26, 108, 192, 88, 127, 254, 43, 229, 14, 236, 194, 30, 236, 195, 33, 28, 195, 41, 156, 195, 5, 92, 194, 21, 92, 139, 118, 183, 112, 167, 63, 79, 60, 136, 250, 163, 168, 211, 124, 123, 130, 35, 237, 25, 94, 224, 181, 7, 243, 106, 203, 155, 168, 191, 247, 96, 62, 68, 68, 68, 68, 68, 68, 68, 68, 77, 153, 252, 255, 243, 209, 131, 121, 16, 17, 17, 17, 17, 205, 179, 124, 113, 234, 108, 216, 140, 45, 244, 125, 2, 247, 240, 9, 235, 35, 165, 14, 70, 211, 115, 55, 40, 183, 149, 82, 155, 195, 230, 214, 247, 5, 89, 246, 251, 248, 18, 142, 45, 59, 142, 119, 101, 37, 77, 126, 48, 24, 255, 57, 18, 15, 121, 222, 85, 143, 21, 185, 238, 55, 179, 228, 142, 210, 230, 106, 83, 150, 108, 215, 167, 144, 115, 146, 107, 180, 247, 42, 100, 125, 49, 84, 217, 219, 54, 100, 86, 61, 100, 29, 174, 188, 50, 231, 149, 40, 125, 17, 227, 58, 144, 227, 133, 132, 92, 179, 60, 86, 55, 22, 28, 253, 15, 180, 162, 223, 63, 52, 39, 50, 209, 167, 221, 110, 16, 97, 254, 170, 196, 92, 92, 121, 82, 55, 247, 138, 246, 198, 117, 126, 214, 184, 161, 209, 245, 117, 87, 55, 247, 124, 237, 103, 221, 235, 203, 228, 158, 252, 174, 235, 217, 230, 155, 87, 217, 28, 50, 247, 100, 223, 111, 92, 37, 18, 171, 173, 221, 79, 172, 103, 113, 215, 57, 226, 123, 255, 48, 235, 111, 43, 143, 235, 230, 115, 209, 250, 154, 232, 219, 247, 190, 22, 59, 98, 237, 113, 90, 113, 158, 190, 107, 47, 177, 74, 83, 79, 244, 88, 33, 239, 48, 105, 65, 255, 174, 241, 204, 88, 161, 115, 45, 243, 124, 47, 234, 211, 126, 158, 184, 230, 103, 215, 237, 251, 101, 157, 240, 237, 99, 19, 121, 247, 13];\nvar trieData = {\n\ttype: type,\n\tdata: data\n};\n\nvar trie = new UnicodeTrie(new Uint8Array(trieData.data));\nvar FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\n\nvar ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\n\nvar ISOL = 'isol';\nvar FINA = 'fina';\nvar FIN2 = 'fin2';\nvar FIN3 = 'fin3';\nvar MEDI = 'medi';\nvar MED2 = 'med2';\nvar INIT = 'init';\nvar NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nvar STATE_TABLE = [\n//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]],\n\n// State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]],\n\n// State 2: prev was D/L in ISOL form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]],\n\n// State 3: prev was D in FINA form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]],\n\n// State 4: prev was FINA ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]],\n\n// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]],\n\n// State 6: prev was DALATH/RISH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\n\nvar ArabicShaper = function (_DefaultShaper) {\n  inherits(ArabicShaper, _DefaultShaper);\n\n  function ArabicShaper() {\n    classCallCheck(this, ArabicShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  ArabicShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (var i = 0; i < FEATURES.length; i++) {\n      var feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  };\n\n  ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    _DefaultShaper.assignFeatures.call(this, plan, glyphs);\n\n    var prev = -1;\n    var state = 0;\n    var actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (var i = 0; i < glyphs.length; i++) {\n      var curAction = void 0,\n          prevAction = void 0;\n      var glyph = glyphs[i];\n      var type$$1 = getShapingClass(glyph.codePoints[0]);\n      if (type$$1 === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      var _STATE_TABLE$state$ty = STATE_TABLE[state][type$$1];\n      prevAction = _STATE_TABLE$state$ty[0];\n      curAction = _STATE_TABLE$state$ty[1];\n      state = _STATE_TABLE$state$ty[2];\n\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (var index = 0; index < glyphs.length; index++) {\n      var feature = void 0;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n\n  return ArabicShaper;\n}(DefaultShaper);\n\nfunction getShapingClass(codePoint) {\n  var res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n\n  var category = unicode.getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n\nvar GlyphIterator = function () {\n  function GlyphIterator(glyphs, options) {\n    classCallCheck(this, GlyphIterator);\n\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  GlyphIterator.prototype.reset = function reset() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  };\n\n  GlyphIterator.prototype.shouldIgnore = function shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  };\n\n  GlyphIterator.prototype.move = function move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  };\n\n  GlyphIterator.prototype.next = function next() {\n    return this.move(+1);\n  };\n\n  GlyphIterator.prototype.prev = function prev() {\n    return this.move(-1);\n  };\n\n  GlyphIterator.prototype.peek = function peek() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var idx = this.index;\n    var res = this.increment(count);\n    this.index = idx;\n    return res;\n  };\n\n  GlyphIterator.prototype.peekIndex = function peekIndex() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var idx = this.index;\n    this.increment(count);\n    var res = this.index;\n    this.index = idx;\n    return res;\n  };\n\n  GlyphIterator.prototype.increment = function increment() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  };\n\n  createClass(GlyphIterator, [{\n    key: \"cur\",\n    get: function get$$1() {\n      return this.glyphs[this.index] || null;\n    }\n  }]);\n  return GlyphIterator;\n}();\n\nvar DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nvar OTProcessor = function () {\n  function OTProcessor(font, table) {\n    classCallCheck(this, OTProcessor);\n\n    this.font = font;\n    this.table = table;\n\n    this.script = null;\n    this.scriptTag = null;\n\n    this.language = null;\n    this.languageTag = null;\n\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  OTProcessor.prototype.findScript = function findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var s = _ref;\n\n      for (var _iterator2 = this.table.scriptList, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var entry = _ref2;\n\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  OTProcessor.prototype.selectScript = function selectScript(script, language, direction$$1) {\n    var changed = false;\n    var entry = void 0;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction$$1 || direction$$1 !== this.direction) {\n      this.direction = direction$$1 || direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (var _iterator3 = this.script.langSysRecords, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var lang = _ref3;\n\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (var _iterator4 = this.language.featureIndexes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n          var _ref4;\n\n          if (_isArray4) {\n            if (_i4 >= _iterator4.length) break;\n            _ref4 = _iterator4[_i4++];\n          } else {\n            _i4 = _iterator4.next();\n            if (_i4.done) break;\n            _ref4 = _i4.value;\n          }\n\n          var featureIndex = _ref4;\n\n          var record = this.table.featureList[featureIndex];\n          var substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  };\n\n  OTProcessor.prototype.lookupsForFeatures = function lookupsForFeatures() {\n    var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var exclude = arguments[1];\n\n    var lookups = [];\n    for (var _iterator5 = userFeatures, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var tag = _ref5;\n\n      var feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n\n      for (var _iterator6 = feature.lookupListIndexes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n        var _ref6;\n\n        if (_isArray6) {\n          if (_i6 >= _iterator6.length) break;\n          _ref6 = _iterator6[_i6++];\n        } else {\n          _i6 = _iterator6.next();\n          if (_i6.done) break;\n          _ref6 = _i6.value;\n        }\n\n        var lookupIndex = _ref6;\n\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort(function (a, b) {\n      return a.index - b.index;\n    });\n    return lookups;\n  };\n\n  OTProcessor.prototype.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    var substitutions = record.featureTableSubstitution.substitutions;\n    for (var _iterator7 = substitutions, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n      var _ref7;\n\n      if (_isArray7) {\n        if (_i7 >= _iterator7.length) break;\n        _ref7 = _iterator7[_i7++];\n      } else {\n        _i7 = _iterator7.next();\n        if (_i7.done) break;\n        _ref7 = _i7.value;\n      }\n\n      var substitution = _ref7;\n\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  };\n\n  OTProcessor.prototype.findVariationsIndex = function findVariationsIndex(coords) {\n    var variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n\n    var records = variations.featureVariationRecords;\n    for (var i = 0; i < records.length; i++) {\n      var conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  OTProcessor.prototype.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {\n    return conditions.every(function (condition) {\n      var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  };\n\n  OTProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    var lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  };\n\n  OTProcessor.prototype.applyLookups = function applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (var _iterator8 = lookups, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {\n      var _ref8;\n\n      if (_isArray8) {\n        if (_i8 >= _iterator8.length) break;\n        _ref8 = _iterator8[_i8++];\n      } else {\n        _i8 = _iterator8.next();\n        if (_i8.done) break;\n        _ref8 = _i8.value;\n      }\n\n      var _ref9 = _ref8,\n          feature = _ref9.feature,\n          lookup = _ref9.lookup;\n\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (var _iterator9 = lookup.subTables, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {\n          var _ref10;\n\n          if (_isArray9) {\n            if (_i9 >= _iterator9.length) break;\n            _ref10 = _iterator9[_i9++];\n          } else {\n            _i9 = _iterator9.next();\n            if (_i9.done) break;\n            _ref10 = _i9.value;\n          }\n\n          var table = _ref10;\n\n          var res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  };\n\n  OTProcessor.prototype.applyLookup = function applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  };\n\n  OTProcessor.prototype.applyLookupList = function applyLookupList(lookupRecords) {\n    var options = this.glyphIterator.options;\n    var glyphIndex = this.glyphIterator.index;\n\n    for (var _iterator10 = lookupRecords, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {\n      var _ref11;\n\n      if (_isArray10) {\n        if (_i10 >= _iterator10.length) break;\n        _ref11 = _iterator10[_i10++];\n      } else {\n        _i10 = _iterator10.next();\n        if (_i10.done) break;\n        _ref11 = _i10.value;\n      }\n\n      var lookupRecord = _ref11;\n\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (var _iterator11 = lookup.subTables, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {\n        var _ref12;\n\n        if (_isArray11) {\n          if (_i11 >= _iterator11.length) break;\n          _ref12 = _iterator11[_i11++];\n        } else {\n          _i11 = _iterator11.next();\n          if (_i11.done) break;\n          _ref12 = _i11.value;\n        }\n\n        var table = _ref12;\n\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  };\n\n  OTProcessor.prototype.coverageIndex = function coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (var _iterator12 = coverage.rangeRecords, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {\n          var _ref13;\n\n          if (_isArray12) {\n            if (_i12 >= _iterator12.length) break;\n            _ref13 = _iterator12[_i12++];\n          } else {\n            _i12 = _iterator12.next();\n            if (_i12.done) break;\n            _ref13 = _i12.value;\n          }\n\n          var range = _ref13;\n\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  };\n\n  OTProcessor.prototype.match = function match(sequenceIndex, sequence, fn, matched) {\n    var pos = this.glyphIterator.index;\n    var glyph = this.glyphIterator.increment(sequenceIndex);\n    var idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  };\n\n  OTProcessor.prototype.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      return component === glyph.id;\n    });\n  };\n\n  OTProcessor.prototype.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {\n    var _this = this;\n\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      // If the current feature doesn't apply to this glyph,\n      if (!(_this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  };\n\n  OTProcessor.prototype.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {\n    var _this2 = this;\n\n    return this.match(sequenceIndex, sequence, function (coverage, glyph) {\n      return _this2.coverageIndex(coverage, glyph.id) >= 0;\n    });\n  };\n\n  OTProcessor.prototype.getClassID = function getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        // Class array\n        var i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (var _iterator13 = classDef.classRangeRecord, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {\n          var _ref14;\n\n          if (_isArray13) {\n            if (_i13 >= _iterator13.length) break;\n            _ref14 = _iterator13[_i13++];\n          } else {\n            _i13 = _iterator13.next();\n            if (_i13.done) break;\n            _ref14 = _i13.value;\n          }\n\n          var range = _ref14;\n\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  };\n\n  OTProcessor.prototype.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {\n    var _this3 = this;\n\n    return this.match(sequenceIndex, sequence, function (classID, glyph) {\n      return classID === _this3.getClassID(glyph.id, classDef);\n    });\n  };\n\n  OTProcessor.prototype.applyContext = function applyContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        var set$$1 = table.ruleSets[index];\n        for (var _iterator14 = set$$1, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {\n          var _ref15;\n\n          if (_isArray14) {\n            if (_i14 >= _iterator14.length) break;\n            _ref15 = _iterator14[_i14++];\n          } else {\n            _i14 = _iterator14.next();\n            if (_i14.done) break;\n            _ref15 = _i14.value;\n          }\n\n          var rule = _ref15;\n\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n\n        set$$1 = table.classSet[index];\n        for (var _iterator15 = set$$1, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {\n          var _ref16;\n\n          if (_isArray15) {\n            if (_i15 >= _iterator15.length) break;\n            _ref16 = _iterator15[_i15++];\n          } else {\n            _i15 = _iterator15.next();\n            if (_i15.done) break;\n            _ref16 = _i15.value;\n          }\n\n          var _rule = _ref16;\n\n          if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {\n            return this.applyLookupList(_rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  };\n\n  OTProcessor.prototype.applyChainingContext = function applyChainingContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        var set$$1 = table.chainRuleSets[index];\n        for (var _iterator16 = set$$1, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {\n          var _ref17;\n\n          if (_isArray16) {\n            if (_i16 >= _iterator16.length) break;\n            _ref17 = _iterator16[_i16++];\n          } else {\n            _i16 = _iterator16.next();\n            if (_i16.done) break;\n            _ref17 = _i16.value;\n          }\n\n          var rule = _ref17;\n\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        var rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n\n        for (var _iterator17 = rules, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {\n          var _ref18;\n\n          if (_isArray17) {\n            if (_i17 >= _iterator17.length) break;\n            _ref18 = _iterator17[_i17++];\n          } else {\n            _i17 = _iterator17.next();\n            if (_i17.done) break;\n            _ref18 = _i17.value;\n          }\n\n          var _rule2 = _ref18;\n\n          if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(_rule2.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  };\n\n  return OTProcessor;\n}();\n\nvar GlyphInfo = function () {\n  function GlyphInfo(font, id) {\n    var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var features = arguments[3];\n    var stringIndex = arguments[4];\n    classCallCheck(this, GlyphInfo);\n\n    this._font = font;\n    this.codePoints = codePoints;\n    this.stringIndex = stringIndex;\n    this.id = id;\n\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (var i = 0; i < features.length; i++) {\n        var feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      Object.assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  GlyphInfo.prototype.copy = function copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features, this.stringIndex);\n  };\n\n  createClass(GlyphInfo, [{\n    key: 'id',\n    get: function get$$1() {\n      return this._id;\n    },\n    set: function set$$1(id) {\n      this._id = id;\n      this.substituted = true;\n\n      var GDEF = this._font.GDEF;\n      if (GDEF && GDEF.glyphClassDef) {\n        // TODO: clean this up\n        var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n        this.isBase = classID === 1;\n        this.isLigature = classID === 2;\n        this.isMark = classID === 3;\n        this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n      } else {\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n        this.isBase = !this.isMark;\n        this.isLigature = this.codePoints.length > 1;\n        this.markAttachmentType = 0;\n      }\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get$$1() {\n      return this._font.getGlyph(this.id, this.codePoints).advanceWidth;\n    }\n  }]);\n  return GlyphInfo;\n}();\n\nvar _class$5;\nvar _temp$1;\n\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nvar HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {\n  inherits(HangulShaper, _DefaultShaper);\n\n  function HangulShaper() {\n    classCallCheck(this, HangulShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  HangulShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  };\n\n  HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var state = 0;\n    var i = 0;\n    while (i < glyphs.length) {\n      var action = void 0;\n      var glyph = glyphs[i];\n      var code = glyph.codePoints[0];\n      var type = getType(code);var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];\n      action = _STATE_TABLE$state$ty[0];\n      state = _STATE_TABLE$state$ty[1];\n\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  };\n\n  return HangulShaper;\n}(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);\nvar HANGUL_BASE = 0xac00;\nvar HANGUL_END = 0xd7a4;\nvar HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nvar L_BASE = 0x1100; // lead\nvar V_BASE = 0x1161; // vowel\nvar T_BASE = 0x11a7; // trail\nvar L_COUNT = 19;\nvar V_COUNT = 21;\nvar T_COUNT = 28;\nvar L_END = L_BASE + L_COUNT - 1;\nvar V_END = V_BASE + V_COUNT - 1;\nvar T_END = T_BASE + T_COUNT - 1;\nvar DOTTED_CIRCLE = 0x25cc;\n\nvar isL = function isL(code) {\n  return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\n};\nvar isV = function isV(code) {\n  return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\n};\nvar isT = function isT(code) {\n  return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\n};\nvar isTone = function isTone(code) {\n  return 0x302e <= code && code <= 0x302f;\n};\nvar isLVT = function isLVT(code) {\n  return HANGUL_BASE <= code && code <= HANGUL_END;\n};\nvar isLV = function isLV(code) {\n  return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\n};\nvar isCombiningL = function isCombiningL(code) {\n  return L_BASE <= code && code <= L_END;\n};\nvar isCombiningV = function isCombiningV(code) {\n  return V_BASE <= code && code <= V_END;\n};\nvar isCombiningT = function isCombiningT(code) {\n  return T_BASE + 1 && 1 <= code && code <= T_END;\n};\n\n// Character categories\nvar X = 0; // Other character\nvar L = 1; // Leading consonant\nvar V = 2; // Medial vowel\nvar T = 3; // Trailing consonant\nvar LV = 4; // Composed <LV> syllable\nvar LVT = 5; // Composed <LVT> syllable\nvar M = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code)) {\n    return L;\n  }\n  if (isV(code)) {\n    return V;\n  }\n  if (isT(code)) {\n    return T;\n  }\n  if (isLV(code)) {\n    return LV;\n  }\n  if (isLVT(code)) {\n    return LVT;\n  }\n  if (isTone(code)) {\n    return M;\n  }\n  return X;\n}\n\n// State machine actions\nvar NO_ACTION = 0;\nvar DECOMPOSE = 1;\nvar COMPOSE = 2;\nvar TONE_MARK = 4;\nvar INVALID = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nvar STATE_TABLE$1 = [\n//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n\n// State 1: <L>\n[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n\n// State 2: <L,V> or <LV>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]],\n\n// State 3: <L,V,T> or <LVT>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyph.codePoints[0];\n\n  var s = code - HANGUL_BASE;\n  var t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  var l = L_BASE + s / V_COUNT | 0;\n  var v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  var ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n\n  var vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n\n  var insert = [ljmo, vjmo];\n\n  if (t > T_BASE) {\n    var tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice.apply(glyphs, [i, 1].concat(insert));\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n  var type = getType(code);\n\n  var prev = glyphs[i - 1].codePoints[0];\n  var prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  var lv = void 0,\n      ljmo = void 0,\n      vjmo = void 0,\n      tjmo = void 0;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    var l = ljmo.codePoints[0];\n    var v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  var t = tjmo && tjmo.codePoints[0] || T_BASE;\n  if (lv != null && (t === T_BASE || isCombiningT(t))) {\n    var s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      var del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) {\n    ljmo.features.ljmo = true;\n  }\n  if (vjmo) {\n    vjmo.features.vjmo = true;\n  }\n  if (tjmo) {\n    tjmo.features.tjmo = true;\n  }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) {\n    return;\n  }\n\n  var prev = glyphs[i - 1].codePoints[0];\n  var len = getLength(prev);\n\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n\nvar stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 28, 29, 30, 31, 32, 33, 0, 34, 0, 0, 35, 36, 0, 0, 37, 0], [0, 0, 0, 38, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 39, 0, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 12, 43, 0, 0, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0], [0, 0, 0, 45, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 55, 56, 57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 62, 0], [0, 0, 0, 4, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 63, 64, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 63, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 0, 2, 16, 0], [0, 0, 0, 18, 65, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 0, 0], [0, 0, 0, 69, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 73, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 75, 0, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 25, 79, 0, 0, 0, 0], [0, 0, 0, 18, 19, 20, 74, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 81, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 87, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 18, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 89, 90, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 89, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 0, 0], [0, 0, 0, 94, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 96, 0, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 102, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 108, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 28, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 110, 111, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 110, 0, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 0, 0], [0, 0, 0, 0, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 0, 0, 115, 116, 117, 118, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 39, 0, 122, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0], [0, 39, 0, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 47, 47, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 128, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 129, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 135, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 136, 0, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0], [0, 0, 0, 142, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 148, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 150, 151, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 150, 0, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 157, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 3, 4, 5, 159, 160, 8, 161, 0, 162, 0, 11, 12, 163, 0, 75, 16, 0], [0, 0, 0, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0], [0, 124, 64, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 124, 0, 0], [0, 0, 0, 0, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 167, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 172, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 75, 0, 176, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 178, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0], [0, 75, 0, 0, 0, 175, 179, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 180, 180, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 83, 83, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 182, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 183, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 191, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0], [0, 178, 90, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 178, 0, 0], [0, 0, 0, 0, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 198, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 96, 0, 202, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 204, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0], [0, 96, 0, 0, 0, 201, 205, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 206, 206, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 104, 104, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 208, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 209, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 217, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0], [0, 204, 111, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 204, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 223, 0, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 119, 225, 0, 0, 0, 0], [0, 0, 0, 115, 116, 117, 222, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 115, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 226, 64, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 226, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 39, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 44, 44, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 229, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 39, 0, 122, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 231, 231, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 131, 131, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 234, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 235, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 0, 0, 240, 241, 242, 243, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 136, 0, 247, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 249, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0], [0, 136, 0, 0, 0, 246, 250, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 251, 251, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 144, 144, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 253, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 262, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0], [0, 249, 151, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 249, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 158, 225, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 222, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 155, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 43, 266, 266, 8, 161, 0, 24, 0, 0, 12, 267, 0, 0, 0, 0], [0, 75, 0, 176, 43, 268, 268, 269, 161, 0, 24, 0, 0, 0, 267, 0, 75, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 271, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0], [0, 273, 274, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 273, 0, 0], [0, 0, 0, 40, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 121, 275, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 279, 0, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 173, 281, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 278, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 169, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 282, 90, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 282, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 80, 80, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 285, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 75, 0, 176, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 287, 287, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 185, 185, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 290, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 291, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 192, 281, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 278, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 189, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 76, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 175, 296, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 299, 0, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 199, 301, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 298, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 195, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 302, 111, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 302, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 96, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 101, 101, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 305, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 96, 0, 202, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 307, 307, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 211, 211, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 310, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 311, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 218, 301, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 298, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 215, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 97, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 201, 316, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 320, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 223, 0, 323, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 0, 0, 121, 324, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 325, 318, 326, 327, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 64, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 121, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0], [0, 0, 0, 0, 0, 329, 329, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 237, 237, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 332, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 333, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 337, 0, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 244, 339, 0, 0, 0, 0], [0, 0, 0, 240, 241, 242, 336, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 240, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 340, 151, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 340, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 136, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 141, 141, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 343, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 136, 0, 247, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 345, 345, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 256, 256, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 348, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 349, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 263, 339, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 336, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 260, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 137, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 246, 354, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 355, 90, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 355, 0, 0], [0, 0, 0, 0, 0, 356, 356, 269, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 357, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 366, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 40, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 372, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 279, 0, 375, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 0, 0, 175, 376, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 377, 370, 378, 379, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 90, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 175, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0], [0, 0, 0, 0, 0, 381, 381, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 293, 293, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 384, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 385, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 76, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 390, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 299, 0, 393, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 0, 0, 201, 394, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 395, 388, 396, 397, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 111, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 201, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0], [0, 0, 0, 0, 0, 399, 399, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 313, 313, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 402, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 403, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 97, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 407, 0, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 321, 409, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 406, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 0, 0, 317, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 410, 64, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 410, 0, 0], [0, 223, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 323, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 328, 409, 0, 0, 0, 0], [0, 0, 0, 325, 318, 326, 406, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 325, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0], [0, 0, 0, 0, 0, 411, 411, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 413, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 417, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 337, 0, 420, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 0, 0, 246, 421, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 422, 415, 423, 424, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 151, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 246, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0], [0, 0, 0, 0, 0, 426, 426, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 351, 351, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 429, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 430, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 137, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 434, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 180, 180, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 359, 359, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 437, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 438, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 443, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 367, 225, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 445, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 364, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 448, 0, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 373, 450, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 447, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 0, 0, 369, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 451, 90, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 451, 0, 0], [0, 279, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 375, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 380, 450, 0, 0, 0, 0], [0, 0, 0, 377, 370, 378, 447, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 377, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0], [0, 0, 0, 0, 0, 452, 452, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 454, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 457, 0, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 391, 459, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 456, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 0, 0, 387, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 460, 111, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 460, 0, 0], [0, 299, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 393, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 398, 459, 0, 0, 0, 0], [0, 0, 0, 395, 388, 396, 456, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 395, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0], [0, 0, 0, 0, 0, 461, 461, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 463, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 467, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 407, 0, 470, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 0, 0, 121, 471, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 472, 465, 473, 474, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0], [0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 479, 0, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 418, 481, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 478, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 0, 0, 414, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 482, 151, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 482, 0, 0], [0, 337, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 420, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 425, 481, 0, 0, 0, 0], [0, 0, 0, 422, 415, 423, 478, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 422, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0], [0, 0, 0, 0, 0, 483, 483, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 485, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 435, 225, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 445, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 432, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 486, 486, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 440, 440, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 489, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 490, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 497, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 0, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 0, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 502, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 448, 0, 505, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 0, 0, 175, 506, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 507, 500, 508, 509, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0], [0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 515, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 457, 0, 518, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 0, 0, 201, 519, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 520, 513, 521, 522, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0], [0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 527, 0, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 468, 529, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 526, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 0, 0, 464, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 530, 64, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 530, 0, 0], [0, 407, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 470, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 475, 529, 0, 0, 0, 0], [0, 0, 0, 472, 465, 473, 526, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 472, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0], [0, 0, 0, 0, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 534, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 479, 0, 537, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 0, 0, 246, 538, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 539, 532, 540, 541, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0], [0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0], [0, 0, 0, 0, 0, 544, 544, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 492, 492, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 547, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 548, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 274, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 368, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 553, 0, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 503, 555, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 552, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 0, 0, 499, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 556, 90, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 556, 0, 0], [0, 448, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 505, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 510, 555, 0, 0, 0, 0], [0, 0, 0, 507, 500, 508, 552, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 507, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 559, 0, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 516, 561, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 558, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 0, 0, 512, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 562, 111, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 562, 0, 0], [0, 457, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 518, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 523, 561, 0, 0, 0, 0], [0, 0, 0, 520, 513, 521, 558, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 520, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0], [0, 0, 0, 0, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 565, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 527, 0, 567, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 0, 0, 121, 568, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 569, 66, 570, 571, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 575, 0, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 535, 577, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 574, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 0, 0, 531, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 578, 151, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 578, 0, 0], [0, 479, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 537, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 542, 577, 0, 0, 0, 0], [0, 0, 0, 539, 532, 540, 574, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 539, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0], [0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0], [0, 0, 0, 0, 0, 579, 579, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 581, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 584, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 553, 0, 586, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 0, 0, 175, 587, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 588, 91, 589, 590, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 0, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 594, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 559, 0, 596, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 0, 0, 201, 597, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 598, 112, 599, 600, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 566, 165, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 67, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 0, 0, 563, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 527, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 567, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 572, 165, 0, 0, 0, 0], [0, 0, 0, 569, 66, 570, 67, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 569, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 605, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 575, 0, 607, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 0, 0, 246, 608, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 609, 152, 610, 611, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0], [0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 585, 194, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 92, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 0, 0, 582, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 553, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 586, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 591, 194, 0, 0, 0, 0], [0, 0, 0, 588, 91, 589, 92, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 588, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 595, 220, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 113, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 0, 0, 592, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 559, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 596, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 601, 220, 0, 0, 0, 0], [0, 0, 0, 598, 112, 599, 113, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 598, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 606, 265, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 153, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 0, 0, 603, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 575, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 607, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 612, 265, 0, 0, 0, 0], [0, 0, 0, 609, 152, 610, 153, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 609, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0]];\nvar accepting = [false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true];\nvar tags = [[], [\"broken_cluster\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"symbol_cluster\"], [], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"standalone_cluster\"]];\nvar indicMachine = {\n\tstateTable: stateTable,\n\taccepting: accepting,\n\ttags: tags\n};\n\nvar categories = [\"O\", \"IND\", \"S\", \"GB\", \"B\", \"FM\", \"CGJ\", \"VMAbv\", \"VMPst\", \"VAbv\", \"VPst\", \"CMBlw\", \"VPre\", \"VBlw\", \"H\", \"VMBlw\", \"CMAbv\", \"MBlw\", \"CS\", \"R\", \"SUB\", \"MPst\", \"MPre\", \"FAbv\", \"FPst\", \"FBlw\", \"SMAbv\", \"SMBlw\", \"VMPre\", \"ZWNJ\", \"ZWJ\", \"WJ\", \"VS\", \"N\", \"HN\", \"MAbv\"];\nvar decompositions$1 = { \"2507\": [2503, 2494], \"2508\": [2503, 2519], \"2888\": [2887, 2902], \"2891\": [2887, 2878], \"2892\": [2887, 2903], \"3018\": [3014, 3006], \"3019\": [3015, 3006], \"3020\": [3014, 3031], \"3144\": [3142, 3158], \"3264\": [3263, 3285], \"3271\": [3270, 3285], \"3272\": [3270, 3286], \"3274\": [3270, 3266], \"3275\": [3270, 3266, 3285], \"3402\": [3398, 3390], \"3403\": [3399, 3390], \"3404\": [3398, 3415], \"3546\": [3545, 3530], \"3548\": [3545, 3535], \"3549\": [3545, 3535, 3530], \"3550\": [3545, 3551], \"3635\": [3661, 3634], \"3763\": [3789, 3762], \"3955\": [3953, 3954], \"3957\": [3953, 3956], \"3958\": [4018, 3968], \"3959\": [4018, 3953, 3968], \"3960\": [4019, 3968], \"3961\": [4019, 3953, 3968], \"3969\": [3953, 3968], \"6971\": [6970, 6965], \"6973\": [6972, 6965], \"6976\": [6974, 6965], \"6977\": [6975, 6965], \"6979\": [6978, 6965], \"69934\": [69937, 69927], \"69935\": [69938, 69927], \"70475\": [70471, 70462], \"70476\": [70471, 70487], \"70843\": [70841, 70842], \"70844\": [70841, 70832], \"70846\": [70841, 70845], \"71098\": [71096, 71087], \"71099\": [71097, 71087] };\nvar stateTable$1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 2, 0, 24, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 27, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 39, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 49, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 53, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0]];\nvar accepting$1 = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];\nvar tags$1 = [[], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"virama_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"number_joiner_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"numeral_cluster\"]];\nvar useData = {\n\tcategories: categories,\n\tdecompositions: decompositions$1,\n\tstateTable: stateTable$1,\n\taccepting: accepting$1,\n\ttags: tags$1\n};\n\n// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nvar CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13, // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14, // Khmer-style Virama.\n  Repha: 1 << 15, // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17, // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nvar POSITIONS = {\n  Start: 1 << 0,\n\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n\n  Above_C: 1 << 6,\n\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n\n  End: 1 << 15\n};\n\nvar CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nvar JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nvar HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\n\nvar INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nvar INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n\nvar type$1 = \"Buffer\";\nvar data$1 = [0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 194, 160, 1, 177, 13, 78, 242, 237, 157, 127, 172, 29, 69, 21, 199, 247, 245, 222, 119, 127, 188, 119, 251, 110, 95, 133, 68, 98, 251, 71, 67, 137, 49, 197, 152, 166, 16, 107, 138, 105, 21, 9, 34, 81, 219, 24, 132, 104, 177, 6, 67, 176, 36, 4, 106, 48, 109, 132, 82, 130, 63, 10, 216, 31, 198, 146, 148, 88, 19, 172, 37, 65, 44, 137, 40, 38, 160, 173, 41, 70, 146, 106, 172, 169, 70, 76, 99, 180, 182, 9, 105, 32, 169, 5, 98, 65, 41, 45, 224, 119, 238, 206, 188, 123, 238, 220, 153, 217, 249, 181, 187, 239, 209, 61, 201, 39, 187, 59, 59, 59, 115, 230, 156, 51, 179, 179, 179, 123, 223, 59, 94, 75, 146, 151, 192, 171, 224, 13, 48, 167, 158, 36, 239, 5, 243, 193, 37, 224, 21, 164, 253, 175, 22, 190, 189, 24, 101, 45, 2, 75, 192, 50, 135, 114, 175, 64, 222, 79, 128, 107, 192, 42, 112, 61, 88, 3, 110, 6, 183, 129, 175, 131, 141, 134, 242, 150, 226, 220, 10, 240, 77, 240, 93, 176, 25, 108, 7, 59, 193, 35, 224, 56, 242, 60, 134, 237, 207, 64, 194, 121, 154, 111, 15, 128, 131, 224, 79, 224, 111, 224, 40, 56, 1, 78, 130, 211, 224, 44, 168, 141, 38, 73, 27, 76, 130, 139, 192, 2, 240, 126, 240, 33, 240, 97, 176, 28, 92, 5, 62, 13, 174, 3, 55, 130, 155, 193, 109, 224, 78, 112, 55, 184, 15, 60, 8, 190, 15, 126, 0, 126, 4, 126, 2, 158, 228, 199, 207, 128, 103, 193, 239, 193, 159, 193, 17, 112, 12, 188, 8, 94, 1, 175, 129, 115, 163, 169, 206, 245, 70, 146, 116, 192, 5, 141, 244, 120, 30, 182, 11, 193, 165, 96, 49, 88, 10, 150, 131, 171, 249, 249, 207, 98, 123, 61, 88, 3, 110, 1, 183, 55, 82, 155, 172, 231, 91, 91, 54, 242, 252, 223, 198, 246, 46, 176, 149, 31, 63, 192, 183, 155, 80, 215, 14, 150, 94, 239, 95, 179, 203, 177, 14, 27, 118, 144, 50, 247, 96, 127, 47, 120, 10, 236, 3, 191, 3, 127, 4, 127, 5, 255, 0, 47, 128, 147, 36, 255, 155, 124, 123, 154, 167, 109, 99, 62, 198, 126, 173, 153, 36, 227, 224, 61, 205, 212, 94, 239, 195, 246, 226, 102, 154, 103, 17, 79, 91, 130, 237, 50, 112, 101, 51, 141, 39, 17, 75, 215, 226, 120, 37, 184, 1, 172, 1, 183, 128, 219, 249, 53, 235, 249, 118, 19, 182, 155, 121, 121, 226, 186, 173, 56, 222, 209, 52, 183, 117, 87, 198, 121, 106, 227, 31, 35, 239, 22, 110, 251, 245, 216, 254, 20, 199, 191, 0, 191, 38, 101, 252, 22, 251, 127, 0, 247, 224, 124, 7, 252, 69, 81, 254, 223, 45, 234, 180, 101, 173, 136, 5, 148, 121, 204, 177, 220, 151, 34, 234, 81, 20, 255, 134, 206, 255, 1, 111, 128, 164, 149, 36, 163, 173, 52, 125, 111, 61, 181, 185, 156, 127, 54, 63, 47, 250, 226, 5, 56, 158, 7, 22, 114, 104, 222, 69, 173, 52, 110, 150, 144, 244, 179, 6, 93, 88, 108, 47, 35, 121, 87, 241, 250, 175, 145, 244, 248, 56, 242, 92, 77, 242, 49, 93, 133, 223, 62, 211, 82, 235, 45, 48, 157, 171, 168, 168, 240, 99, 91, 213, 175, 42, 42, 42, 42, 42, 42, 42, 42, 42, 28, 217, 198, 215, 25, 202, 214, 67, 102, 39, 127, 214, 189, 174, 101, 127, 205, 91, 154, 244, 55, 53, 233, 95, 224, 207, 202, 95, 198, 246, 171, 224, 14, 176, 1, 220, 11, 238, 7, 91, 193, 67, 224, 135, 224, 81, 240, 4, 120, 170, 149, 174, 45, 237, 195, 246, 0, 56, 8, 14, 131, 35, 224, 40, 56, 1, 78, 181, 210, 245, 156, 215, 177, 125, 139, 61, 223, 183, 241, 12, 15, 46, 108, 167, 245, 206, 107, 247, 117, 88, 136, 253, 75, 219, 246, 109, 172, 168, 168, 168, 168, 8, 135, 173, 91, 94, 134, 177, 247, 76, 173, 191, 222, 94, 22, 101, 219, 162, 162, 162, 34, 14, 175, 145, 119, 82, 91, 121, 255, 94, 134, 113, 230, 74, 112, 173, 52, 215, 251, 156, 227, 220, 175, 195, 199, 138, 83, 188, 142, 183, 193, 23, 219, 253, 247, 169, 95, 193, 254, 173, 82, 153, 119, 180, 251, 239, 117, 40, 236, 189, 204, 6, 156, 187, 119, 26, 204, 63, 147, 57, 41, 43, 192, 157, 96, 127, 55, 155, 45, 200, 119, 72, 147, 247, 85, 164, 47, 156, 76, 146, 213, 224, 33, 240, 252, 228, 224, 249, 227, 56, 223, 153, 139, 185, 56, 88, 13, 238, 29, 75, 146, 103, 65, 50, 14, 95, 129, 187, 192, 10, 28, 239, 227, 219, 163, 124, 75, 153, 223, 25, 78, 147, 185, 17, 121, 54, 146, 124, 191, 193, 254, 57, 126, 124, 197, 236, 36, 185, 27, 236, 7, 15, 143, 196, 229, 28, 47, 243, 178, 9, 216, 115, 34, 221, 223, 52, 161, 214, 241, 128, 38, 189, 162, 162, 162, 162, 34, 127, 222, 41, 121, 12, 142, 125, 255, 113, 97, 121, 183, 252, 250, 203, 126, 254, 43, 155, 171, 192, 253, 152, 7, 126, 175, 61, 252, 60, 202, 190, 243, 121, 24, 233, 187, 200, 60, 113, 55, 246, 31, 111, 167, 243, 209, 45, 138, 242, 196, 247, 119, 236, 219, 177, 51, 252, 26, 246, 188, 205, 190, 169, 99, 229, 253, 156, 151, 245, 43, 69, 125, 12, 86, 230, 254, 246, 224, 243, 241, 205, 124, 251, 92, 123, 184, 62, 155, 57, 38, 251, 102, 138, 173, 119, 179, 57, 179, 124, 253, 33, 148, 121, 24, 28, 105, 247, 231, 198, 199, 120, 61, 47, 98, 251, 50, 248, 175, 164, 207, 219, 237, 254, 60, 188, 129, 62, 52, 27, 92, 56, 70, 230, 180, 60, 223, 124, 158, 118, 134, 127, 247, 181, 27, 233, 151, 32, 237, 131, 99, 195, 250, 95, 62, 214, 63, 62, 202, 203, 254, 232, 152, 157, 15, 5, 247, 248, 248, 31, 117, 124, 10, 172, 2, 159, 7, 95, 2, 55, 129, 29, 56, 183, 22, 219, 117, 96, 195, 88, 58, 79, 254, 14, 216, 198, 206, 129, 93, 96, 15, 216, 11, 158, 36, 122, 62, 51, 150, 206, 167, 15, 130, 195, 224, 8, 56, 10, 78, 128, 83, 22, 237, 121, 29, 121, 206, 128, 145, 113, 245, 249, 7, 224, 203, 54, 206, 77, 142, 247, 143, 47, 194, 254, 2, 126, 252, 32, 142, 63, 128, 253, 197, 252, 248, 35, 216, 126, 76, 83, 22, 181, 255, 82, 69, 108, 217, 194, 174, 223, 211, 40, 191, 47, 219, 232, 89, 36, 91, 13, 245, 127, 114, 92, 127, 221, 59, 138, 126, 58, 19, 219, 175, 226, 95, 205, 119, 81, 28, 120, 182, 37, 70, 221, 172, 191, 177, 241, 110, 37, 233, 219, 236, 158, 116, 3, 137, 171, 213, 216, 191, 9, 156, 203, 41, 158, 178, 218, 183, 174, 158, 234, 120, 171, 52, 254, 124, 205, 48, 30, 157, 15, 80, 63, 126, 3, 182, 216, 52, 158, 95, 159, 119, 141, 63, 241, 109, 229, 183, 52, 249, 46, 39, 247, 249, 117, 26, 63, 138, 243, 108, 222, 177, 221, 112, 126, 61, 223, 103, 191, 97, 217, 140, 178, 86, 242, 227, 237, 216, 223, 9, 30, 49, 140, 145, 50, 187, 45, 126, 75, 241, 114, 14, 223, 204, 63, 10, 29, 159, 152, 65, 241, 172, 107, 199, 47, 103, 72, 27, 88, 140, 236, 135, 174, 207, 129, 67, 224, 121, 240, 79, 174, 251, 11, 22, 109, 96, 109, 165, 191, 225, 96, 191, 17, 184, 15, 233, 39, 199, 211, 216, 103, 223, 95, 236, 37, 249, 214, 146, 107, 79, 35, 207, 217, 241, 52, 109, 164, 227, 222, 183, 92, 17, 191, 101, 88, 105, 81, 46, 123, 222, 104, 119, 6, 211, 232, 239, 31, 196, 111, 186, 68, 219, 39, 121, 94, 246, 108, 177, 143, 204, 253, 22, 75, 115, 212, 139, 120, 59, 31, 15, 152, 31, 78, 39, 98, 247, 255, 233, 194, 188, 214, 187, 187, 125, 148, 167, 13, 237, 220, 114, 158, 216, 64, 135, 203, 220, 42, 180, 46, 213, 250, 199, 76, 98, 129, 52, 94, 186, 216, 167, 232, 57, 117, 53, 22, 198, 133, 197, 238, 177, 218, 72, 194, 150, 64, 103, 26, 245, 241, 193, 125, 27, 202, 214, 121, 186, 114, 190, 75, 217, 246, 143, 22, 155, 77, 206, 76, 208, 117, 26, 35, 36, 235, 124, 86, 190, 46, 57, 159, 149, 207, 87, 207, 178, 109, 53, 211, 218, 225, 226, 179, 233, 96, 15, 149, 190, 101, 235, 23, 203, 7, 58, 41, 91, 23, 31, 157, 203, 210, 127, 186, 199, 68, 153, 54, 41, 35, 118, 108, 164, 108, 189, 203, 182, 81, 153, 177, 84, 134, 253, 169, 222, 121, 213, 239, 43, 101, 196, 196, 68, 107, 144, 250, 172, 8, 140, 68, 100, 142, 93, 190, 118, 51, 165, 133, 103, 233, 137, 185, 233, 254, 172, 102, 63, 221, 133, 86, 189, 127, 109, 207, 70, 99, 28, 110, 35, 154, 55, 83, 55, 110, 147, 54, 41, 143, 225, 250, 156, 236, 107, 107, 217, 199, 137, 169, 44, 142, 16, 221, 177, 171, 15, 123, 215, 26, 252, 43, 206, 83, 81, 149, 193, 68, 248, 183, 195, 253, 219, 81, 248, 79, 200, 44, 158, 71, 72, 135, 231, 103, 254, 149, 235, 83, 73, 167, 57, 156, 54, 212, 38, 201, 191, 83, 249, 44, 253, 43, 226, 59, 100, 108, 177, 245, 239, 80, 91, 10, 246, 175, 156, 87, 222, 103, 194, 252, 43, 108, 47, 252, 43, 144, 69, 78, 167, 254, 165, 146, 53, 38, 235, 218, 99, 188, 198, 210, 191, 83, 227, 42, 233, 143, 245, 201, 12, 133, 36, 113, 237, 191, 194, 167, 218, 227, 130, 252, 107, 219, 127, 101, 68, 63, 18, 125, 74, 248, 88, 229, 223, 144, 251, 45, 181, 137, 28, 75, 174, 227, 179, 177, 142, 140, 88, 106, 206, 144, 241, 217, 213, 191, 163, 22, 227, 243, 168, 69, 255, 85, 201, 168, 102, 76, 136, 61, 62, 119, 147, 126, 191, 13, 153, 235, 49, 223, 138, 252, 54, 227, 179, 169, 47, 235, 238, 149, 98, 95, 78, 83, 229, 147, 211, 180, 233, 150, 243, 47, 89, 104, 95, 86, 141, 223, 226, 222, 60, 75, 234, 219, 140, 134, 101, 255, 86, 249, 95, 39, 121, 188, 151, 80, 137, 60, 159, 238, 213, 29, 50, 86, 231, 208, 159, 93, 253, 201, 250, 115, 179, 57, 12, 237, 83, 52, 93, 62, 110, 100, 244, 103, 122, 157, 41, 166, 168, 93, 232, 53, 46, 254, 205, 18, 27, 159, 207, 36, 255, 234, 242, 10, 17, 227, 181, 141, 127, 233, 177, 216, 183, 241, 175, 60, 246, 170, 100, 74, 215, 8, 254, 237, 118, 83, 124, 196, 213, 23, 190, 253, 139, 250, 64, 220, 47, 117, 48, 201, 26, 47, 109, 218, 155, 53, 94, 210, 152, 12, 157, 15, 153, 198, 74, 113, 79, 53, 218, 196, 113, 190, 107, 59, 39, 142, 230, 103, 151, 62, 73, 98, 67, 228, 179, 209, 131, 138, 170, 143, 233, 214, 47, 196, 57, 177, 21, 107, 25, 170, 245, 16, 109, 44, 56, 142, 167, 116, 125, 195, 85, 98, 251, 194, 151, 174, 193, 166, 58, 59, 83, 97, 215, 211, 126, 58, 171, 57, 184, 142, 196, 182, 141, 218, 32, 44, 77, 172, 41, 249, 172, 11, 153, 236, 41, 246, 109, 210, 109, 125, 147, 229, 47, 249, 60, 45, 223, 164, 139, 171, 253, 19, 158, 151, 61, 75, 211, 231, 105, 149, 253, 133, 111, 152, 200, 246, 103, 63, 19, 18, 227, 76, 79, 23, 199, 184, 87, 197, 80, 158, 180, 56, 186, 243, 214, 235, 78, 14, 113, 70, 227, 183, 203, 109, 40, 215, 203, 76, 82, 203, 136, 13, 235, 113, 50, 194, 88, 76, 197, 103, 13, 152, 174, 245, 178, 251, 51, 139, 147, 134, 78, 247, 73, 123, 122, 237, 119, 200, 159, 7, 162, 63, 152, 160, 107, 213, 170, 123, 185, 79, 236, 170, 164, 236, 49, 191, 135, 229, 252, 65, 23, 43, 170, 251, 42, 139, 157, 222, 220, 154, 61, 247, 79, 12, 142, 85, 83, 176, 186, 61, 231, 85, 116, 109, 66, 213, 6, 89, 31, 99, 204, 142, 164, 121, 198, 107, 41, 34, 143, 184, 86, 164, 83, 104, 89, 153, 117, 217, 48, 57, 108, 75, 85, 189, 140, 22, 175, 191, 167, 135, 165, 253, 196, 181, 242, 123, 152, 172, 24, 87, 73, 87, 218, 15, 69, 85, 142, 77, 249, 73, 224, 245, 161, 245, 231, 221, 62, 159, 114, 139, 128, 74, 222, 117, 248, 158, 207, 171, 189, 178, 248, 172, 99, 244, 174, 147, 210, 108, 158, 73, 98, 213, 175, 130, 214, 111, 211, 238, 188, 234, 119, 149, 24, 246, 103, 226, 93, 127, 81, 247, 104, 155, 117, 149, 8, 107, 4, 194, 247, 166, 245, 24, 25, 250, 172, 49, 181, 38, 195, 239, 253, 189, 253, 217, 41, 34, 93, 85, 6, 155, 35, 116, 44, 238, 75, 98, 46, 58, 101, 255, 192, 117, 207, 208, 49, 160, 168, 241, 59, 70, 253, 177, 245, 103, 244, 236, 91, 84, 31, 80, 244, 99, 155, 103, 25, 121, 238, 79, 69, 164, 247, 222, 81, 27, 158, 25, 76, 107, 30, 42, 123, 90, 63, 99, 198, 180, 137, 199, 90, 160, 235, 253, 110, 200, 126, 30, 62, 163, 162, 123, 158, 160, 107, 71, 186, 103, 12, 149, 127, 101, 196, 188, 87, 171, 191, 195, 243, 135, 210, 207, 57, 198, 183, 170, 237, 81, 234, 215, 197, 133, 56, 239, 242, 28, 61, 225, 183, 190, 160, 91, 39, 84, 173, 17, 54, 106, 131, 215, 210, 216, 9, 29, 255, 67, 175, 167, 239, 194, 196, 61, 207, 251, 254, 155, 67, 12, 201, 182, 203, 242, 135, 156, 62, 94, 55, 151, 31, 210, 159, 92, 97, 247, 253, 86, 210, 95, 139, 82, 225, 122, 31, 180, 246, 91, 158, 247, 50, 197, 125, 70, 229, 11, 214, 215, 6, 214, 78, 70, 236, 237, 205, 230, 77, 202, 58, 53, 99, 131, 109, 220, 100, 221, 31, 101, 25, 154, 63, 104, 108, 97, 138, 73, 211, 152, 68, 215, 45, 91, 53, 115, 221, 46, 247, 233, 129, 24, 39, 250, 134, 206, 159, 178, 100, 234, 219, 219, 49, 62, 255, 29, 243, 96, 174, 132, 42, 77, 140, 99, 99, 131, 125, 91, 148, 97, 235, 207, 88, 184, 214, 23, 122, 158, 230, 51, 109, 77, 215, 132, 180, 51, 143, 178, 109, 235, 179, 173, 195, 75, 151, 81, 208, 232, 31, 199, 184, 23, 248, 232, 49, 213, 110, 139, 103, 76, 37, 205, 196, 249, 55, 173, 190, 190, 163, 18, 211, 231, 62, 18, 90, 87, 12, 253, 99, 180, 195, 86, 92, 117, 170, 119, 226, 182, 81, 27, 183, 57, 83, 84, 61, 42, 95, 250, 92, 155, 87, 172, 196, 142, 185, 60, 237, 230, 83, 135, 141, 174, 190, 82, 100, 204, 248, 232, 80, 196, 249, 162, 37, 111, 155, 103, 181, 189, 104, 253, 99, 148, 17, 59, 22, 243, 142, 233, 188, 218, 90, 100, 125, 182, 229, 229, 41, 54, 122, 210, 247, 32, 242, 247, 4, 242, 179, 42, 253, 93, 83, 158, 235, 127, 170, 119, 115, 58, 123, 133, 250, 62, 215, 117, 14, 151, 53, 73, 213, 121, 221, 154, 133, 106, 13, 97, 164, 255, 155, 19, 151, 248, 138, 246, 59, 224, 28, 215, 138, 92, 214, 89, 109, 126, 75, 68, 227, 38, 120, 61, 212, 103, 125, 194, 102, 205, 130, 147, 21, 207, 165, 188, 119, 177, 137, 103, 5, 173, 90, 159, 41, 251, 231, 60, 126, 152, 214, 209, 92, 223, 127, 119, 73, 127, 49, 174, 161, 234, 236, 18, 217, 230, 166, 53, 75, 186, 150, 56, 240, 126, 168, 238, 127, 63, 11, 233, 47, 38, 127, 139, 113, 222, 170, 221, 1, 241, 222, 235, 47, 101, 172, 119, 91, 198, 169, 188, 254, 171, 122, 255, 148, 37, 33, 223, 136, 38, 30, 254, 29, 154, 79, 4, 218, 70, 46, 67, 59, 111, 25, 73, 223, 115, 54, 20, 223, 39, 198, 246, 141, 238, 221, 172, 234, 61, 30, 211, 77, 108, 243, 22, 211, 124, 206, 166, 173, 170, 54, 169, 202, 20, 223, 180, 134, 232, 101, 51, 39, 182, 61, 239, 83, 119, 55, 194, 121, 215, 241, 50, 84, 95, 27, 188, 99, 157, 198, 137, 237, 248, 151, 49, 134, 100, 221, 127, 153, 190, 226, 155, 92, 33, 161, 243, 47, 23, 31, 196, 242, 109, 168, 207, 77, 250, 184, 182, 49, 182, 254, 166, 244, 68, 147, 183, 72, 29, 125, 109, 173, 146, 50, 234, 13, 109, 111, 17, 254, 14, 185, 222, 166, 189, 177, 219, 17, 98, 203, 44, 187, 230, 113, 62, 203, 62, 182, 118, 178, 21, 223, 120, 202, 58, 31, 18, 47, 161, 101, 219, 232, 239, 122, 189, 141, 221, 242, 138, 197, 24, 109, 241, 41, 67, 213, 230, 50, 165, 8, 155, 103, 197, 102, 30, 49, 145, 151, 132, 212, 19, 67, 47, 155, 254, 101, 202, 151, 135, 255, 116, 109, 44, 35, 126, 92, 252, 83, 68, 28, 21, 97, 243, 60, 234, 114, 209, 169, 140, 250, 203, 106, 127, 86, 157, 236, 185, 109, 84, 250, 150, 152, 109, 233, 223, 225, 162, 34, 242, 201, 127, 199, 110, 96, 13, 205, 112, 28, 27, 89, 26, 100, 13, 121, 168, 237, 19, 254, 207, 145, 58, 251, 197, 236, 195, 62, 117, 217, 214, 235, 91, 102, 140, 54, 186, 74, 104, 27, 125, 203, 142, 85, 71, 104, 253, 121, 248, 64, 64, 191, 207, 23, 127, 23, 105, 218, 189, 211, 179, 88, 11, 151, 105, 100, 188, 183, 144, 197, 250, 61, 65, 224, 120, 97, 146, 222, 119, 232, 62, 127, 107, 57, 178, 125, 179, 254, 46, 50, 123, 103, 74, 223, 201, 229, 53, 254, 217, 148, 97, 180, 87, 1, 241, 152, 21, 155, 38, 91, 138, 223, 6, 9, 223, 251, 252, 46, 196, 57, 198, 10, 236, 183, 114, 140, 216, 72, 148, 191, 53, 158, 163, 127, 93, 255, 102, 56, 123, 127, 106, 122, 47, 63, 133, 244, 183, 39, 166, 252, 229, 25, 23, 212, 230, 177, 198, 54, 159, 49, 46, 150, 175, 122, 101, 229, 112, 191, 96, 113, 198, 124, 36, 222, 207, 103, 141, 63, 38, 253, 133, 142, 42, 93, 125, 245, 247, 185, 222, 212, 215, 202, 238, 67, 46, 136, 223, 41, 101, 222, 143, 164, 119, 68, 3, 237, 13, 253, 94, 199, 243, 239, 181, 210, 124, 67, 182, 143, 236, 123, 122, 94, 151, 87, 72, 151, 252, 255, 3, 29, 66, 228, 191, 143, 79, 199, 180, 169, 242, 244, 166, 211, 250, 132, 246, 43, 97, 19, 185, 110, 211, 183, 79, 84, 178, 206, 103, 9, 213, 161, 140, 251, 140, 77, 124, 235, 206, 211, 184, 20, 115, 50, 249, 94, 147, 37, 161, 253, 35, 175, 182, 11, 145, 207, 171, 218, 28, 243, 25, 74, 70, 246, 185, 172, 95, 12, 255, 187, 66, 219, 175, 250, 6, 195, 69, 138, 244, 63, 253, 237, 105, 86, 204, 143, 215, 213, 107, 54, 177, 245, 15, 149, 162, 238, 133, 3, 117, 90, 124, 67, 145, 213, 175, 92, 237, 151, 53, 207, 180, 125, 134, 115, 125, 62, 148, 197, 247, 121, 209, 247, 121, 201, 183, 126, 157, 62, 62, 207, 200, 62, 245, 135, 232, 234, 98, 87, 185, 158, 16, 201, 91, 207, 34, 36, 166, 45, 99, 180, 53, 52, 62, 105, 186, 156, 199, 116, 141, 79, 27, 92, 174, 205, 210, 53, 164, 111, 248, 232, 31, 35, 94, 109, 245, 160, 182, 178, 105, 115, 72, 123, 66, 36, 15, 219, 134, 138, 169, 204, 24, 62, 116, 209, 33, 73, 134, 235, 119, 209, 67, 149, 87, 46, 199, 164, 131, 46, 77, 181, 85, 213, 105, 210, 223, 166, 60, 213, 245, 46, 177, 98, 123, 141, 174, 45, 121, 245, 153, 172, 152, 176, 169, 39, 207, 250, 93, 36, 70, 57, 161, 250, 231, 209, 254, 24, 182, 45, 194, 23, 121, 215, 27, 234, 223, 80, 125, 66, 109, 20, 106, 243, 60, 226, 168, 104, 41, 163, 78, 157, 252, 31];\nvar trieData$1 = {\n\ttype: type$1,\n\tdata: data$1\n};\n\nvar _class$6;\nvar _temp$2;\n\nvar decompositions = useData.decompositions;\n\nvar trie$1 = new UnicodeTrie(new Uint8Array(trieData$1.data));\nvar stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nvar IndicShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {\n  inherits(IndicShaper, _DefaultShaper);\n\n  function IndicShaper() {\n    classCallCheck(this, IndicShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  IndicShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    plan.addStage(['locl', 'ccmp']);\n\n    plan.addStage(initialReordering);\n\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n\n    plan.addStage(finalReordering);\n\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  };\n\n  IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        var decomposed = d.map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n\n  return IndicShaper;\n}(DefaultShaper), _class$6.zeroMarkWidths = 'NONE', _temp$2);\nfunction indicCategory(glyph) {\n  return trie$1.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);\n}\n\nvar IndicInfo = function IndicInfo(category, position, syllableType, syllable) {\n  classCallCheck(this, IndicInfo);\n\n  this.category = category;\n  this.position = position;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\n\nfunction setupSyllables(font, glyphs) {\n  var syllable = 0;\n  var last = 0;\n  for (var _iterator = stateMachine.match(glyphs.map(indicCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        start = _ref2[0],\n        end = _ref2[1],\n        tags$$1 = _ref2[2];\n\n    if (start > last) {\n      ++syllable;\n      for (var _i2 = last; _i2 < start; _i2++) {\n        glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable;\n\n    // Create shaper info\n    for (var _i3 = start; _i3 <= end; _i3++) {\n      glyphs[_i3].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i3]), indicPosition(glyphs[_i3]), tags$$1[0], syllable);\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n    for (var i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _glyph$features;\n\n    var _ref3;\n\n    if (_isArray2) {\n      if (_i4 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i4++];\n    } else {\n      _i4 = _iterator2.next();\n      if (_i4.done) break;\n      _ref3 = _i4.value;\n    }\n\n    var glyph = _ref3;\n\n    glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);\n  }\n\n  var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  var glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  var virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    var info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    var _glyphs$start$shaperI = glyphs[start].shaperInfo,\n        category = _glyphs$start$shaperI.category,\n        syllableType = _glyphs$start$shaperI.syllableType;\n\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n\n      // Insert after possible Repha.\n      var _i5 = start;\n      while (_i5 < end && glyphs[_i5].shaperInfo.category === CATEGORIES.Repha) {\n        _i5++;\n      }\n\n      glyphs.splice(_i5++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    var base = end;\n    var limit = start;\n    var hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          var _i6 = end;\n          var seenBelow = false;\n\n          do {\n            var _info = glyphs[--_i6].shaperInfo;\n\n            // until a consonant is found\n            if (isConsonant(glyphs[_i6])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {\n                base = _i6;\n                break;\n              }\n\n              // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n              if (_info.position === POSITIONS.Below_C) {\n                seenBelow = true;\n              }\n\n              base = _i6;\n            } else if (start < _i6 && _info.category === CATEGORIES.ZWJ && glyphs[_i6 - 1].shaperInfo.category === CATEGORIES.H) {\n              // A ZWJ after a Halant stops the base search, and requests an explicit\n              // half form.\n              // A ZWJ before a Halant, requests a subjoined form instead, and hence\n              // search continues.  This is particularly important for Bengali\n              // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n              break;\n            }\n          } while (_i6 > limit);\n          break;\n        }\n\n      case 'First':\n        {\n          // The first consonant is always the base.\n          base = start;\n\n          // Mark all subsequent consonants as below.\n          for (var _i7 = base + 1; _i7 < end; _i7++) {\n            if (isConsonant(glyphs[_i7])) {\n              glyphs[_i7].shaperInfo.position = POSITIONS.Below_C;\n            }\n          }\n        }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (var _i8 = start; _i8 < base; _i8++) {\n      var _info2 = glyphs[_i8].shaperInfo;\n      _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (var _i9 = base + 1; _i9 < end; _i9++) {\n      if (glyphs[_i9].shaperInfo.category === CATEGORIES.M) {\n        for (var j = _i9 + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (var _i10 = base + 1; _i10 < end; _i10++) {\n        if (glyphs[_i10].shaperInfo.category === CATEGORIES.H) {\n          var _j = void 0;\n          for (_j = end - 1; _j > _i10; _j--) {\n            if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {\n              break;\n            }\n          }\n\n          if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i10) {\n            // Move Halant to after last consonant.\n            var t = glyphs[_i10];\n            glyphs.splice.apply(glyphs, [_i10, 0].concat(glyphs.splice(_i10 + 1, _j - _i10)));\n            glyphs[_j] = t;\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    var lastPos = POSITIONS.Start;\n    for (var _i11 = start; _i11 < end; _i11++) {\n      var _info3 = glyphs[_i11].shaperInfo;\n      if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {\n        _info3.position = lastPos;\n        if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (var _j2 = _i11; _j2 > start; _j2--) {\n            if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              _info3.position = glyphs[_j2 - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (_info3.position !== POSITIONS.SMVD) {\n        lastPos = _info3.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    var last = base;\n    for (var _i12 = base + 1; _i12 < end; _i12++) {\n      if (isConsonant(glyphs[_i12])) {\n        for (var _j3 = last + 1; _j3 < _i12; _j3++) {\n          if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[_j3].shaperInfo.position = glyphs[_i12].shaperInfo.position;\n          }\n        }\n        last = _i12;\n      } else if (glyphs[_i12].shaperInfo.category === CATEGORIES.M) {\n        last = _i12;\n      }\n    }\n\n    var arr = glyphs.slice(start, end);\n    arr.sort(function (a, b) {\n      return a.shaperInfo.position - b.shaperInfo.position;\n    });\n    glyphs.splice.apply(glyphs, [start, arr.length].concat(arr));\n\n    // Find base again\n    for (var _i13 = start; _i13 < end; _i13++) {\n      if (glyphs[_i13].shaperInfo.position === POSITIONS.Base_C) {\n        base = _i13;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (var _i14 = start; _i14 < end && glyphs[_i14].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i14++) {\n      glyphs[_i14].features.rphf = true;\n    }\n\n    // Pre-base\n    var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (var _i15 = start; _i15 < base; _i15++) {\n      glyphs[_i15].features.half = true;\n      if (blwf) {\n        glyphs[_i15].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (var _i16 = base + 1; _i16 < end; _i16++) {\n      glyphs[_i16].features.abvf = true;\n      glyphs[_i16].features.pstf = true;\n      glyphs[_i16].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (var _i17 = start; _i17 + 1 < base; _i17++) {\n        if (glyphs[_i17].shaperInfo.category === CATEGORIES.Ra && glyphs[_i17 + 1].shaperInfo.category === CATEGORIES.H && (_i17 + 1 === base || glyphs[_i17 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n          glyphs[_i17].features.blwf = true;\n          glyphs[_i17 + 1].features.blwf = true;\n        }\n      }\n    }\n\n    var prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (var _i18 = base + 1; _i18 + prefLen - 1 < end; _i18++) {\n        var _g2 = [glyphs[_i18].copy(), glyphs[_i18 + 1].copy()];\n        if (wouldSubstitute(_g2, 'pref')) {\n          for (var _j4 = 0; _j4 < prefLen; _j4++) {\n            glyphs[_i18++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; _i18 < end; _i18++) {\n              glyphs[_i18].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (var _i19 = start + 1; _i19 < end; _i19++) {\n      if (isJoiner(glyphs[_i19])) {\n        var nonJoiner = glyphs[_i19].shaperInfo.category === CATEGORIES.ZWNJ;\n        var _j5 = _i19;\n\n        do {\n          _j5--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[_j5].features.half;\n          }\n        } while (_j5 > start && !isConsonant(glyphs[_j5]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    var tryPref = !!features.pref;\n\n    // Find base again\n    var base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (var i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (var _i20 = base + 1; _i20 < end; _i20++) {\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n\n            if (_i20 === end || !isHalantOrCoeng(glyphs[_i20])) {\n              break;\n            }\n\n            _i20++; // Skip halant.\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n\n            if (_i20 < end && isConsonant(glyphs[_i20]) && glyphs[_i20].shaperInfo.position === POSITIONS.Below_C) {\n              base = _i20;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) {\n      // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      var newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (var _i21 = newPos; _i21 > start; _i21--) {\n          if (glyphs[_i21 - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            var oldPos = _i21 - 1;\n            if (oldPos < base && base <= newPos) {\n              // Shouldn't actually happen.\n              base--;\n            }\n\n            var tmp = glyphs[oldPos];\n            glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));\n            glyphs[newPos] = tmp;\n\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      var newRephPos = void 0;\n      var rephPos = indicConfig.rephPos;\n      var found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (var _i22 = base + 1; _i22 < newRephPos; _i22++) {\n            if (glyphs[_i22].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      var reph = glyphs[start];\n      glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (var _i23 = base + 1; _i23 < end; _i23++) {\n        if (glyphs[_i23].features.pref) {\n          // 1. Only reorder a glyph produced by substitution during application\n          //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n          //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[_i23].isLigated && !glyphs[_i23].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            var _newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                _newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                var _oldPos2 = _i23;\n                for (var j = base + 1; j < _oldPos2; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    _newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (_newPos < end && isJoiner(glyphs[_newPos])) {\n                _newPos++;\n              }\n            }\n\n            var _oldPos = _i23;\n            var _tmp = glyphs[_oldPos];\n            glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));\n            glyphs[_newPos] = _tmp;\n\n            if (_newPos <= base && base < _oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\n\nvar type$2 = \"Buffer\";\nvar data$2 = [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 169, 208, 1, 81, 12, 174, 243, 237, 156, 127, 168, 29, 71, 21, 199, 231, 221, 247, 222, 253, 245, 110, 94, 242, 108, 126, 244, 217, 24, 155, 182, 20, 35, 98, 173, 138, 105, 21, 12, 109, 197, 90, 5, 83, 21, 141, 69, 169, 173, 149, 38, 42, 216, 7, 66, 26, 80, 82, 193, 104, 161, 137, 86, 37, 226, 175, 170, 49, 40, 36, 129, 162, 45, 20, 76, 171, 96, 219, 32, 54, 234, 31, 166, 138, 86, 13, 180, 193, 254, 209, 98, 181, 85, 12, 175, 180, 20, 191, 227, 206, 225, 158, 119, 50, 51, 59, 179, 187, 179, 123, 159, 185, 7, 62, 204, 238, 236, 236, 204, 153, 51, 115, 118, 103, 102, 127, 60, 223, 82, 106, 98, 82, 169, 30, 152, 3, 27, 193, 38, 112, 41, 184, 220, 196, 205, 87, 16, 190, 21, 188, 29, 188, 27, 124, 192, 147, 238, 122, 112, 179, 37, 126, 7, 88, 0, 59, 193, 110, 240, 69, 240, 101, 176, 31, 220, 101, 248, 33, 75, 127, 8, 252, 4, 252, 20, 252, 194, 146, 223, 207, 192, 49, 240, 60, 234, 255, 107, 163, 219, 156, 65, 199, 81, 248, 40, 194, 63, 128, 147, 224, 73, 240, 12, 248, 55, 120, 1, 76, 78, 41, 53, 3, 230, 192, 60, 216, 8, 54, 129, 75, 192, 102, 176, 101, 42, 75, 127, 53, 194, 173, 96, 27, 248, 8, 216, 14, 110, 1, 59, 193, 110, 176, 7, 236, 3, 251, 193, 93, 224, 32, 56, 2, 238, 53, 251, 247, 131, 135, 192, 113, 112, 2, 60, 6, 158, 0, 79, 129, 231, 192, 105, 240, 210, 84, 166, 115, 123, 90, 169, 89, 176, 118, 58, 219, 223, 128, 240, 98, 240, 90, 240, 6, 240, 22, 112, 37, 120, 167, 57, 254, 94, 132, 31, 4, 55, 128, 29, 96, 97, 58, 171, 183, 102, 23, 219, 174, 130, 207, 33, 191, 61, 21, 231, 201, 217, 43, 242, 254, 42, 246, 191, 5, 126, 0, 14, 131, 123, 166, 179, 250, 30, 5, 15, 130, 71, 192, 239, 114, 244, 121, 12, 199, 159, 0, 79, 129, 127, 152, 243, 79, 131, 23, 193, 84, 91, 169, 65, 59, 139, 91, 141, 112, 61, 184, 8, 188, 166, 61, 236, 75, 111, 196, 246, 102, 176, 5, 92, 13, 182, 130, 109, 230, 156, 235, 77, 120, 51, 194, 79, 129, 237, 172, 15, 238, 196, 254, 238, 118, 58, 91, 17, 95, 64, 25, 95, 2, 95, 7, 223, 5, 63, 2, 119, 179, 114, 239, 195, 246, 207, 193, 49, 19, 119, 28, 225, 9, 240, 71, 112, 50, 64, 191, 39, 145, 230, 153, 118, 102, 171, 103, 193, 34, 56, 4, 84, 71, 169, 110, 39, 139, 95, 129, 112, 208, 201, 210, 175, 52, 113, 154, 181, 108, 155, 179, 1, 241, 23, 131, 87, 139, 227, 175, 119, 164, 39, 46, 235, 100, 101, 79, 49, 189, 125, 233, 121, 186, 162, 232, 60, 222, 132, 114, 183, 128, 171, 192, 53, 96, 43, 216, 6, 62, 220, 241, 159, 123, 147, 56, 62, 152, 60, 51, 205, 39, 145, 230, 211, 224, 51, 157, 172, 223, 124, 158, 217, 224, 164, 167, 94, 119, 32, 221, 87, 192, 55, 193, 1, 135, 30, 54, 255, 63, 212, 25, 214, 235, 199, 157, 172, 175, 220, 135, 240, 1, 83, 174, 222, 126, 216, 108, 223, 157, 99, 219, 42, 236, 59, 102, 204, 217, 200, 216, 127, 198, 140, 25, 51, 102, 204, 152, 49, 99, 198, 196, 50, 103, 153, 79, 54, 205, 225, 246, 112, 77, 96, 123, 128, 126, 191, 98, 115, 215, 223, 136, 121, 236, 39, 60, 231, 83, 221, 127, 143, 115, 254, 218, 201, 214, 97, 254, 134, 240, 239, 224, 159, 224, 52, 120, 201, 196, 183, 187, 208, 167, 155, 165, 95, 131, 112, 30, 108, 4, 155, 186, 217, 241, 75, 17, 94, 14, 174, 48, 251, 215, 32, 124, 15, 184, 174, 235, 46, 95, 167, 187, 209, 115, 124, 204, 152, 49, 99, 198, 164, 101, 110, 178, 89, 154, 174, 255, 152, 49, 99, 210, 144, 218, 191, 119, 96, 252, 184, 208, 205, 158, 11, 221, 138, 240, 54, 203, 120, 242, 246, 110, 246, 108, 95, 111, 223, 41, 142, 127, 99, 4, 198, 159, 31, 27, 100, 236, 1, 199, 192, 219, 2, 88, 4, 151, 173, 88, 26, 183, 139, 237, 31, 192, 246, 159, 192, 185, 179, 74, 93, 11, 22, 102, 77, 60, 194, 199, 103, 135, 233, 158, 197, 246, 1, 216, 224, 113, 112, 126, 79, 169, 15, 129, 239, 128, 27, 176, 255, 189, 118, 22, 254, 210, 236, 115, 218, 253, 51, 227, 36, 87, 34, 205, 71, 89, 186, 131, 216, 62, 101, 246, 47, 152, 193, 49, 112, 112, 166, 249, 251, 79, 211, 228, 249, 203, 247, 181, 237, 76, 63, 61, 130, 240, 30, 112, 180, 155, 205, 19, 31, 236, 198, 223, 79, 247, 154, 52, 131, 156, 244, 182, 252, 30, 41, 80, 158, 43, 95, 121, 254, 111, 145, 247, 163, 221, 165, 233, 72, 223, 189, 158, 242, 254, 130, 115, 78, 129, 167, 187, 195, 186, 233, 116, 207, 97, 255, 63, 38, 191, 23, 88, 190, 147, 61, 119, 253, 108, 249, 199, 182, 101, 108, 251, 207, 64, 159, 21, 96, 13, 88, 15, 46, 2, 175, 2, 15, 152, 252, 94, 135, 237, 205, 96, 11, 184, 202, 28, 127, 23, 120, 159, 241, 215, 155, 192, 142, 222, 48, 191, 5, 108, 239, 2, 159, 5, 123, 192, 62, 240, 53, 240, 109, 112, 176, 151, 175, 143, 126, 159, 230, 8, 210, 221, 235, 72, 171, 231, 237, 247, 227, 216, 67, 189, 225, 254, 113, 108, 159, 96, 251, 127, 238, 101, 239, 150, 232, 253, 83, 216, 126, 218, 83, 110, 81, 91, 219, 242, 104, 218, 151, 99, 124, 189, 46, 92, 229, 255, 171, 23, 231, 167, 203, 217, 86, 77, 151, 191, 216, 91, 154, 239, 139, 198, 246, 45, 220, 15, 251, 253, 102, 108, 62, 138, 109, 62, 74, 253, 109, 208, 175, 215, 38, 190, 119, 132, 238, 48, 239, 19, 173, 238, 103, 225, 121, 8, 47, 4, 155, 204, 254, 37, 253, 97, 218, 205, 125, 127, 254, 189, 142, 255, 62, 220, 20, 121, 239, 73, 133, 188, 71, 245, 102, 211, 102, 87, 32, 124, 71, 205, 237, 87, 117, 255, 91, 110, 126, 233, 211, 61, 164, 14, 186, 13, 175, 101, 253, 88, 191, 187, 247, 126, 236, 95, 215, 207, 250, 255, 97, 246, 126, 163, 78, 183, 200, 222, 49, 189, 17, 251, 31, 55, 113, 183, 228, 244, 127, 27, 139, 145, 125, 141, 222, 49, 60, 29, 144, 86, 191, 11, 120, 107, 127, 105, 28, 127, 47, 241, 97, 51, 166, 166, 186, 223, 102, 194, 219, 17, 238, 235, 12, 245, 191, 83, 212, 107, 191, 217, 63, 106, 25, 147, 47, 71, 22, 91, 19, 255, 99, 20, 100, 130, 209, 18, 251, 60, 13, 133, 147, 236, 248, 84, 32, 50, 63, 229, 136, 75, 45, 163, 97, 241, 177, 144, 80, 95, 106, 89, 160, 182, 106, 89, 206, 107, 137, 112, 218, 64, 18, 210, 183, 82, 247, 133, 201, 196, 249, 87, 45, 237, 166, 21, 40, 33, 33, 109, 121, 54, 249, 190, 205, 103, 206, 38, 153, 112, 48, 10, 34, 245, 224, 215, 188, 229, 46, 182, 49, 131, 220, 94, 46, 82, 180, 207, 216, 198, 82, 69, 218, 87, 218, 111, 57, 217, 176, 46, 191, 11, 205, 59, 198, 246, 85, 251, 33, 111, 123, 215, 117, 41, 143, 255, 119, 113, 205, 59, 202, 74, 81, 123, 147, 14, 29, 6, 166, 158, 193, 243, 157, 170, 233, 1, 76, 129, 213, 140, 217, 215, 219, 3, 19, 174, 16, 244, 4, 125, 193, 44, 59, 151, 234, 184, 146, 217, 172, 199, 242, 10, 213, 143, 210, 23, 153, 23, 170, 18, 118, 33, 253, 187, 134, 144, 188, 148, 72, 39, 247, 139, 232, 16, 114, 156, 139, 75, 167, 144, 246, 37, 25, 24, 228, 190, 110, 223, 16, 31, 234, 91, 226, 92, 117, 146, 101, 199, 218, 40, 239, 254, 231, 59, 206, 253, 207, 87, 182, 175, 46, 69, 116, 142, 109, 223, 188, 109, 45, 51, 38, 180, 181, 175, 20, 242, 95, 185, 63, 107, 73, 235, 147, 144, 254, 152, 119, 142, 11, 221, 46, 171, 84, 54, 215, 165, 249, 238, 92, 164, 126, 161, 237, 235, 107, 147, 24, 157, 171, 106, 223, 162, 254, 75, 109, 202, 175, 209, 74, 45, 189, 62, 87, 37, 101, 253, 151, 198, 174, 121, 101, 228, 149, 223, 132, 253, 233, 222, 87, 228, 250, 153, 39, 210, 55, 101, 125, 165, 158, 69, 237, 223, 18, 245, 43, 42, 218, 191, 242, 238, 181, 182, 122, 184, 108, 110, 75, 171, 44, 233, 93, 233, 92, 229, 216, 226, 67, 251, 16, 23, 242, 37, 62, 254, 225, 50, 80, 75, 219, 159, 239, 135, 250, 159, 237, 254, 233, 146, 34, 245, 176, 173, 137, 230, 173, 21, 240, 177, 80, 204, 120, 40, 198, 31, 203, 250, 115, 172, 29, 244, 190, 111, 60, 171, 212, 153, 215, 82, 190, 159, 215, 158, 52, 222, 181, 217, 65, 74, 89, 127, 46, 35, 212, 230, 69, 198, 187, 77, 181, 175, 43, 45, 137, 188, 94, 167, 104, 95, 155, 255, 75, 145, 186, 150, 105, 223, 151, 25, 138, 72, 89, 191, 41, 226, 99, 100, 127, 9, 183, 65, 222, 245, 242, 156, 128, 186, 133, 180, 65, 29, 254, 37, 215, 26, 108, 235, 14, 49, 254, 85, 68, 183, 20, 109, 25, 147, 46, 68, 15, 46, 54, 31, 227, 125, 133, 124, 145, 218, 108, 5, 75, 51, 112, 224, 235, 15, 177, 54, 37, 61, 138, 172, 29, 213, 233, 115, 33, 109, 211, 99, 113, 114, 45, 199, 54, 142, 37, 105, 41, 127, 222, 250, 252, 142, 96, 149, 9, 245, 177, 178, 207, 243, 165, 61, 21, 11, 243, 226, 93, 18, 219, 207, 229, 113, 101, 9, 109, 186, 196, 218, 95, 153, 253, 57, 71, 190, 46, 63, 146, 246, 87, 44, 204, 171, 155, 45, 79, 91, 188, 124, 134, 94, 148, 22, 11, 229, 152, 211, 53, 38, 173, 218, 39, 116, 158, 211, 34, 92, 165, 220, 18, 234, 99, 169, 253, 152, 11, 95, 147, 117, 173, 209, 74, 104, 140, 199, 247, 59, 106, 184, 198, 234, 171, 239, 234, 8, 84, 100, 250, 20, 104, 201, 155, 235, 76, 123, 142, 241, 243, 93, 253, 216, 230, 19, 54, 73, 221, 55, 98, 176, 221, 91, 53, 3, 101, 239, 47, 122, 13, 95, 247, 153, 89, 19, 183, 6, 172, 85, 217, 53, 106, 46, 178, 108, 105, 67, 122, 79, 39, 79, 87, 215, 115, 131, 57, 181, 84, 143, 190, 26, 142, 177, 100, 30, 93, 11, 60, 47, 89, 247, 34, 182, 157, 83, 195, 177, 9, 229, 99, 43, 183, 107, 236, 58, 101, 209, 195, 7, 157, 75, 237, 215, 196, 243, 125, 91, 31, 111, 250, 89, 99, 158, 159, 87, 97, 167, 84, 245, 72, 97, 163, 162, 247, 23, 25, 39, 199, 38, 41, 203, 183, 193, 203, 143, 177, 81, 213, 229, 199, 74, 21, 246, 87, 53, 151, 159, 167, 155, 22, 126, 223, 176, 205, 29, 92, 115, 50, 130, 198, 31, 125, 53, 28, 123, 232, 123, 240, 58, 149, 141, 191, 166, 25, 180, 6, 163, 183, 165, 143, 200, 251, 48, 181, 85, 108, 253, 83, 137, 239, 26, 88, 199, 117, 81, 223, 87, 171, 238, 3, 49, 54, 229, 125, 67, 142, 55, 8, 57, 86, 227, 114, 174, 97, 37, 219, 150, 204, 155, 124, 166, 45, 231, 203, 107, 125, 236, 251, 3, 85, 251, 77, 217, 190, 87, 180, 220, 162, 231, 75, 248, 186, 85, 25, 253, 164, 132, 222, 183, 83, 147, 178, 15, 144, 31, 208, 218, 20, 191, 78, 165, 236, 151, 52, 70, 215, 190, 178, 142, 49, 47, 208, 50, 203, 116, 115, 249, 43, 159, 99, 146, 95, 219, 174, 241, 114, 110, 201, 225, 215, 119, 146, 233, 136, 58, 185, 164, 236, 249, 121, 227, 214, 212, 99, 90, 110, 35, 221, 70, 117, 191, 19, 166, 239, 189, 182, 57, 161, 92, 87, 112, 181, 245, 108, 78, 254, 82, 66, 245, 202, 91, 71, 10, 225, 229, 224, 60, 19, 186, 136, 157, 59, 52, 213, 78, 28, 126, 255, 180, 93, 99, 200, 151, 103, 89, 186, 212, 253, 70, 174, 221, 83, 72, 215, 158, 144, 103, 102, 90, 100, 91, 187, 234, 46, 175, 65, 124, 189, 96, 157, 135, 245, 6, 125, 237, 161, 119, 167, 92, 101, 199, 92, 159, 185, 132, 92, 119, 66, 165, 236, 220, 154, 95, 95, 116, 250, 149, 14, 40, 141, 45, 190, 235, 57, 143, 191, 231, 73, 98, 139, 163, 113, 68, 71, 196, 119, 44, 113, 49, 242, 10, 176, 129, 237, 79, 58, 8, 181, 151, 92, 159, 138, 181, 119, 204, 122, 72, 72, 124, 108, 222, 242, 222, 21, 115, 158, 150, 87, 6, 212, 49, 70, 108, 99, 244, 208, 243, 228, 120, 161, 14, 105, 114, 44, 170, 28, 219, 174, 227, 161, 245, 9, 57, 47, 79, 39, 91, 104, 43, 39, 70, 175, 178, 245, 168, 114, 253, 51, 70, 31, 223, 24, 33, 180, 77, 93, 249, 132, 30, 47, 210, 183, 108, 229, 87, 93, 142, 111, 236, 20, 34, 177, 249, 165, 210, 183, 108, 154, 148, 246, 108, 162, 92, 87, 91, 142, 130, 14, 117, 233, 209, 132, 52, 173, 219, 40, 244, 229, 24, 61, 38, 19, 235, 236, 179, 187, 28, 115, 150, 181, 95, 21, 246, 175, 67, 242, 202, 170, 195, 254, 117, 181, 115, 19, 253, 42, 69, 191, 41, 42, 41, 250, 87, 213, 58, 22, 121, 246, 226, 154, 135, 185, 242, 204, 91, 47, 116, 157, 95, 180, 14, 69, 230, 114, 182, 244, 82, 175, 186, 165, 78, 255, 169, 203, 63, 235, 180, 135, 77, 228, 218, 104, 25, 61, 138, 156, 151, 66, 242, 234, 91, 85, 59, 184, 242, 169, 187, 31, 196, 74, 83, 253, 186, 108, 157, 71, 193, 247, 82, 60, 199, 161, 124, 99, 211, 242, 117, 98, 190, 110, 108, 123, 15, 173, 99, 137, 171, 18, 190, 134, 78, 107, 248, 69, 109, 31, 122, 94, 213, 117, 136, 93, 175, 181, 189, 15, 88, 39, 250, 25, 173, 237, 91, 25, 23, 161, 223, 18, 150, 121, 126, 193, 197, 246, 44, 183, 8, 121, 122, 186, 198, 38, 46, 125, 109, 239, 56, 243, 103, 18, 177, 245, 15, 65, 62, 23, 149, 207, 74, 249, 115, 38, 106, 215, 24, 209, 250, 54, 249, 44, 88, 66, 207, 248, 92, 239, 12, 211, 115, 96, 253, 60, 110, 141, 129, 254, 21, 17, 11, 73, 209, 254, 234, 107, 111, 122, 239, 34, 181, 189, 66, 203, 176, 189, 95, 193, 159, 177, 83, 156, 124, 223, 58, 68, 120, 57, 235, 2, 116, 161, 190, 106, 59, 63, 196, 254, 178, 29, 171, 182, 33, 23, 126, 63, 209, 199, 232, 121, 98, 149, 126, 210, 99, 33, 181, 131, 108, 55, 215, 121, 116, 127, 166, 176, 78, 41, 98, 127, 221, 215, 120, 223, 235, 43, 251, 125, 147, 190, 1, 8, 17, 158, 191, 237, 155, 121, 254, 94, 224, 132, 201, 187, 238, 239, 158, 203, 136, 28, 207, 156, 95, 146, 208, 57, 188, 79, 66, 230, 252, 182, 99, 121, 105, 93, 229, 248, 210, 209, 220, 44, 197, 248, 218, 166, 71, 75, 249, 109, 102, 91, 151, 137, 41, 67, 198, 41, 101, 183, 117, 93, 34, 251, 159, 109, 205, 35, 239, 156, 50, 229, 165, 154, 59, 21, 145, 81, 153, 159, 151, 153, 195, 74, 29, 203, 206, 133, 155, 92, 147, 160, 242, 235, 166, 42, 73, 221, 167, 83, 231, 31, 98, 15, 125, 239, 148, 223, 124, 251, 190, 53, 161, 116, 244, 46, 88, 200, 120, 173, 170, 177, 88, 200, 125, 95, 207, 81, 102, 212, 153, 239, 242, 105, 201, 123, 55, 53, 100, 28, 17, 51, 119, 9, 145, 212, 254, 89, 149, 158, 203, 89, 7, 95, 153, 124, 206, 64, 255, 85, 73, 217, 95, 109, 243, 4, 215, 55, 84, 190, 127, 110, 230, 205, 171, 165, 108, 44, 73, 29, 227, 240, 11, 84, 243, 255, 66, 181, 253, 87, 79, 190, 211, 172, 109, 175, 175, 47, 182, 113, 51, 95, 227, 106, 66, 127, 87, 223, 242, 125, 219, 77, 199, 232, 187, 110, 21, 81, 70, 89, 127, 174, 178, 190, 178, 77, 234, 46, 223, 247, 79, 70, 159, 31, 235, 115, 207, 81, 195, 127, 28, 217, 252, 121, 70, 13, 219, 138, 215, 47, 198, 47, 109, 115, 188, 170, 109, 64, 101, 133, 74, 149, 101, 22, 109, 51, 249, 156, 67, 254, 247, 64, 183, 209, 42, 67, 222, 245, 54, 68, 71, 91, 186, 178, 182, 136, 57, 223, 231, 31, 85, 247, 133, 24, 180, 173, 125, 215, 95, 98, 70, 185, 199, 167, 101, 251, 40, 191, 255, 140, 250, 255, 158, 125, 105, 73, 248, 255, 239, 228, 218, 155, 252, 6, 167, 204, 255, 74, 149, 10, 123, 190, 33, 253, 142, 36, 244, 89, 81, 204, 179, 36, 95, 249, 69, 9, 185, 198, 211, 61, 150, 127, 139, 68, 223, 188, 83, 223, 162, 49, 4, 181, 85, 232, 61, 171, 108, 255, 78, 85, 119, 18, 219, 119, 254, 178, 206, 33, 115, 168, 162, 72, 157, 203, 254, 87, 220, 102, 3, 249, 47, 26, 215, 61, 158, 210, 241, 250, 247, 148, 253, 190, 17, 42, 117, 182, 63, 255, 71, 84, 222, 53, 153, 218, 182, 42, 253, 203, 194, 69, 63, 43, 211, 207, 205, 46, 84, 249, 255, 60, 146, 117, 43, 171, 191, 92, 155, 46, 43, 169, 230, 208, 41, 231, 227, 77, 205, 243, 201, 230, 190, 181, 193, 170, 218, 165, 168, 200, 181, 244, 208, 53, 226, 186, 215, 79, 235, 88, 67, 15, 201, 191, 174, 58, 143, 226, 122, 180, 77, 108, 101, 52, 213, 159, 171, 170, 119, 136, 61, 99, 108, 79, 219, 117, 172, 63, 142, 98, 191, 43, 155, 71, 138, 190, 159, 194, 135, 83, 248, 97, 234, 114, 203, 232, 86, 84, 63, 223, 249, 85, 151, 95, 149, 254, 77, 151, 95, 101, 159, 138, 45, 191, 73, 249, 47];\nvar trieData$2 = {\n\ttype: type$2,\n\tdata: data$2\n};\n\nvar _class$7;\nvar _temp$3;\n\nvar categories$1 = useData.categories;\nvar decompositions$2 = useData.decompositions;\n\nvar trie$2 = new UnicodeTrie(new Uint8Array(trieData$2.data));\nvar stateMachine$1 = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nvar UniversalShaper = (_temp$3 = _class$7 = function (_DefaultShaper) {\n  inherits(UniversalShaper, _DefaultShaper);\n\n  function UniversalShaper() {\n    classCallCheck(this, UniversalShaper);\n    return possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  UniversalShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables$1);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  };\n\n  UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      if (decompositions$2[codepoint]) {\n        var decomposed = decompositions$2[codepoint].map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n\n  return UniversalShaper;\n}(DefaultShaper), _class$7.zeroMarkWidths = 'BEFORE_GPOS', _temp$3);\nfunction useCategory(glyph) {\n  return trie$2.get(glyph.codePoints[0]);\n}\n\nvar USEInfo = function USEInfo(category, syllableType, syllable) {\n  classCallCheck(this, USEInfo);\n\n  this.category = category;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\n\nfunction setupSyllables$1(font, glyphs) {\n  var syllable = 0;\n  for (var _iterator = stateMachine$1.match(glyphs.map(useCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        start = _ref2[0],\n        end = _ref2[1],\n        tags = _ref2[2];\n\n    ++syllable;\n\n    // Create shaper info\n    for (var i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (var _i2 = start; _i2 < start + limit; _i2++) {\n      glyphs[_i2].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref3;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref3 = _i3.value;\n    }\n\n    var glyph = _ref3;\n\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (var _iterator3 = glyphs, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray3) {\n      if (_i4 >= _iterator3.length) break;\n      _ref4 = _iterator3[_i4++];\n    } else {\n      _i4 = _iterator3.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var glyph = _ref4;\n\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (var _iterator4 = glyphs, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref5 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var glyph = _ref5;\n\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {\n    var i = void 0,\n        j = void 0;\n    var info = glyphs[start].shaperInfo;\n    var type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));\n      }\n    }\n  }\n}\n\nfunction nextSyllable$1(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n\nvar SHAPERS = {\n  arab: ArabicShaper, // Arabic\n  mong: ArabicShaper, // Mongolian\n  syrc: ArabicShaper, // Syriac\n  'nko ': ArabicShaper, // N'Ko\n  phag: ArabicShaper, // Phags Pa\n  mand: ArabicShaper, // Mandaic\n  mani: ArabicShaper, // Manichaean\n  phlp: ArabicShaper, // Psalter Pahlavi\n\n  hang: HangulShaper, // Hangul\n\n  bng2: IndicShaper, // Bengali\n  beng: IndicShaper, // Bengali\n  dev2: IndicShaper, // Devanagari\n  deva: IndicShaper, // Devanagari\n  gjr2: IndicShaper, // Gujarati\n  gujr: IndicShaper, // Gujarati\n  guru: IndicShaper, // Gurmukhi\n  gur2: IndicShaper, // Gurmukhi\n  knda: IndicShaper, // Kannada\n  knd2: IndicShaper, // Kannada\n  mlm2: IndicShaper, // Malayalam\n  mlym: IndicShaper, // Malayalam\n  ory2: IndicShaper, // Oriya\n  orya: IndicShaper, // Oriya\n  taml: IndicShaper, // Tamil\n  tml2: IndicShaper, // Tamil\n  telu: IndicShaper, // Telugu\n  tel2: IndicShaper, // Telugu\n  khmr: IndicShaper, // Khmer\n\n  bali: UniversalShaper, // Balinese\n  batk: UniversalShaper, // Batak\n  brah: UniversalShaper, // Brahmi\n  bugi: UniversalShaper, // Buginese\n  buhd: UniversalShaper, // Buhid\n  cakm: UniversalShaper, // Chakma\n  cham: UniversalShaper, // Cham\n  dupl: UniversalShaper, // Duployan\n  egyp: UniversalShaper, // Egyptian Hieroglyphs\n  gran: UniversalShaper, // Grantha\n  hano: UniversalShaper, // Hanunoo\n  java: UniversalShaper, // Javanese\n  kthi: UniversalShaper, // Kaithi\n  kali: UniversalShaper, // Kayah Li\n  khar: UniversalShaper, // Kharoshthi\n  khoj: UniversalShaper, // Khojki\n  sind: UniversalShaper, // Khudawadi\n  lepc: UniversalShaper, // Lepcha\n  limb: UniversalShaper, // Limbu\n  mahj: UniversalShaper, // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper, // Meitei Mayek\n  modi: UniversalShaper, // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper, // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper, // Rejang\n  saur: UniversalShaper, // Saurashtra\n  shrd: UniversalShaper, // Sharada\n  sidd: UniversalShaper, // Siddham\n  sinh: UniversalShaper, // Sinhala\n  sund: UniversalShaper, // Sundanese\n  sylo: UniversalShaper, // Syloti Nagri\n  tglg: UniversalShaper, // Tagalog\n  tagb: UniversalShaper, // Tagbanwa\n  tale: UniversalShaper, // Tai Le\n  lana: UniversalShaper, // Tai Tham\n  tavt: UniversalShaper, // Tai Viet\n  takr: UniversalShaper, // Takri\n  tibt: UniversalShaper, // Tibetan\n  tfng: UniversalShaper, // Tifinagh\n  tirh: UniversalShaper, // Tirhuta\n\n  latn: DefaultShaper, // Latin\n  DFLT: DefaultShaper // Default\n};\n\nfunction choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var s = _ref;\n\n    var shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n\nvar GSUBProcessor = function (_OTProcessor) {\n  inherits(GSUBProcessor, _OTProcessor);\n\n  function GSUBProcessor() {\n    classCallCheck(this, GSUBProcessor);\n    return possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n\n  GSUBProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    var _this2 = this;\n\n    switch (lookupType) {\n      case 1:\n        {\n          // Single Substitution\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n\n          var glyph = this.glyphIterator.cur;\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Multiple Substitution\n          var _index = this.coverageIndex(table.coverage);\n          if (_index !== -1) {\n            var _glyphs;\n\n            var sequence = table.sequences.get(_index);\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n\n            var features = this.glyphIterator.cur.features;\n            var curGlyph = this.glyphIterator.cur;\n            var replacement = sequence.slice(1).map(function (gid, i) {\n              var glyph = new GlyphInfo(_this2.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n\n            (_glyphs = this.glyphs).splice.apply(_glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));\n            return true;\n          }\n\n          return false;\n        }\n\n      case 3:\n        {\n          // Alternate Substitution\n          var _index2 = this.coverageIndex(table.coverage);\n          if (_index2 !== -1) {\n            var USER_INDEX = 0; // TODO\n            this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];\n            return true;\n          }\n\n          return false;\n        }\n\n      case 4:\n        {\n          // Ligature Substitution\n          var _index3 = this.coverageIndex(table.coverage);\n          if (_index3 === -1) {\n            return false;\n          }\n\n          for (var _iterator = table.ligatureSets.get(_index3), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var ligature = _ref;\n\n            var matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) {\n              continue;\n            }\n\n            var _curGlyph = this.glyphIterator.cur;\n\n            // Concatenate all of the characters the new ligature will represent\n            var characters = _curGlyph.codePoints.slice();\n            for (var _iterator2 = matched, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n              var _ref2;\n\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref2 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref2 = _i2.value;\n              }\n\n              var _index4 = _ref2;\n\n              characters.push.apply(characters, this.glyphs[_index4].codePoints);\n            }\n\n            // Create the replacement ligature glyph\n            var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features, _curGlyph.stringIndex);\n            ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true;\n\n            // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n            var isMarkLigature = _curGlyph.isMark;\n            for (var i = 0; i < matched.length && isMarkLigature; i++) {\n              isMarkLigature = this.glyphs[matched[i]].isMark;\n            }\n\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n\n            var lastLigID = _curGlyph.ligatureID;\n            var lastNumComps = _curGlyph.codePoints.length;\n            var curComps = lastNumComps;\n            var idx = this.glyphIterator.index + 1;\n\n            // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n            for (var _iterator3 = matched, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n              var _ref3;\n\n              if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref3 = _iterator3[_i3++];\n              } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref3 = _i3.value;\n              }\n\n              var matchIndex = _ref3;\n\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) {\n                idx = matchIndex;\n              } else {\n                while (idx < matchIndex) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                  this.glyphs[idx].ligatureComponent = ligatureComponent;\n                  idx++;\n                }\n              }\n\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            }\n\n            // Adjust ligature components for any marks following\n            if (lastLigID && !isMarkLigature) {\n              for (var _i4 = idx; _i4 < this.glyphs.length; _i4++) {\n                if (this.glyphs[_i4].ligatureID === lastLigID) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i4].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[_i4].ligatureComponent = ligatureComponent;\n                } else {\n                  break;\n                }\n              }\n            }\n\n            // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n            for (var _i5 = matched.length - 1; _i5 >= 0; _i5--) {\n              this.glyphs.splice(matched[_i5], 1);\n            }\n\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n\n          return false;\n        }\n\n      case 5:\n        // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6:\n        // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7:\n        // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error('GSUB lookupType ' + lookupType + ' is not supported');\n    }\n  };\n\n  return GSUBProcessor;\n}(OTProcessor);\n\nvar GPOSProcessor = function (_OTProcessor) {\n  inherits(GPOSProcessor, _OTProcessor);\n\n  function GPOSProcessor() {\n    classCallCheck(this, GPOSProcessor);\n    return possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n\n  GPOSProcessor.prototype.applyPositionValue = function applyPositionValue(sequenceIndex, value) {\n    var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  };\n\n  GPOSProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          // Single positioning value\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Pair Adjustment Positioning\n          var nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) {\n            return false;\n          }\n\n          var _index = this.coverageIndex(table.coverage);\n          if (_index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              // Adjustments for glyph pairs\n              var set$$1 = table.pairSets.get(_index);\n\n              for (var _iterator = set$$1, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n                var _ref;\n\n                if (_isArray) {\n                  if (_i >= _iterator.length) break;\n                  _ref = _iterator[_i++];\n                } else {\n                  _i = _iterator.next();\n                  if (_i.done) break;\n                  _ref = _i.value;\n                }\n\n                var _pair = _ref;\n\n                if (_pair.secondGlyph === nextGlyph.id) {\n                  this.applyPositionValue(0, _pair.value1);\n                  this.applyPositionValue(1, _pair.value2);\n                  return true;\n                }\n              }\n\n              return false;\n\n            case 2:\n              // Class pair adjustment\n              var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              var class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) {\n                return false;\n              }\n\n              var pair = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair.value1);\n              this.applyPositionValue(1, pair.value2);\n              return true;\n          }\n        }\n\n      case 3:\n        {\n          // Cursive Attachment Positioning\n          var nextIndex = this.glyphIterator.peekIndex();\n          var _nextGlyph = this.glyphs[nextIndex];\n          if (!_nextGlyph) {\n            return false;\n          }\n\n          var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) {\n            return false;\n          }\n\n          var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) {\n            return false;\n          }\n\n          var entry = this.getAnchor(nextRecord.entryAnchor);\n          var exit = this.getAnchor(curRecord.exitAnchor);\n\n          var cur = this.positions[this.glyphIterator.index];\n          var next = this.positions[nextIndex];\n\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n\n              var d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            _nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n\n          return true;\n        }\n\n      case 4:\n        {\n          // Mark to base positioning\n          var markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {}\n\n          if (baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) {\n            return false;\n          }\n\n          var markRecord = table.markArray[markIndex];\n          var baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n\n      case 5:\n        {\n          // Mark to ligature positioning\n          var _markIndex = this.coverageIndex(table.markCoverage);\n          if (_markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var _baseGlyphIndex = this.glyphIterator.index;\n          while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}\n\n          if (_baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);\n          if (ligIndex === -1) {\n            return false;\n          }\n\n          var ligAttach = table.ligatureArray[ligIndex];\n          var markGlyph = this.glyphIterator.cur;\n          var ligGlyph = this.glyphs[_baseGlyphIndex];\n          var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n\n          var _markRecord = table.markArray[_markIndex];\n          var _baseAnchor = ligAttach[compIndex][_markRecord.class];\n          this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);\n          return true;\n        }\n\n      case 6:\n        {\n          // Mark to mark positioning\n          var mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) {\n            return false;\n          }\n\n          // get the previous mark to attach to\n          var prevIndex = this.glyphIterator.peekIndex(-1);\n          var prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) {\n            return false;\n          }\n\n          var _cur = this.glyphIterator.cur;\n\n          // The following logic was borrowed from Harfbuzz\n          var good = false;\n          if (_cur.ligatureID === prev.ligatureID) {\n            if (!_cur.ligatureID) {\n              // Marks belonging to the same base\n              good = true;\n            } else if (_cur.ligatureComponent === prev.ligatureComponent) {\n              // Marks belonging to the same ligature component\n              good = true;\n            }\n          } else {\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {\n              good = true;\n            }\n          }\n\n          if (!good) {\n            return false;\n          }\n\n          var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) {\n            return false;\n          }\n\n          var _markRecord2 = table.mark1Array[mark1Index];\n          var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];\n          this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);\n          return true;\n        }\n\n      case 7:\n        // Contextual positioning\n        return this.applyContext(table);\n\n      case 8:\n        // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9:\n        // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error('Unsupported GPOS table: ' + lookupType);\n    }\n  };\n\n  GPOSProcessor.prototype.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    var baseCoords = this.getAnchor(baseAnchor);\n    var markCoords = this.getAnchor(markRecord.markAnchor);\n\n    var basePos = this.positions[baseGlyphIndex];\n    var markPos = this.positions[this.glyphIterator.index];\n\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  };\n\n  GPOSProcessor.prototype.getAnchor = function getAnchor(anchor) {\n    // TODO: contour point, device tables\n    var x = anchor.xCoordinate;\n    var y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return { x: x, y: y };\n  };\n\n  GPOSProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  };\n\n  GPOSProcessor.prototype.fixCursiveAttachment = function fixCursiveAttachment(i) {\n    var glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      var j = glyph.cursiveAttachment;\n\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  };\n\n  GPOSProcessor.prototype.fixMarkAttachment = function fixMarkAttachment() {\n    for (var i = 0; i < this.glyphs.length; i++) {\n      var glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        var j = glyph.markAttachment;\n\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (var k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (var _k = j + 1; _k < i + 1; _k++) {\n            this.positions[i].xOffset += this.positions[_k].xAdvance;\n            this.positions[i].yOffset += this.positions[_k].yAdvance;\n          }\n        }\n      }\n    }\n  };\n\n  return GPOSProcessor;\n}(OTProcessor);\n\nvar OTLayoutEngine = function () {\n  function OTLayoutEngine(font) {\n    classCallCheck(this, OTLayoutEngine);\n\n    this.font = font;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  OTLayoutEngine.prototype.setup = function setup(glyphRun) {\n    // Select a script based on what is available in GSUB/GPOS.\n    var script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, glyphRun.glyphs, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (var key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  };\n\n  OTLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, glyphRun.glyphs);\n    }\n  };\n\n  OTLayoutEngine.prototype.position = function position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, glyphRun.glyphs, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  };\n\n  OTLayoutEngine.prototype.zeroMarkAdvances = function zeroMarkAdvances(glyphRun) {\n    for (var i = 0; i < glyphRun.glyphs; i++) {\n      if (glyphRun.glyphs[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n\n  OTLayoutEngine.prototype.cleanup = function cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  };\n\n  OTLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push.apply(features, Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push.apply(features, Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  };\n\n  return OTLayoutEngine;\n}();\n\nvar LayoutEngine = function () {\n  function LayoutEngine(font) {\n    classCallCheck(this, LayoutEngine);\n\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  LayoutEngine.prototype.layout = function layout(string, features, script, language, direction$$1) {\n    var _this = this;\n\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction$$1 = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Attempt to detect the script from the string if not provided.\n    if (script == null) {\n      script = forString(string);\n    }\n\n    var glyphs = this.glyphsForString(string);\n\n    var glyphRun = new GlyphRun(glyphs, features, script, language, direction$$1);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    // Map glyph infos back to normal Glyph objects\n    glyphRun.stringIndices = glyphRun.glyphs.map(function (glyphInfo) {\n      return glyphInfo.stringIndex;\n    });\n    glyphRun.glyphs = glyphRun.glyphs.map(function (glyphInfo) {\n      return _this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);\n    });\n    return glyphRun;\n  };\n\n  LayoutEngine.prototype.glyphsForString = function glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n      var stringIndex = idx - 1;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(new GlyphInfo(this.font, this.font._cmapProcessor.lookup(last, code), [last, code], null, stringIndex));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(new GlyphInfo(this.font, this.font._cmapProcessor.lookup(last), [last], null, stringIndex));\n      }\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  };\n\n  LayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  };\n\n  LayoutEngine.prototype.position = function position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(function (glyph) {\n      return new GlyphPosition(glyph.advanceWidth);\n    });\n    var positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  };\n\n  LayoutEngine.prototype.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {\n    var space = this.font.glyphForCodePoint(0x20);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n\n  LayoutEngine.prototype.isDefaultIgnorable = function isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    var plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00ad;\n        case 0x03:\n          return ch === 0x034f;\n        case 0x06:\n          return ch === 0x061c;\n        case 0x17:\n          return 0x17b4 <= ch && ch <= 0x17b5;\n        case 0x18:\n          return 0x180b <= ch && ch <= 0x180e;\n        case 0x20:\n          return 0x200b <= ch && ch <= 0x200f || 0x202a <= ch && ch <= 0x202e || 0x2060 <= ch && ch <= 0x206f;\n        case 0xfe:\n          return 0xfe00 <= ch && ch <= 0xfe0f || ch === 0xfeff;\n        case 0xff:\n          return 0xfff0 <= ch && ch <= 0xfff8;\n        default:\n          return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1bca0 <= ch && ch <= 0x1bca3 || 0x1d173 <= ch && ch <= 0x1d17a;\n        case 0x0e:\n          return 0xe0000 <= ch && ch <= 0xe0fff;\n        default:\n          return false;\n      }\n    }\n  };\n\n  LayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.engine) {\n      features.push.apply(features, this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  };\n\n  LayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var result = new Set();\n\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (var _iterator = codePoints, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var codePoint = _ref;\n\n      result.add(String.fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (var _iterator2 = this.engine.stringsForGlyph(gid), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var string = _ref2;\n\n        result.add(string);\n      }\n    }\n\n    return Array.from(result);\n  };\n\n  return LayoutEngine;\n}();\n\nvar SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\n\nvar Path = function () {\n  function Path() {\n    classCallCheck(this, Path);\n\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n\n\n  Path.prototype.toFunction = function toFunction() {\n    var cmds = this.commands.map(function (c) {\n      return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';\n    });\n    return new Function('ctx', cmds.join('\\n'));\n  };\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n\n\n  Path.prototype.toSVG = function toSVG() {\n    var cmds = this.commands.map(function (c) {\n      var args = c.args.map(function (arg) {\n        return Math.round(arg * 100) / 100;\n      });\n      return '' + SVG_COMMANDS[c.command] + args.join(' ');\n    });\n\n    return cmds.join('');\n  };\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  Path.prototype.mapPoints = function mapPoints(fn) {\n    var path = new Path();\n\n    for (var _iterator = this.commands, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var c = _ref;\n\n      var args = [];\n      for (var _i2 = 0; _i2 < c.args.length; _i2 += 2) {\n        var _fn = fn(c.args[_i2], c.args[_i2 + 1]),\n            x = _fn[0],\n            y = _fn[1];\n\n        args.push(x, y);\n      }\n\n      path[c.command].apply(path, args);\n    }\n\n    return path;\n  };\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n\n\n  Path.prototype.transform = function transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints(function (x, y) {\n      x = m0 * x + m2 * y + m4;\n      y = m1 * x + m3 * y + m5;\n      return [x, y];\n    });\n  };\n\n  /**\n   * Translates the path by the given offset.\n   */\n\n\n  Path.prototype.translate = function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  };\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n\n\n  Path.prototype.rotate = function rotate(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  };\n\n  /**\n   * Scales the path.\n   */\n\n\n  Path.prototype.scale = function scale(scaleX) {\n    var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  };\n\n  createClass(Path, [{\n    key: 'cbox',\n    get: function get$$1() {\n      if (!this._cbox) {\n        var cbox = new BBox();\n        for (var _iterator2 = this.commands, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i3 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i3++];\n          } else {\n            _i3 = _iterator2.next();\n            if (_i3.done) break;\n            _ref2 = _i3.value;\n          }\n\n          var command = _ref2;\n\n          for (var _i4 = 0; _i4 < command.args.length; _i4 += 2) {\n            cbox.addPoint(command.args[_i4], command.args[_i4 + 1]);\n          }\n        }\n\n        this._cbox = Object.freeze(cbox);\n      }\n\n      return this._cbox;\n    }\n\n    /**\n     * Gets the exact bounding box of the path by evaluating curve segments.\n     * Slower to compute than the control box, but more accurate.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      if (this._bbox) {\n        return this._bbox;\n      }\n\n      var bbox = new BBox();\n      var cx = 0,\n          cy = 0;\n\n      var f = function f(t) {\n        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n      };\n\n      for (var _iterator3 = this.commands, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i5 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i5++];\n        } else {\n          _i5 = _iterator3.next();\n          if (_i5.done) break;\n          _ref3 = _i5.value;\n        }\n\n        var c = _ref3;\n\n        switch (c.command) {\n          case 'moveTo':\n          case 'lineTo':\n            var _c$args = c.args,\n                x = _c$args[0],\n                y = _c$args[1];\n\n            bbox.addPoint(x, y);\n            cx = x;\n            cy = y;\n            break;\n\n          case 'quadraticCurveTo':\n          case 'bezierCurveTo':\n            if (c.command === 'quadraticCurveTo') {\n              // http://fontforge.org/bezier.html\n              var _c$args2 = c.args,\n                  qp1x = _c$args2[0],\n                  qp1y = _c$args2[1],\n                  p3x = _c$args2[2],\n                  p3y = _c$args2[3];\n\n              var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n              var cp1y = cy + 2 / 3 * (qp1y - cy);\n              var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n              var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n            } else {\n              var _c$args3 = c.args,\n                  cp1x = _c$args3[0],\n                  cp1y = _c$args3[1],\n                  cp2x = _c$args3[2],\n                  cp2y = _c$args3[3],\n                  p3x = _c$args3[4],\n                  p3y = _c$args3[5];\n            }\n\n            // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n            bbox.addPoint(p3x, p3y);\n\n            var p0 = [cx, cy];\n            var p1 = [cp1x, cp1y];\n            var p2 = [cp2x, cp2y];\n            var p3 = [p3x, p3y];\n\n            for (var i = 0; i <= 1; i++) {\n              var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n              var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n              c = 3 * p1[i] - 3 * p0[i];\n\n              if (a === 0) {\n                if (b === 0) {\n                  continue;\n                }\n\n                var t = -c / b;\n                if (0 < t && t < 1) {\n                  if (i === 0) {\n                    bbox.addPoint(f(t), bbox.maxY);\n                  } else if (i === 1) {\n                    bbox.addPoint(bbox.maxX, f(t));\n                  }\n                }\n\n                continue;\n              }\n\n              var b2ac = Math.pow(b, 2) - 4 * c * a;\n              if (b2ac < 0) {\n                continue;\n              }\n\n              var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t1 && t1 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t1), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t1));\n                }\n              }\n\n              var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t2 && t2 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t2), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t2));\n                }\n              }\n            }\n\n            cx = p3x;\n            cy = p3y;\n            break;\n        }\n      }\n\n      return this._bbox = Object.freeze(bbox);\n    }\n  }]);\n  return Path;\n}();\n\nvar _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];\n\nvar _loop = function _loop() {\n  var command = _arr[_i6];\n  Path.prototype[command] = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command: command,\n      args: args\n    });\n\n    return this;\n  };\n};\n\nfor (var _i6 = 0; _i6 < _arr.length; _i6++) {\n  _loop();\n}\n\nvar StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\nvar _class$8;\n\nfunction _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nvar Glyph = (_class$8 = function () {\n  function Glyph(id, codePoints, font) {\n    classCallCheck(this, Glyph);\n\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  Glyph.prototype._getPath = function _getPath() {\n    return new Path();\n  };\n\n  Glyph.prototype._getCBox = function _getCBox() {\n    return this.path.cbox;\n  };\n\n  Glyph.prototype._getBBox = function _getBBox() {\n    return this.path.bbox;\n  };\n\n  Glyph.prototype._getTableMetrics = function _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    var metric = table.metrics.get(table.metrics.length - 1);\n    var res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n\n    return res;\n  };\n\n  Glyph.prototype._getMetrics = function _getMetrics(cbox) {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),\n        advanceWidth = _getTableMetrics2.advance,\n        leftBearing = _getTableMetrics2.bearing;\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n\n\n    if (this._font.vmtx) {\n      var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),\n          advanceHeight = _getTableMetrics3.advance,\n          topBearing = _getTableMetrics3.bearing;\n    } else {\n      var os2 = void 0;\n      if (typeof cbox === 'undefined' || cbox === null) {\n        cbox = this.cbox;\n      }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        var hhea = this._font.hhea;\n\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing };\n  };\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  Glyph.prototype.getScaledPath = function getScaledPath(size) {\n    var scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  };\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n\n\n  Glyph.prototype._getName = function _getName() {\n    var post = this._font.post;\n\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        var id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  };\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  Glyph.prototype.render = function render(ctx, size) {\n    ctx.save();\n\n    var scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n\n    var fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  createClass(Glyph, [{\n    key: 'cbox',\n    get: function get$$1() {\n      return this._getCBox();\n    }\n\n    /**\n     * The glyph’s bounding box, i.e. the rectangle that encloses the\n     * glyph outline as tightly as possible.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      return this._getBBox();\n    }\n\n    /**\n     * A vector Path object representing the glyph outline.\n     * @type {Path}\n     */\n\n  }, {\n    key: 'path',\n    get: function get$$1() {\n      // Cache the path so we only decode it once\n      // Decoding is actually performed by subclasses\n      return this._getPath();\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get$$1() {\n      return this._getMetrics().advanceWidth;\n    }\n\n    /**\n     * The glyph's advance height.\n     * @type {number}\n     */\n\n  }, {\n    key: 'advanceHeight',\n    get: function get$$1() {\n      return this._getMetrics().advanceHeight;\n    }\n  }, {\n    key: 'ligatureCaretPositions',\n    get: function get$$1() {}\n  }, {\n    key: 'name',\n    get: function get$$1() {\n      return this._getName();\n    }\n  }]);\n  return Glyph;\n}(), _applyDecoratedDescriptor$4(_class$8.prototype, 'cbox', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'cbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'bbox', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'bbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'path', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'path'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceWidth', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'advanceWidth'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceHeight', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'advanceHeight'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'name', [cache], Object.getOwnPropertyDescriptor(_class$8.prototype, 'name'), _class$8.prototype), _class$8);\n\n// The header for both simple and composite glyphs\nvar GlyfHeader = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16\n});\n\n// Flags for simple glyphs\nvar ON_CURVE = 1 << 0;\nvar X_SHORT_VECTOR = 1 << 1;\nvar Y_SHORT_VECTOR = 1 << 2;\nvar REPEAT = 1 << 3;\nvar SAME_X = 1 << 4;\nvar SAME_Y = 1 << 5;\n\n// Flags for composite glyphs\nvar ARG_1_AND_2_ARE_WORDS = 1 << 0;\nvar WE_HAVE_A_SCALE = 1 << 3;\nvar MORE_COMPONENTS = 1 << 5;\nvar WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\nvar WE_HAVE_A_TWO_BY_TWO = 1 << 7;\nvar WE_HAVE_INSTRUCTIONS = 1 << 8;\n// Represents a point in a simple glyph\nvar Point = function () {\n  function Point(onCurve, endContour) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    classCallCheck(this, Point);\n\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype.copy = function copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  };\n\n  return Point;\n}();\n\n// Represents a component in a composite glyph\n\nvar Component = function Component(glyphID, dx, dy) {\n  classCallCheck(this, Component);\n\n  this.glyphID = glyphID;\n  this.dx = dx;\n  this.dy = dy;\n  this.pos = 0;\n  this.scaleX = this.scaleY = 1;\n  this.scale01 = this.scale10 = 0;\n};\n\n/**\n * Represents a TrueType glyph.\n */\n\n\nvar TTFGlyph = function (_Glyph) {\n  inherits(TTFGlyph, _Glyph);\n\n  function TTFGlyph() {\n    classCallCheck(this, TTFGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  // Parses just the glyph header and returns the bounding box\n  TTFGlyph.prototype._getCBox = function _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    var glyph = GlyfHeader.decode(stream);\n\n    var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  };\n\n  // Parses a single glyph coordinate\n\n\n  TTFGlyph.prototype._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  };\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n\n\n  TTFGlyph.prototype._decode = function _decode() {\n    var glyfPos = this._font.loca.offsets[this.id];\n    var nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) {\n      return null;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    var startPos = stream.pos;\n\n    var glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  };\n\n  TTFGlyph.prototype._decodeSimple = function _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n\n    var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n\n    var flags = [];\n    var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        var count = stream.readUInt8();\n        for (var j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    var px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    var py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = glyph.points.slice();\n      points.push.apply(points, this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  };\n\n  TTFGlyph.prototype._decodeComposite = function _decodeComposite(glyph, stream) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    // this is a composite glyph\n    glyph.components = [];\n    var haveInstructions = false;\n    var flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      var gPos = stream.pos - offset;\n      var glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = [];\n      for (var j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push.apply(points, this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  };\n\n  TTFGlyph.prototype._getPhantomPoints = function _getPhantomPoints(glyph) {\n    var cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    var _metrics = this._metrics,\n        advanceWidth = _metrics.advanceWidth,\n        advanceHeight = _metrics.advanceHeight,\n        leftBearing = _metrics.leftBearing,\n        topBearing = _metrics.topBearing;\n\n\n    return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  };\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n\n\n  TTFGlyph.prototype._getContours = function _getContours() {\n    var glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n\n    var points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (var _iterator = glyph.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var component = _ref;\n\n        var _contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (var i = 0; i < _contours.length; i++) {\n          var contour = _contours[i];\n          for (var j = 0; j < contour.length; j++) {\n            var _point = contour[j];\n            var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;\n            var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;\n            points.push(new Point(_point.onCurve, _point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    var contours = [];\n    var cur = [];\n    for (var k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  };\n\n  TTFGlyph.prototype._getMetrics = function _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var cbox = this._getCBox(true);\n    _Glyph.prototype._getMetrics.call(this, cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  };\n\n  // Converts contours to a Path object that can be rendered\n\n\n  TTFGlyph.prototype._getPath = function _getPath() {\n    var contours = this._getContours();\n    var path = new Path();\n\n    for (var i = 0; i < contours.length; i++) {\n      var contour = contours[i];\n      var firstPt = contour[0];\n      var lastPt = contour[contour.length - 1];\n      var start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (var j = start; j < contour.length; j++) {\n        var pt = contour[j];\n        var prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          var midX = (prevPt.x + pt.x) / 2;\n          var midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  };\n\n  return TTFGlyph;\n}(Glyph);\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\n\nvar CFFGlyph = function (_Glyph) {\n  inherits(CFFGlyph, _Glyph);\n\n  function CFFGlyph() {\n    classCallCheck(this, CFFGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  CFFGlyph.prototype._getName = function _getName() {\n    if (this._font.CFF2) {\n      return _Glyph.prototype._getName.call(this);\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  };\n\n  CFFGlyph.prototype.bias = function bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  };\n\n  CFFGlyph.prototype._getPath = function _getPath() {\n    var stream = this._font.stream;\n    var pos = stream.pos;\n\n\n    var cff = this._font.CFF2 || this._font['CFF '];\n    var str = cff.topDict.CharStrings[this.id];\n    var end = str.offset + str.length;\n    stream.pos = str.offset;\n\n    var path = new Path();\n    var stack = [];\n    var trans = [];\n\n    var width = null;\n    var nStems = 0;\n    var x = 0,\n        y = 0;\n    var usedGsubrs = void 0;\n    var usedSubrs = void 0;\n    var open = false;\n\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n\n    var gsubrs = cff.globalSubrIndex || [];\n    var gsubrsBias = this.bias(gsubrs);\n\n    var privateDict = cff.privateDictForGlyph(this.id);\n    var subrs = privateDict.Subrs || [];\n    var subrsBias = this.bias(subrs);\n\n    var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    var vsindex = privateDict.vsindex;\n    var variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    var parse = function parse() {\n      while (stream.pos < end) {\n        var op = stream.readUInt8();\n        if (op < 32) {\n          switch (op) {\n            case 1: // hstem\n            case 3: // vstem\n            case 18: // hstemhm\n            case 23:\n              // vstemhm\n              parseStems();\n              break;\n\n            case 4:\n              // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5:\n              // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n\n            case 6: // hlineto\n            case 7:\n              // vlineto\n              var phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 8:\n              // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 10:\n              // callsubr\n              var index = stack.pop() + subrsBias;\n              var subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 11:\n              // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n\n            case 14:\n              // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n\n            case 15:\n              {\n                // vsindex\n                if (cff.version < 2) {\n                  throw new Error('vsindex operator not supported in CFF v1');\n                }\n\n                vsindex = stack.pop();\n                break;\n              }\n\n            case 16:\n              {\n                // blend\n                if (cff.version < 2) {\n                  throw new Error('blend operator not supported in CFF v1');\n                }\n\n                if (!variationProcessor) {\n                  throw new Error('blend operator in non-variation font');\n                }\n\n                var blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                var numBlends = stack.pop();\n                var numOperands = numBlends * blendVector.length;\n                var delta = stack.length - numOperands;\n                var base = delta - numBlends;\n\n                for (var i = 0; i < numBlends; i++) {\n                  var sum = stack[base + i];\n                  for (var j = 0; j < blendVector.length; j++) {\n                    sum += blendVector[j] * stack[delta++];\n                  }\n\n                  stack[base + i] = sum;\n                }\n\n                while (numOperands--) {\n                  stack.pop();\n                }\n\n                break;\n              }\n\n            case 19: // hintmask\n            case 20:\n              // cntrmask\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n\n            case 21:\n              // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22:\n              // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24:\n              // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25:\n              // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26:\n              // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 27:\n              // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 28:\n              // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29:\n              // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 30: // vhcurveto\n            case 31:\n              // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3:\n                  // and\n                  var a = stack.pop();\n                  var b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4:\n                  // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5:\n                  // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9:\n                  // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10:\n                  // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11:\n                  // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12:\n                  // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14:\n                  // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15:\n                  // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18:\n                  // drop\n                  stack.pop();\n                  break;\n\n                case 20:\n                  // put\n                  var val = stack.pop();\n                  var idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21:\n                  // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22:\n                  // ifelse\n                  var s1 = stack.pop();\n                  var s2 = stack.pop();\n                  var v1 = stack.pop();\n                  var v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23:\n                  // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24:\n                  // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26:\n                  // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27:\n                  // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28:\n                  // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29:\n                  // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30:\n                  // roll\n                  var n = stack.pop();\n                  var _j = stack.pop();\n\n                  if (_j >= 0) {\n                    while (_j > 0) {\n                      var t = stack[n - 1];\n                      for (var _i = n - 2; _i >= 0; _i--) {\n                        stack[_i + 1] = stack[_i];\n                      }\n\n                      stack[0] = t;\n                      _j--;\n                    }\n                  } else {\n                    while (_j < 0) {\n                      var t = stack[0];\n                      for (var _i2 = 0; _i2 <= n; _i2++) {\n                        stack[_i2] = stack[_i2 + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      _j++;\n                    }\n                  }\n                  break;\n\n                case 34:\n                  // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  var c3x = c2x + stack.shift();\n                  var c3y = c2y;\n                  var c4x = c3x + stack.shift();\n                  var c4y = c3y;\n                  var c5x = c4x + stack.shift();\n                  var c5y = c4y;\n                  var c6x = c5x + stack.shift();\n                  var c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35:\n                  // flex\n                  var pts = [];\n\n                  for (var _i3 = 0; _i3 <= 5; _i3++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n\n                case 36:\n                  // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37:\n                  // flex1\n                  var startx = x;\n                  var starty = y;\n\n                  pts = [];\n                  for (var _i4 = 0; _i4 <= 4; _i4++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                    // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error('Unknown op: 12 ' + op);\n              }\n              break;\n\n            default:\n              throw new Error('Unknown op: ' + op);\n          }\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  };\n\n  return CFFGlyph;\n}(Glyph);\n\nvar SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(function (t) {\n    return t.parent.buflen - t._currentOffset;\n  })\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\n\nvar SBIXGlyph = function (_TTFGlyph) {\n  inherits(SBIXGlyph, _TTFGlyph);\n\n  function SBIXGlyph() {\n    classCallCheck(this, SBIXGlyph);\n    return possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));\n  }\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  SBIXGlyph.prototype.getImageForSize = function getImageForSize(size) {\n    for (var i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) {\n        break;\n      }\n    }\n\n    var offsets = table.imageOffsets;\n    var start = offsets[this.id];\n    var end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, { buflen: end - start });\n  };\n\n  SBIXGlyph.prototype.render = function render(ctx, size) {\n    var img = this.getImageForSize(size);\n    if (img != null) {\n      var scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, { height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale });\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      _TTFGlyph.prototype.render.call(this, ctx, size);\n    }\n  };\n\n  return SBIXGlyph;\n}(TTFGlyph);\n\nvar COLRLayer = function COLRLayer(glyph, color) {\n  classCallCheck(this, COLRLayer);\n\n  this.glyph = glyph;\n  this.color = color;\n};\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\n\n\nvar COLRGlyph = function (_Glyph) {\n  inherits(COLRGlyph, _Glyph);\n\n  function COLRGlyph() {\n    classCallCheck(this, COLRGlyph);\n    return possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  COLRGlyph.prototype._getBBox = function _getBBox() {\n    var bbox = new BBox();\n    for (var i = 0; i < this.layers.length; i++) {\n      var layer = this.layers[i];\n      var b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  };\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n\n\n  COLRGlyph.prototype.render = function render(ctx, size) {\n    for (var _iterator = this.layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _ref2 = _ref,\n          glyph = _ref2.glyph,\n          color = _ref2.color;\n\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  };\n\n  createClass(COLRGlyph, [{\n    key: 'layers',\n    get: function get$$1() {\n      var cpal = this._font.CPAL;\n      var colr = this._font.COLR;\n      var low = 0;\n      var high = colr.baseGlyphRecord.length - 1;\n\n      while (low <= high) {\n        var mid = low + high >> 1;\n        var rec = colr.baseGlyphRecord[mid];\n\n        if (this.id < rec.gid) {\n          high = mid - 1;\n        } else if (this.id > rec.gid) {\n          low = mid + 1;\n        } else {\n          var baseLayer = rec;\n          break;\n        }\n      }\n\n      // if base glyph not found in COLR table,\n      // default to normal glyph from glyf or CFF\n      if (baseLayer == null) {\n        var g = this._font._getBaseGlyph(this.id);\n        var color = {\n          red: 0,\n          green: 0,\n          blue: 0,\n          alpha: 255\n        };\n\n        return [new COLRLayer(g, color)];\n      }\n\n      // otherwise, return an array of all the layers\n      var layers = [];\n      for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n        var rec = colr.layerRecords[i];\n        var color = cpal.colorRecords[rec.paletteIndex];\n        var g = this._font._getBaseGlyph(rec.gid);\n        layers.push(new COLRLayer(g, color));\n      }\n\n      return layers;\n    }\n  }]);\n  return COLRGlyph;\n}(Glyph);\n\nvar TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nvar TUPLE_COUNT_MASK = 0x0fff;\nvar EMBEDDED_TUPLE_COORD = 0x8000;\nvar INTERMEDIATE_TUPLE = 0x4000;\nvar PRIVATE_POINT_NUMBERS = 0x2000;\nvar TUPLE_INDEX_MASK = 0x0fff;\nvar POINTS_ARE_WORDS = 0x80;\nvar POINT_RUN_COUNT_MASK = 0x7f;\nvar DELTAS_ARE_ZERO = 0x80;\nvar DELTAS_ARE_WORDS = 0x40;\nvar DELTA_RUN_COUNT_MASK = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\n\nvar GlyphVariationProcessor = function () {\n  function GlyphVariationProcessor(font, coords) {\n    classCallCheck(this, GlyphVariationProcessor);\n\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n\n  GlyphVariationProcessor.prototype.normalizeCoords = function normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    var normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      var axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        var segment = this.font.avar.segment[i];\n        for (var j = 0; j < segment.correspondence.length; j++) {\n          var pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            var prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  };\n\n  GlyphVariationProcessor.prototype.transformPoints = function transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) {\n      return;\n    }\n\n    var gvar = this.font.gvar;\n\n    if (gid >= gvar.glyphCount) {\n      return;\n    }\n\n    var offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) {\n      return;\n    }\n\n    // Read the gvar data for this glyph\n    var stream = this.font.stream;\n\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    var tupleCount = stream.readUInt16BE();\n    var offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    var origPoints = glyphPoints.map(function (pt) {\n      return pt.copy();\n    });\n\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (var i = 0; i < tupleCount; i++) {\n      var tupleDataSize = stream.readUInt16BE();\n      var tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (var a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (var _a = 0; _a < gvar.axisCount; _a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n        for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      var nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      var xDeltas = this.decodeDeltas(nPoints);\n      var yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) {\n        // all points\n        for (var _i = 0; _i < glyphPoints.length; _i++) {\n          var point = glyphPoints[_i];\n          point.x += Math.round(xDeltas[_i] * factor);\n          point.y += Math.round(yDeltas[_i] * factor);\n        }\n      } else {\n        var outPoints = origPoints.map(function (pt) {\n          return pt.copy();\n        });\n        var hasDelta = glyphPoints.map(function () {\n          return false;\n        });\n\n        for (var _i2 = 0; _i2 < points.length; _i2++) {\n          var idx = points[_i2];\n          if (idx < glyphPoints.length) {\n            var _point = outPoints[idx];\n            hasDelta[idx] = true;\n\n            _point.x += Math.round(xDeltas[_i2] * factor);\n            _point.y += Math.round(yDeltas[_i2] * factor);\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {\n          var deltaX = outPoints[_i3].x - origPoints[_i3].x;\n          var deltaY = outPoints[_i3].y - origPoints[_i3].y;\n\n          glyphPoints[_i3].x += deltaX;\n          glyphPoints[_i3].y += deltaY;\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  };\n\n  GlyphVariationProcessor.prototype.decodePoints = function decodePoints() {\n    var stream = this.font.stream;\n    var count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    var points = new Uint16Array(count);\n    var i = 0;\n    var point = 0;\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (var j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  };\n\n  GlyphVariationProcessor.prototype.decodeDeltas = function decodeDeltas(count) {\n    var stream = this.font.stream;\n    var i = 0;\n    var deltas = new Int16Array(count);\n\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n      } else {\n        var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (var j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  };\n\n  GlyphVariationProcessor.prototype.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    var normalized = this.normalizedCoords;\n    var gvar = this.font.gvar;\n\n    var factor = 1;\n\n    for (var i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {\n          return 0;\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  };\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n\n\n  GlyphVariationProcessor.prototype.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    var point = 0;\n    while (point < points.length) {\n      var firstPoint = point;\n\n      // find the end point of the contour\n      var endPoint = point;\n      var pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      var firstDelta = point;\n      var curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  };\n\n  GlyphVariationProcessor.prototype.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    var iterable = ['x', 'y'];\n    for (var i = 0; i < iterable.length; i++) {\n      var k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      var in1 = inPoints[ref1][k];\n      var in2 = inPoints[ref2][k];\n      var out1 = outPoints[ref1][k];\n      var out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (var _p = p1; _p <= p2; _p++) {\n          var out = inPoints[_p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[_p][k] = out;\n        }\n      }\n    }\n  };\n\n  GlyphVariationProcessor.prototype.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {\n    var deltaX = outPoints[ref].x - inPoints[ref].x;\n    var deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (var p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  };\n\n  GlyphVariationProcessor.prototype.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {\n    var outerIndex = void 0,\n        innerIndex = void 0;\n\n    if (table.advanceWidthMapping) {\n      var idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      var entryFormat = table.advanceWidthMapping.entryFormat;\n      var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];\n      outerIndex = _table$advanceWidthMa.outerIndex;\n      innerIndex = _table$advanceWidthMa.innerIndex;\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  };\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n\n\n  GlyphVariationProcessor.prototype.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    var deltaSet = varData.deltaSets[innerIndex];\n    var blendVector = this.getBlendVector(itemStore, outerIndex);\n    var netAdjustment = 0;\n\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  };\n\n  GlyphVariationProcessor.prototype.getBlendVector = function getBlendVector(itemStore, outerIndex) {\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    var normalizedCoords = this.normalizedCoords;\n    var blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      var scalar = 1;\n      var regionIndex = varData.regionIndexes[master];\n      var axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (var j = 0; j < axes.length; j++) {\n        var axis = axes[j];\n        var axisScalar = void 0;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n          // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n          // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n          // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  };\n\n  return GlyphVariationProcessor;\n}();\n\nvar Subset = function () {\n  function Subset(font) {\n    classCallCheck(this, Subset);\n\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n\n  Subset.prototype.includeGlyph = function includeGlyph(glyph) {\n    if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  };\n\n  Subset.prototype.encodeStream = function encodeStream() {\n    var _this = this;\n\n    var s = new r.EncodeStream();\n\n    process.nextTick(function () {\n      _this.encode(s);\n      return s.end();\n    });\n\n    return s;\n  };\n\n  return Subset;\n}();\n\n// Flags for simple glyphs\nvar ON_CURVE$1 = 1 << 0;\nvar X_SHORT_VECTOR$1 = 1 << 1;\nvar Y_SHORT_VECTOR$1 = 1 << 2;\nvar REPEAT$1 = 1 << 3;\nvar SAME_X$1 = 1 << 4;\nvar SAME_Y$1 = 1 << 5;\n\nvar Point$1 = function () {\n  function Point() {\n    classCallCheck(this, Point);\n  }\n\n  Point.size = function size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  };\n\n  Point.encode = function encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  };\n\n  return Point;\n}();\n\nvar Glyf = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point$1, 0),\n  yPoints: new r.Array(Point$1, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\n\nvar TTFGlyphEncoder = function () {\n  function TTFGlyphEncoder() {\n    classCallCheck(this, TTFGlyphEncoder);\n  }\n\n  TTFGlyphEncoder.prototype.encodeSimple = function encodeSimple(path) {\n    var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var endPtsOfContours = [];\n    var xPoints = [];\n    var yPoints = [];\n    var flags = [];\n    var same = 0;\n    var lastX = 0,\n        lastY = 0,\n        lastFlag = 0;\n    var pointCount = 0;\n\n    for (var i = 0; i < path.commands.length; i++) {\n      var c = path.commands[i];\n\n      for (var j = 0; j < c.args.length; j += 2) {\n        var x = c.args[j];\n        var y = c.args[j + 1];\n        var flag = 0;\n\n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          var next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            var midX = (lastX + next.args[0]) / 2;\n            var midY = (lastY + next.args[1]) / 2;\n\n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n\n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE$1;\n        }\n\n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);\n\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT$1;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n\n          flags.push(flag);\n          lastFlag = flag;\n        }\n\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n\n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n\n    var bbox = path.bbox;\n    var glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n\n    var size = Glyf.size(glyf);\n    var tail = 4 - size % 4;\n\n    var stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n\n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n\n    return stream.buffer;\n  };\n\n  TTFGlyphEncoder.prototype._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    var diff = value - last;\n\n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n\n      points.push(diff);\n    }\n\n    return flag;\n  };\n\n  return TTFGlyphEncoder;\n}();\n\nvar TTFSubset = function (_Subset) {\n  inherits(TTFSubset, _Subset);\n\n  function TTFSubset(font) {\n    classCallCheck(this, TTFSubset);\n\n    var _this = possibleConstructorReturn(this, _Subset.call(this, font));\n\n    _this.glyphEncoder = new TTFGlyphEncoder();\n    return _this;\n  }\n\n  TTFSubset.prototype._addGlyph = function _addGlyph(gid) {\n    var glyph = this.font.getGlyph(gid);\n    var glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    var curOffset = this.font.loca.offsets[gid];\n    var nextOffset = this.font.loca.offsets[gid + 1];\n\n    var stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n\n    var buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = Buffer.from(buffer);\n      for (var _iterator = glyf.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var component = _ref;\n\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  };\n\n  TTFSubset.prototype.encode = function encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: []\n    };\n\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    var i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    var maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n\n    this.loca.offsets.push(this.offset);\n    tables.loca.preEncode.call(this.loca);\n\n    var head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n\n    var hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    Directory.encode(stream, {\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  };\n\n  return TTFSubset;\n}(Subset);\n\nvar CFFSubset = function (_Subset) {\n  inherits(CFFSubset, _Subset);\n\n  function CFFSubset(font) {\n    classCallCheck(this, CFFSubset);\n\n    var _this = possibleConstructorReturn(this, _Subset.call(this, font));\n\n    _this.cff = _this.font['CFF '];\n    if (!_this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n    return _this;\n  }\n\n  CFFSubset.prototype.subsetCharstrings = function subsetCharstrings() {\n    this.charstrings = [];\n    var gsubrs = {};\n\n    for (var _iterator = this.glyphs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var gid = _ref;\n\n      this.charstrings.push(this.cff.getCharString(gid));\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  };\n\n  CFFSubset.prototype.subsetSubrs = function subsetSubrs(subrs, used) {\n    var res = [];\n    for (var i = 0; i < subrs.length; i++) {\n      var subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(Buffer.from([11])); // return\n      }\n    }\n\n    return res;\n  };\n\n  CFFSubset.prototype.subsetFontdict = function subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n\n    var used_fds = {};\n    var used_subrs = [];\n    for (var _iterator2 = this.glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var gid = _ref2;\n\n      var fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(topDict.FDArray.length - 1);\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[used_subrs.length - 1][subr] = true;\n      }\n    }\n\n    for (var i = 0; i < topDict.FDArray.length; i++) {\n      var dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  };\n\n  CFFSubset.prototype.createCIDFontdict = function createCIDFontdict(topDict) {\n    var used_subrs = {};\n    for (var _iterator3 = this.glyphs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var gid = _ref3;\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    var privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{ Private: privateDict }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{ first: 0, fd: 0 }],\n      sentinel: this.charstrings.length\n    };\n  };\n\n  CFFSubset.prototype.addString = function addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  };\n\n  CFFSubset.prototype.encode = function encode(stream) {\n    this.subsetCharstrings();\n\n    var charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]\n    };\n\n    var topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];\n    for (var _i4 = 0; _i4 < _arr.length; _i4++) {\n      var key = _arr[_i4];\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    var top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: this.cff.length,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n\n    CFFTop.encode(stream, top);\n  };\n\n  return CFFSubset;\n}(Subset);\n\nvar _class;\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nvar TTFFont = (_class = function () {\n  TTFFont.probe = function probe(buffer) {\n    var format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  };\n\n  function TTFFont(stream) {\n    var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    classCallCheck(this, TTFFont);\n\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (var tag in this.directory.tables) {\n      var table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  TTFFont.prototype._getTable = function _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit$1.logErrors) {\n          console.error('Error decoding table ' + table.tag);\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  };\n\n  TTFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  };\n\n  TTFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, { _startOffset: 0 });\n  };\n\n  TTFFont.prototype._decodeTable = function _decodeTable(table) {\n    var pos = this.stream.pos;\n\n    var stream = this._getTableStream(table.tag);\n    var result = tables[table.tag].decode(stream, this, table.length);\n\n    this.stream.pos = pos;\n    return result;\n  };\n\n  /**\n   * The unique PostScript name for this font\n   * @type {string}\n   */\n\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n  TTFFont.prototype.getName = function getName(key) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';\n\n    var record = this.name.records[key];\n    if (record) {\n      return record[lang];\n    }\n\n    return null;\n  };\n\n  /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */\n\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  TTFFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  };\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n\n\n  TTFFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  };\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n\n\n  TTFFont.prototype.glyphsForString = function glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n      last = code;\n      state = nextState;\n    }\n    return glyphs;\n  };\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  TTFFont.prototype.layout = function layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  };\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n\n\n  TTFFont.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  };\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n\n\n  TTFFont.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  };\n\n  TTFFont.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n\n\n  TTFFont.prototype.getGlyph = function getGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n      } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n\n\n  TTFFont.prototype.createSubset = function createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  };\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  TTFFont.prototype.getVariation = function getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    var coords = this.fvar.axis.map(function (axis, i) {\n      var axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n\n    var stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n\n    var font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n\n    return font;\n  };\n\n  // Standardized format plugin API\n  TTFFont.prototype.getFont = function getFont(name) {\n    return this.getVariation(name);\n  };\n\n  createClass(TTFFont, [{\n    key: 'postscriptName',\n    get: function get$$1() {\n      var name = this.name.records.postscriptName;\n      if (name) {\n        var lang = Object.keys(name)[0];\n        return name[lang];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'fullName',\n    get: function get$$1() {\n      return this.getName('fullName');\n    }\n\n    /**\n     * The font's family name, e.g. \"Helvetica\"\n     * @type {string}\n     */\n\n  }, {\n    key: 'familyName',\n    get: function get$$1() {\n      return this.getName('fontFamily');\n    }\n\n    /**\n     * The font's sub-family, e.g. \"Bold\".\n     * @type {string}\n     */\n\n  }, {\n    key: 'subfamilyName',\n    get: function get$$1() {\n      return this.getName('fontSubfamily');\n    }\n\n    /**\n     * The font's copyright information\n     * @type {string}\n     */\n\n  }, {\n    key: 'copyright',\n    get: function get$$1() {\n      return this.getName('copyright');\n    }\n\n    /**\n     * The font's version number\n     * @type {string}\n     */\n\n  }, {\n    key: 'version',\n    get: function get$$1() {\n      return this.getName('version');\n    }\n\n    /**\n     * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n     * @type {number}\n     */\n\n  }, {\n    key: 'ascent',\n    get: function get$$1() {\n      return this.hhea.ascent;\n    }\n\n    /**\n     * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n     * @type {number}\n     */\n\n  }, {\n    key: 'descent',\n    get: function get$$1() {\n      return this.hhea.descent;\n    }\n\n    /**\n     * The amount of space that should be included between lines\n     * @type {number}\n     */\n\n  }, {\n    key: 'lineGap',\n    get: function get$$1() {\n      return this.hhea.lineGap;\n    }\n\n    /**\n     * The offset from the normal underline position that should be used\n     * @type {number}\n     */\n\n  }, {\n    key: 'underlinePosition',\n    get: function get$$1() {\n      return this.post.underlinePosition;\n    }\n\n    /**\n     * The weight of the underline that should be used\n     * @type {number}\n     */\n\n  }, {\n    key: 'underlineThickness',\n    get: function get$$1() {\n      return this.post.underlineThickness;\n    }\n\n    /**\n     * If this is an italic font, the angle the cursor should be drawn at to match the font design\n     * @type {number}\n     */\n\n  }, {\n    key: 'italicAngle',\n    get: function get$$1() {\n      return this.post.italicAngle;\n    }\n\n    /**\n     * The height of capital letters above the baseline.\n     * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n     * @type {number}\n     */\n\n  }, {\n    key: 'capHeight',\n    get: function get$$1() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.capHeight : this.ascent;\n    }\n\n    /**\n     * The height of lower case letters in the font.\n     * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n     * @type {number}\n     */\n\n  }, {\n    key: 'xHeight',\n    get: function get$$1() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.xHeight : 0;\n    }\n\n    /**\n     * The number of glyphs in the font.\n     * @type {number}\n     */\n\n  }, {\n    key: 'numGlyphs',\n    get: function get$$1() {\n      return this.maxp.numGlyphs;\n    }\n\n    /**\n     * The size of the font’s internal coordinate grid\n     * @type {number}\n     */\n\n  }, {\n    key: 'unitsPerEm',\n    get: function get$$1() {\n      return this.head.unitsPerEm;\n    }\n\n    /**\n     * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get$$1() {\n      return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n  }, {\n    key: '_cmapProcessor',\n    get: function get$$1() {\n      return new CmapProcessor(this.cmap);\n    }\n\n    /**\n     * An array of all of the unicode code points supported by the font.\n     * @type {number[]}\n     */\n\n  }, {\n    key: 'characterSet',\n    get: function get$$1() {\n      return this._cmapProcessor.getCharacterSet();\n    }\n  }, {\n    key: '_layoutEngine',\n    get: function get$$1() {\n      return new LayoutEngine(this);\n    }\n  }, {\n    key: 'availableFeatures',\n    get: function get$$1() {\n      return this._layoutEngine.getAvailableFeatures();\n    }\n  }, {\n    key: 'variationAxes',\n    get: function get$$1() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n\n      for (var _iterator = this.fvar.axis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var axis = _ref;\n\n        res[axis.axisTag.trim()] = {\n          name: axis.name.en,\n          min: axis.minValue,\n          default: axis.defaultValue,\n          max: axis.maxValue\n        };\n      }\n\n      return res;\n    }\n\n    /**\n     * Returns an object describing the named variation instances\n     * that the font designer has specified. Keys are variation names\n     * and values are the variation settings for this instance.\n     *\n     * @type {object}\n     */\n\n  }, {\n    key: 'namedVariations',\n    get: function get$$1() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n\n      for (var _iterator2 = this.fvar.instance, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var instance = _ref2;\n\n        var settings = {};\n        for (var i = 0; i < this.fvar.axis.length; i++) {\n          var axis = this.fvar.axis[i];\n          settings[axis.axisTag.trim()] = instance.coord[i];\n        }\n\n        res[instance.name.en] = settings;\n      }\n\n      return res;\n    }\n  }, {\n    key: '_variationProcessor',\n    get: function get$$1() {\n      if (!this.fvar) {\n        return null;\n      }\n\n      var variationCoords = this.variationCoords;\n\n      // Ignore if no variation coords and not CFF2\n      if (!variationCoords && !this.CFF2) {\n        return null;\n      }\n\n      if (!variationCoords) {\n        variationCoords = this.fvar.axis.map(function (axis) {\n          return axis.defaultValue;\n        });\n      }\n\n      return new GlyphVariationProcessor(this, variationCoords);\n    }\n  }]);\n  return TTFFont;\n}(), _applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'variationAxes', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'variationAxes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'namedVariations', [cache], Object.getOwnPropertyDescriptor(_class.prototype, 'namedVariations'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_variationProcessor', [cache], Object.getOwnPropertyDescriptor(_class.prototype, '_variationProcessor'), _class.prototype), _class);\n\nvar WOFFDirectoryEntry = new r.Struct({\n  tag: new r.String(4),\n  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  compLength: r.uint32,\n  length: r.uint32,\n  origChecksum: r.uint32\n});\n\nvar WOFFDirectory = new r.Struct({\n  tag: new r.String(4), // should be 'wOFF'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function () {\n  var tables$$1 = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var table = _ref;\n\n    tables$$1[table.tag] = table;\n  }\n\n  this.tables = tables$$1;\n};\n\nvar WOFFFont = function (_TTFFont) {\n  inherits(WOFFFont, _TTFFont);\n\n  function WOFFFont() {\n    classCallCheck(this, WOFFFont);\n    return possibleConstructorReturn(this, _TTFFont.apply(this, arguments));\n  }\n\n  WOFFFont.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  };\n\n  WOFFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });\n  };\n\n  WOFFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        var outBuffer = Buffer.alloc(table.length);\n        var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  };\n\n  return WOFFFont;\n}(TTFFont);\n\nvar TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts'),\n    dsigTag: r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\n\nvar TrueTypeCollection = function () {\n  TrueTypeCollection.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  };\n\n  function TrueTypeCollection(stream) {\n    classCallCheck(this, TrueTypeCollection);\n\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  TrueTypeCollection.prototype.getFont = function getFont(name) {\n    for (var _iterator = this.header.offsets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var offset = _ref;\n\n      var stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  };\n\n  createClass(TrueTypeCollection, [{\n    key: 'fonts',\n    get: function get$$1() {\n      var fonts = [];\n      for (var _iterator2 = this.header.offsets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var offset = _ref2;\n\n        var stream = new r.DecodeStream(this.stream.buffer);\n        stream.pos = offset;\n        fonts.push(new TTFFont(stream));\n      }\n\n      return fonts;\n    }\n  }]);\n  return TrueTypeCollection;\n}();\n\nvar DFontName = new r.String(r.uint8);\nvar DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\n\nvar Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\n\nvar Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {\n    return t.maxTypeIndex + 1;\n  }), { type: 'parent' })\n});\n\nvar TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, function (t) {\n    return t.length + 1;\n  })\n});\n\nvar DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\n\nvar DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\n\nvar DFont = function () {\n  DFont.probe = function probe(buffer) {\n    var stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (var _iterator = header.map.typeList.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var type = _ref;\n\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  function DFont(stream) {\n    classCallCheck(this, DFont);\n\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (var _iterator2 = this.header.map.typeList.types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var type = _ref2;\n\n      for (var _iterator3 = type.refList, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var ref = _ref3;\n\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  DFont.prototype.getFont = function getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (var _iterator4 = this.sfnt.refList, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var ref = _ref4;\n\n      var pos = this.header.dataOffset + ref.dataOffset + 4;\n      var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  };\n\n  createClass(DFont, [{\n    key: 'fonts',\n    get: function get$$1() {\n      var fonts = [];\n      for (var _iterator5 = this.sfnt.refList, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var ref = _ref5;\n\n        var pos = this.header.dataOffset + ref.dataOffset + 4;\n        var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n        fonts.push(new TTFFont(stream));\n      }\n\n      return fonts;\n    }\n  }]);\n  return DFont;\n}();\n\n// Register font formats\nfontkit$1.registerFormat(TTFFont);\nfontkit$1.registerFormat(WOFFFont);\nfontkit$1.registerFormat(TrueTypeCollection);\nfontkit$1.registerFormat(DFont);\n\nexport default fontkit$1;\n"],"mappings":"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AI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,SAAS;EAAE,EAAE,EAAE,SAAS;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACjD,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,SAAS;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAC5C,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EACvC,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,SAAS;EAAE,GAAG,EAAE,IAAI;EAC5C,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,GAAG,EAAE,YAAY;EAC/C,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EAAE,EAAE,EAAE,IAAI;EA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EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;AAC78U,IAAIC,YAAY,GAAG;EAClBz9B,UAAU,EAAEA,UAAU;EACtBu9B,SAAS,EAAEA,SAAS;EACpBC,IAAI,EAAEA;AACP,CAAC;AAED,IAAIE,UAAU,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC;AACvR,IAAIC,gBAAgB,GAAG;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EAAE,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAE,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAE,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAE,OAA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AAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,G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","ignoreList":[]},"metadata":{},"sourceType":"module"}