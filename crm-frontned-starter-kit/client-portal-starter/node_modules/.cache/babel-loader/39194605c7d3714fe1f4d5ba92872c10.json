{"ast":null,"code":"import{takeEvery,fork,put,all,call}from\"redux-saga/effects\";import{REGISTER_DEMO_USER,REGISTER_LIVE_USER,REGISTER_FOREX_LIVE_USER_REQUESTED,REGISTER_FOREX_DEMO_USER_REQUESTED,REGISTER_FOREX_IB_USER_REQUESTED}from\"./actionTypes\";import{registerLiveUserSuccessful,registerDemoUserSuccessful,registerLiveUserFailed,registerDemoUserFailed,registerForexLiveUserSuccessful,registerForexLiveUserFailed,registerForexDemoUserSuccessful,registerForexDemoUserFailed,registerForexIbUserSuccessful,registerForexIbUserFailed}from\"./actions\";import{changePortal}from\"../../actions\";import{registerLiveAPI,registerDemoAPI,registerForexLiveAPI,registerForexDemoAPI,registerForexIbAPI}from\"../../../../apis/register\";import{setUser}from\"../../../../apis/api_helper\";function registerLive(_ref){let{payload}=_ref;return function*(){try{const{history}=payload.user;const result=yield call(registerLiveAPI,payload);if(result.message===\"Data created  succesfull\"){setUser(result.result);yield put(changePortal(result.result.defaultPortal));yield put(registerLiveUserSuccessful(\"User created successfully\"));history.push(\"/dashboard\");}if(result.isSuccess===false){yield put(registerLiveUserFailed(result.message));}}catch(error){yield put(registerLiveUserFailed(error));}}();}function registerDemo(_ref2){let{payload}=_ref2;return function*(){try{const{history}=payload.user;const result=yield call(registerDemoAPI,payload);if(result.message===\"Data created  succesfull\"){setUser(result.result);yield put(changePortal(result.result.defaultPortal));yield put(registerDemoUserSuccessful(\"User created successfully\"));history.push(\"/dashboard\");}if(result.isSuccess===false){yield put(registerDemoUserFailed(result.message));}}catch(error){yield put(registerDemoUserFailed(error));}}();}// forex live \nfunction registerForexLiveUser(_ref3){let{payload}=_ref3;return function*(){try{const{history}=payload.user;const result=yield call(registerForexLiveAPI,payload);if(result.status){setUser(result.result);yield put(changePortal(result.result.defaultPortal));yield put(registerForexLiveUserSuccessful(\"User created successfully\"));history.push(\"/dashboard\");}if(!result.status){yield put(registerForexLiveUserFailed(result.message));}}catch(error){yield put(registerForexLiveUserFailed(error));}}();}// forex demo \nfunction registerForexDemoUser(_ref4){let{payload}=_ref4;return function*(){try{const{history}=payload.user;const result=yield call(registerForexDemoAPI,payload);if(result.status){setUser(result.result);yield put(changePortal(result.result.defaultPortal));yield put(registerForexDemoUserSuccessful(\"User created successfully\"));history.push(\"/dashboard\");}if(!result.status){yield put(registerForexDemoUserFailed(result.message));}}catch(error){yield put(registerForexDemoUserFailed(error));}}();}// forex ib\nfunction registerForexIbUser(_ref5){let{payload}=_ref5;return function*(){try{const{history}=payload.user;const result=yield call(registerForexIbAPI,payload);if(result.status){setUser(result.result);yield put(changePortal(result.result.defaultPortal));yield put(registerForexIbUserSuccessful(\"User created successfully\"));history.push(\"/dashboard\");}if(!result.status){yield put(registerForexIbUserFailed(result.message));}}catch(error){yield put(registerForexIbUserFailed(error));}}();}export function*watchUserRegister(){yield takeEvery(REGISTER_LIVE_USER,registerLive);yield takeEvery(REGISTER_DEMO_USER,registerDemo);yield takeEvery(REGISTER_FOREX_LIVE_USER_REQUESTED,registerForexLiveUser);yield takeEvery(REGISTER_FOREX_DEMO_USER_REQUESTED,registerForexDemoUser);yield takeEvery(REGISTER_FOREX_IB_USER_REQUESTED,registerForexIbUser);}function*accountSaga(){yield all([fork(watchUserRegister)]);}export default accountSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","REGISTER_DEMO_USER","REGISTER_LIVE_USER","REGISTER_FOREX_LIVE_USER_REQUESTED","REGISTER_FOREX_DEMO_USER_REQUESTED","REGISTER_FOREX_IB_USER_REQUESTED","registerLiveUserSuccessful","registerDemoUserSuccessful","registerLiveUserFailed","registerDemoUserFailed","registerForexLiveUserSuccessful","registerForexLiveUserFailed","registerForexDemoUserSuccessful","registerForexDemoUserFailed","registerForexIbUserSuccessful","registerForexIbUserFailed","changePortal","registerLiveAPI","registerDemoAPI","registerForexLiveAPI","registerForexDemoAPI","registerForexIbAPI","setUser","registerLive","_ref","payload","history","user","result","message","defaultPortal","push","isSuccess","error","registerDemo","_ref2","registerForexLiveUser","_ref3","status","registerForexDemoUser","_ref4","registerForexIbUser","_ref5","watchUserRegister","accountSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/general/auth/register/saga.js"],"sourcesContent":["import {\n  takeEvery, fork, put, all, call\n} from \"redux-saga/effects\";\nimport {\n  REGISTER_DEMO_USER,\n  REGISTER_LIVE_USER,\n\n  REGISTER_FOREX_LIVE_USER_REQUESTED,\n  REGISTER_FOREX_DEMO_USER_REQUESTED,\n  REGISTER_FOREX_IB_USER_REQUESTED\n} from \"./actionTypes\";\nimport {\n  registerLiveUserSuccessful,\n  registerDemoUserSuccessful,\n  registerLiveUserFailed,\n  registerDemoUserFailed,\n\n  registerForexLiveUserSuccessful,\n  registerForexLiveUserFailed,\n  registerForexDemoUserSuccessful,\n  registerForexDemoUserFailed,\n  registerForexIbUserSuccessful,\n  registerForexIbUserFailed,\n} from \"./actions\";\nimport { changePortal } from \"../../actions\";\nimport {\n  registerLiveAPI,\n  registerDemoAPI,\n  registerForexLiveAPI,\n  registerForexDemoAPI,\n  registerForexIbAPI\n} from \"../../../../apis/register\";\nimport { setUser } from \"../../../../apis/api_helper\";\n\nfunction* registerLive({ payload }) {\n  try {\n    const { history } = payload.user;\n    const result = yield call(registerLiveAPI, payload);\n    if (result.message === \"Data created  succesfull\") {\n      setUser(result.result);\n      yield put(changePortal(result.result.defaultPortal));\n      yield put(registerLiveUserSuccessful(\"User created successfully\"));\n      history.push(\"/dashboard\");\n    }\n    if (result.isSuccess === false) {\n      yield put(registerLiveUserFailed(result.message));\n    }\n  } catch (error) {\n    yield put(registerLiveUserFailed(error));\n  }\n}\n\nfunction* registerDemo({ payload }) {\n  try {\n    const { history } = payload.user;\n    const result = yield call(registerDemoAPI, payload);\n    if (result.message === \"Data created  succesfull\") {\n      setUser(result.result);\n      yield put(changePortal(result.result.defaultPortal));\n      yield put(registerDemoUserSuccessful(\"User created successfully\"));\n      history.push(\"/dashboard\");\n    }\n    if (result.isSuccess === false) {\n      yield put(registerDemoUserFailed(result.message));\n    }\n  } catch (error) {\n    yield put(registerDemoUserFailed(error));\n  }\n}\n\n// forex live \nfunction* registerForexLiveUser({ payload }) {\n  try {\n    const { history } = payload.user;\n    const result = yield call(registerForexLiveAPI, payload);\n    if (result.status) {\n      setUser(result.result);\n      yield put(changePortal(result.result.defaultPortal));\n      yield put(registerForexLiveUserSuccessful(\"User created successfully\"));\n      history.push(\"/dashboard\");\n    }\n    if (!result.status) {\n      yield put(registerForexLiveUserFailed(result.message));\n    }\n  } catch (error) {\n    yield put(registerForexLiveUserFailed(error));\n  }\n}\n\n// forex demo \nfunction* registerForexDemoUser({ payload }) {\n  try {\n    const { history } = payload.user;\n    const result = yield call(registerForexDemoAPI, payload);\n    if (result.status) {\n      setUser(result.result);\n      yield put(changePortal(result.result.defaultPortal));\n      yield put(registerForexDemoUserSuccessful(\"User created successfully\"));\n      history.push(\"/dashboard\");\n    }\n    if (!result.status) {\n      yield put(registerForexDemoUserFailed(result.message));\n    }\n  } catch (error) {\n    yield put(registerForexDemoUserFailed(error));\n  }\n}\n\n// forex ib\nfunction* registerForexIbUser({ payload }) {\n  try {\n    const { history } = payload.user;\n    const result = yield call(registerForexIbAPI, payload);\n    if (result.status) {\n      setUser(result.result);\n      yield put(changePortal(result.result.defaultPortal));\n      yield put(registerForexIbUserSuccessful(\"User created successfully\"));\n      history.push(\"/dashboard\");\n    }\n    if (!result.status) {\n      yield put(registerForexIbUserFailed(result.message));\n    }\n  } catch (error) {\n    yield put(registerForexIbUserFailed(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_LIVE_USER, registerLive);\n  yield takeEvery(REGISTER_DEMO_USER, registerDemo);\n  yield takeEvery(REGISTER_FOREX_LIVE_USER_REQUESTED, registerForexLiveUser);\n  yield takeEvery(REGISTER_FOREX_DEMO_USER_REQUESTED, registerForexDemoUser);\n  yield takeEvery(REGISTER_FOREX_IB_USER_REQUESTED, registerForexIbUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}