{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/king/portal/client-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{call,put,takeEvery}from\"redux-saga/effects\";import{FETCH_NOTIFICATIONS,MARK_NOTIFICATIONS_READ}from\"./actionTypes\";import{fetchNotificationsSuccess,fetchNotificationsFailed,markNotificationReadSuccess,markNotificationReadFailed}from\"./actions\";import*as api from\"../../../apis/notifications\";import{showErrorNotification}from\"../../../store/general/notifications/actions\";function fetchNotifications(_ref){let{payload}=_ref;return function*(){try{const{result}=yield call(api.fetchNotifications,payload);if(result){if(payload.read===false||payload.read===\"false\"){yield put(fetchNotificationsSuccess(_objectSpread(_objectSpread({},result),{},{unread:true})));}else{yield put(fetchNotificationsSuccess(result));}}else{yield put(fetchNotificationsFailed(\"Error fetching notifications\"));yield put(showErrorNotification(\"Error fetching notifications\"));}}catch(error){yield put(fetchNotificationsFailed(\"Error fetching notifications\"));yield put(showErrorNotification(\"Error fetching notifications\"));}}();}function markNotificationsRead(_ref2){let{payload}=_ref2;return function*(){try{const{result}=yield call(api.markNotificationsRead,payload);if(result){yield put(markNotificationReadSuccess(payload));}else{yield put(markNotificationReadFailed(\"Error marking notification as read\"));}}catch(error){yield put(markNotificationReadFailed(\"Error marking notification as read\"));}}();}function*notificationsSaga(){yield takeEvery(FETCH_NOTIFICATIONS,fetchNotifications);yield takeEvery(MARK_NOTIFICATIONS_READ,markNotificationsRead);}export default notificationsSaga;","map":{"version":3,"names":["call","put","takeEvery","FETCH_NOTIFICATIONS","MARK_NOTIFICATIONS_READ","fetchNotificationsSuccess","fetchNotificationsFailed","markNotificationReadSuccess","markNotificationReadFailed","api","showErrorNotification","fetchNotifications","_ref","payload","result","read","_objectSpread","unread","error","markNotificationsRead","_ref2","notificationsSaga"],"sources":["/home/ubuntu/king/portal/client-portal-starter/src/store/general/notifications/saga.js"],"sourcesContent":["import {\n  call, put, takeEvery,\n} from \"redux-saga/effects\";\n\nimport {\n  FETCH_NOTIFICATIONS,\n  MARK_NOTIFICATIONS_READ\n} from \"./actionTypes\";\n\nimport {\n  fetchNotificationsSuccess,\n  fetchNotificationsFailed,\n  markNotificationReadSuccess,\n  markNotificationReadFailed,\n} from \"./actions\";\n\nimport * as api from \"../../../apis/notifications\";\nimport { showErrorNotification } from \"../../../store/general/notifications/actions\";\n\nfunction* fetchNotifications({ payload }) {\n  try {\n    const { result } = yield call(api.fetchNotifications, payload);\n    if (result) {\n      if ((payload.read === false || payload.read === \"false\")) {\n        yield put(fetchNotificationsSuccess({\n          ...result,\n          unread: true,\n        }));\n      } else {\n        yield put(fetchNotificationsSuccess(result));\n      }\n    } else {\n      yield put(fetchNotificationsFailed(\"Error fetching notifications\"));\n      yield put(showErrorNotification(\"Error fetching notifications\"));\n    }\n  } catch (error) {\n    yield put(fetchNotificationsFailed(\"Error fetching notifications\"));\n    yield put(showErrorNotification(\"Error fetching notifications\"));\n  }\n}\n\nfunction* markNotificationsRead({ payload }) {\n  try {\n    const { result } = yield call(api.markNotificationsRead, payload);\n    if (result) {\n      yield put(markNotificationReadSuccess(payload));\n    } else {\n      yield put(markNotificationReadFailed(\"Error marking notification as read\"));\n    }\n  } catch (error) {\n    yield put(markNotificationReadFailed(\"Error marking notification as read\"));\n  }\n}\n\n\nfunction* notificationsSaga() {\n  yield takeEvery(FETCH_NOTIFICATIONS, fetchNotifications);\n  yield takeEvery(MARK_NOTIFICATIONS_READ, markNotificationsRead);\n}\n\nexport default notificationsSaga;"],"mappings":"mIAAA,OACEA,IAAI,CAAEC,GAAG,CAAEC,SAAS,KACf,oBAAoB,CAE3B,OACEC,mBAAmB,CACnBC,uBAAuB,KAClB,eAAe,CAEtB,OACEC,yBAAyB,CACzBC,wBAAwB,CACxBC,2BAA2B,CAC3BC,0BAA0B,KACrB,WAAW,CAElB,MAAO,GAAK,CAAAC,GAAG,KAAM,6BAA6B,CAClD,OAASC,qBAAqB,KAAQ,8CAA8C,CAEpF,QAAU,CAAAC,kBAAkBA,CAAAC,IAAA,KAAC,CAAEC,OAAQ,CAAC,CAAAD,IAAA,mBAAE,CACxC,GAAI,CACF,KAAM,CAAEE,MAAO,CAAC,CAAG,KAAM,CAAAd,IAAI,CAACS,GAAG,CAACE,kBAAkB,CAAEE,OAAO,CAAC,CAC9D,GAAIC,MAAM,CAAE,CACV,GAAKD,OAAO,CAACE,IAAI,GAAK,KAAK,EAAIF,OAAO,CAACE,IAAI,GAAK,OAAO,CAAG,CACxD,KAAM,CAAAd,GAAG,CAACI,yBAAyB,CAAAW,aAAA,CAAAA,aAAA,IAC9BF,MAAM,MACTG,MAAM,CAAE,IAAI,EACb,CAAC,CAAC,CACL,CAAC,IAAM,CACL,KAAM,CAAAhB,GAAG,CAACI,yBAAyB,CAACS,MAAM,CAAC,CAAC,CAC9C,CACF,CAAC,IAAM,CACL,KAAM,CAAAb,GAAG,CAACK,wBAAwB,CAAC,8BAA8B,CAAC,CAAC,CACnE,KAAM,CAAAL,GAAG,CAACS,qBAAqB,CAAC,8BAA8B,CAAC,CAAC,CAClE,CACF,CAAE,MAAOQ,KAAK,CAAE,CACd,KAAM,CAAAjB,GAAG,CAACK,wBAAwB,CAAC,8BAA8B,CAAC,CAAC,CACnE,KAAM,CAAAL,GAAG,CAACS,qBAAqB,CAAC,8BAA8B,CAAC,CAAC,CAClE,CACF,CAAC,IAED,QAAU,CAAAS,qBAAqBA,CAAAC,KAAA,KAAC,CAAEP,OAAQ,CAAC,CAAAO,KAAA,mBAAE,CAC3C,GAAI,CACF,KAAM,CAAEN,MAAO,CAAC,CAAG,KAAM,CAAAd,IAAI,CAACS,GAAG,CAACU,qBAAqB,CAAEN,OAAO,CAAC,CACjE,GAAIC,MAAM,CAAE,CACV,KAAM,CAAAb,GAAG,CAACM,2BAA2B,CAACM,OAAO,CAAC,CAAC,CACjD,CAAC,IAAM,CACL,KAAM,CAAAZ,GAAG,CAACO,0BAA0B,CAAC,oCAAoC,CAAC,CAAC,CAC7E,CACF,CAAE,MAAOU,KAAK,CAAE,CACd,KAAM,CAAAjB,GAAG,CAACO,0BAA0B,CAAC,oCAAoC,CAAC,CAAC,CAC7E,CACF,CAAC,IAGD,SAAUa,iBAAiBA,CAAA,CAAG,CAC5B,KAAM,CAAAnB,SAAS,CAACC,mBAAmB,CAAEQ,kBAAkB,CAAC,CACxD,KAAM,CAAAT,SAAS,CAACE,uBAAuB,CAAEe,qBAAqB,CAAC,CACjE,CAEA,cAAe,CAAAE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}