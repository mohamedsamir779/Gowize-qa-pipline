{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar INFINITY = 10000;\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    } else if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (var i = 0; i < subnodes.length; i++) {\n    var node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) break;\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\nvar _default = applyBestFit;\nexports[\"default\"] = _default;","map":{"version":3,"names":["exports","__esModule","INFINITY","getNextBreakpoint","subnodes","widths","lineNumber","position","minimumBadness","Infinity","sum","width","stretch","shrink","lineLength","Math","min","length","calculateRatio","node","i","type","ratio","penalty","badness","pow","abs","applyBestFit","nodes","count","breakpoints","breakpoint","push","slice","_default"],"sources":["/home/ubuntu/king/portal/client-portal-starter/node_modules/@react-pdf/textkit/engines/linebreaker/bestFit.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar INFINITY = 10000;\n\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    } else if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n\n    return 0;\n  };\n\n  for (var i = 0; i < subnodes.length; i++) {\n    var node = subnodes[i];\n\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n\n    if (sum.width - sum.shrink > lineLength) break;\n\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\n\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n\n    if (breakpoint) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n\n  return breakpoints;\n};\n\nvar _default = applyBestFit;\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}