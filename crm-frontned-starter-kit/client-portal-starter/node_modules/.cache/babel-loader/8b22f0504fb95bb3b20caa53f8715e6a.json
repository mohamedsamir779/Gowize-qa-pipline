{"ast":null,"code":"import{takeEvery,put,call,all,fork}from\"redux-saga/effects\";// Calender Redux States\nimport{ADD_NEW_EVENT,DELETE_EVENT,GET_CATEGORIES,GET_EVENTS,UPDATE_EVENT}from\"./actionTypes\";import{apiSuccess,apiFail,updateEventSuccess,updateEventFail,deleteEventSuccess,deleteEventFail,getCategoriesSuccess,getCategoriesFail}from\"./actions\";//Include Both Helper File with needed methods\nimport{getEvents,addNewEvent,updateEvent,deleteEvent,getCategories}from\"../../../helpers/fakebackend_helper\";function*fetchEvents(){try{const response=yield call(getEvents);yield put(apiSuccess(GET_EVENTS,response));}catch(error){yield put(apiFail(GET_EVENTS,error));}}function onAddNewEvent(_ref){let{payload:event}=_ref;return function*(){try{const response=yield call(addNewEvent,event);yield put(apiSuccess(ADD_NEW_EVENT,response));}catch(error){yield put(apiFail(ADD_NEW_EVENT,error));}}();}function onUpdateEvent(_ref2){let{payload:event}=_ref2;return function*(){try{const response=yield call(updateEvent,event);yield put(updateEventSuccess(response));}catch(error){yield put(updateEventFail(error));}}();}function onDeleteEvent(_ref3){let{payload:event}=_ref3;return function*(){try{const response=yield call(deleteEvent,event);yield put(deleteEventSuccess(response));}catch(error){yield put(deleteEventFail(error));}}();}function*onGetCategories(){try{const response=yield call(getCategories);yield put(getCategoriesSuccess(response));}catch(error){yield put(getCategoriesFail(error));}}export function*watchFetchEvents(){yield takeEvery(GET_EVENTS,fetchEvents);}export function*watchOnAddNewEvent(){yield takeEvery(ADD_NEW_EVENT,onAddNewEvent);}export function*watchOnUpdateEvent(){yield takeEvery(UPDATE_EVENT,onUpdateEvent);}export function*watchOnDeleteEvent(){yield takeEvery(DELETE_EVENT,onDeleteEvent);}export function*watchOnGetCategories(){yield takeEvery(GET_CATEGORIES,onGetCategories);}function*calendarSaga(){yield all([fork(watchFetchEvents)]);yield all([fork(watchOnAddNewEvent)]);yield all([fork(watchOnUpdateEvent)]);yield all([fork(watchOnDeleteEvent)]);yield all([fork(watchOnGetCategories)]);}export default calendarSaga;","map":{"version":3,"names":["takeEvery","put","call","all","fork","ADD_NEW_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_EVENTS","UPDATE_EVENT","apiSuccess","apiFail","updateEventSuccess","updateEventFail","deleteEventSuccess","deleteEventFail","getCategoriesSuccess","getCategoriesFail","getEvents","addNewEvent","updateEvent","deleteEvent","getCategories","fetchEvents","response","error","onAddNewEvent","_ref","payload","event","onUpdateEvent","_ref2","onDeleteEvent","_ref3","onGetCategories","watchFetchEvents","watchOnAddNewEvent","watchOnUpdateEvent","watchOnDeleteEvent","watchOnGetCategories","calendarSaga"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/src/store/crypto/calendar/saga.js"],"sourcesContent":["import {\n  takeEvery, put, call, all, fork \n} from \"redux-saga/effects\";\n\n// Calender Redux States\nimport {\n  ADD_NEW_EVENT,\n  DELETE_EVENT,\n  GET_CATEGORIES,\n  GET_EVENTS,\n  UPDATE_EVENT,\n} from \"./actionTypes\";\nimport {\n  apiSuccess, apiFail,\n  updateEventSuccess,\n  updateEventFail,\n  deleteEventSuccess,\n  deleteEventFail,\n  getCategoriesSuccess,\n  getCategoriesFail,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport {\n  getEvents,\n  addNewEvent,\n  updateEvent,\n  deleteEvent,\n  getCategories,\n} from \"../../../helpers/fakebackend_helper\";\n\nfunction* fetchEvents() {\n  try {\n    const response = yield call(getEvents);\n    yield put(apiSuccess(GET_EVENTS, response));\n  } catch (error) {\n    yield put(apiFail(GET_EVENTS, error));\n  }\n}\n\nfunction* onAddNewEvent({ payload: event }) {\n  try {\n    const response = yield call(addNewEvent, event);\n    yield put(apiSuccess(ADD_NEW_EVENT, response));\n  } catch (error) {\n    yield put(apiFail(ADD_NEW_EVENT, error));\n  }\n}\n\nfunction* onUpdateEvent({ payload: event }) {\n  try {\n    const response = yield call(updateEvent, event);\n    yield put(updateEventSuccess(response));\n  } catch (error) {\n    yield put(updateEventFail(error));\n  }\n}\n\nfunction* onDeleteEvent({ payload: event }) {\n  try {\n    const response = yield call(deleteEvent, event);\n    yield put(deleteEventSuccess(response));\n  } catch (error) {\n    yield put(deleteEventFail(error));\n  }\n}\n\nfunction* onGetCategories() {\n  try {\n    const response = yield call(getCategories);\n    yield put(getCategoriesSuccess(response));\n  } catch (error) {\n    yield put(getCategoriesFail(error));\n  }\n}\n\nexport function* watchFetchEvents() {\n  yield takeEvery(GET_EVENTS, fetchEvents);\n}\n\nexport function* watchOnAddNewEvent() {\n  yield takeEvery(ADD_NEW_EVENT, onAddNewEvent);\n}\n\nexport function* watchOnUpdateEvent() {\n  yield takeEvery(UPDATE_EVENT, onUpdateEvent);\n}\nexport function* watchOnDeleteEvent() {\n  yield takeEvery(DELETE_EVENT, onDeleteEvent);\n}\nexport function* watchOnGetCategories() {\n  yield takeEvery(GET_CATEGORIES, onGetCategories);\n}\n\nfunction* calendarSaga() {\n  yield all([fork(watchFetchEvents)]);\n  yield all([fork(watchOnAddNewEvent)]);\n  yield all([fork(watchOnUpdateEvent)]);\n  yield all([fork(watchOnDeleteEvent)]);\n  yield all([fork(watchOnGetCategories)]);\n}\n\nexport default calendarSaga;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}