{"ast":null,"code":"import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  let excludedEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  let nodes = new Set();\n  let excludes = new Set(excludedEdges.map(_ref => {\n    let [a, b] = _ref;\n    return \"\".concat(a, \"-\").concat(b);\n  }));\n  function addNode(depPath, key) {\n    let node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(\"\".concat(key, \"-\").concat(node))) edges.push([key, node]);\n  }\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    nodes.add(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n  return toposort.array(Array.from(nodes), edges).reverse();\n}","map":{"version":3,"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludedEdges","arguments","length","undefined","edges","nodes","Set","excludes","map","_ref","a","b","concat","addNode","depPath","key","node","add","push","value","isRef","isSibling","path","deps","forEach","array","Array","from","reverse"],"sources":["/home/ubuntu/Gowize-qa-pipline/client-portal-starter/node_modules/yup/es/util/sortFields.js"],"sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludedEdges = []) {\n  let edges = [];\n  let nodes = new Set();\n  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));\n\n  function addNode(depPath, key) {\n    let node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    nodes.add(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(Array.from(nodes), edges).reverse();\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY,CAAC,CAAC;;AAE9B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,SAASC,KAAK,QAAQ,eAAe;AACrC,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,QAAQ,MAAM,YAAY;AACjC,eAAe,SAASC,UAAUA,CAACC,MAAM,EAAsB;EAAA,IAApBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC3D,IAAIG,KAAK,GAAG,EAAE;EACd,IAAIC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,IAAIC,QAAQ,GAAG,IAAID,GAAG,CAACN,aAAa,CAACQ,GAAG,CAACC,IAAA;IAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAAF,IAAA;IAAA,UAAAG,MAAA,CAAQF,CAAC,OAAAE,MAAA,CAAID,CAAC;EAAA,CAAE,CAAC,CAAC;EAElE,SAASE,OAAOA,CAACC,OAAO,EAAEC,GAAG,EAAE;IAC7B,IAAIC,IAAI,GAAGrB,KAAK,CAACmB,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5BT,KAAK,CAACY,GAAG,CAACD,IAAI,CAAC;IACf,IAAI,CAACT,QAAQ,CAACd,GAAG,IAAAmB,MAAA,CAAIG,GAAG,OAAAH,MAAA,CAAII,IAAI,CAAE,CAAC,EAAEZ,KAAK,CAACc,IAAI,CAAC,CAACH,GAAG,EAAEC,IAAI,CAAC,CAAC;EAC9D;EAEA,KAAK,MAAMD,GAAG,IAAIhB,MAAM,EAAE,IAAIN,GAAG,CAACM,MAAM,EAAEgB,GAAG,CAAC,EAAE;IAC9C,IAAII,KAAK,GAAGpB,MAAM,CAACgB,GAAG,CAAC;IACvBV,KAAK,CAACY,GAAG,CAACF,GAAG,CAAC;IACd,IAAInB,GAAG,CAACwB,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACE,SAAS,EAAER,OAAO,CAACM,KAAK,CAACG,IAAI,EAAEP,GAAG,CAAC,CAAC,KAAK,IAAIlB,QAAQ,CAACsB,KAAK,CAAC,IAAI,MAAM,IAAIA,KAAK,EAAEA,KAAK,CAACI,IAAI,CAACC,OAAO,CAACF,IAAI,IAAIT,OAAO,CAACS,IAAI,EAAEP,GAAG,CAAC,CAAC;EAC/J;EAEA,OAAOrB,QAAQ,CAAC+B,KAAK,CAACC,KAAK,CAACC,IAAI,CAACtB,KAAK,CAAC,EAAED,KAAK,CAAC,CAACwB,OAAO,CAAC,CAAC;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module"}