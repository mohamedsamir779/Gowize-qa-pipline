{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _advanceWidth = _interopRequireDefault(require(\"../attributedString/advanceWidth\"));\nvar _leadingOffset = _interopRequireDefault(require(\"../attributedString/leadingOffset\"));\nvar _trailingOffset = _interopRequireDefault(require(\"../attributedString/trailingOffset\"));\nvar _dropLast = _interopRequireDefault(require(\"../attributedString/dropLast\"));\nvar ALIGNMENT_FACTORS = {\n  left: 0,\n  center: 0.5,\n  right: 1,\n  justify: 0\n};\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar removeNewLine = R.when(R.compose(R.equals('\\n'), R.last, R.prop('string')), _dropLast[\"default\"]);\nvar getOverflowLeft = R.converge(R.add, [R.propOr(0, 'overflowLeft'), _leadingOffset[\"default\"]]);\nvar getOverflowRight = R.converge(R.add, [R.propOr(0, 'overflowRight'), _trailingOffset[\"default\"]]);\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  return R.compose(R.assoc('overflowLeft', overflowLeft), R.assoc('overflowRight', overflowRight), R.evolve({\n    box: R.evolve({\n      x: R.subtract(R.__, overflowLeft),\n      width: R.add(overflowLeft + overflowRight)\n    })\n  }))(line);\n};\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar justifyLine = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineAdvanceWidth = (0, _advanceWidth[\"default\"])(line);\n    var remainingWidth = Math.max(0, line.box.width - lineAdvanceWidth);\n    var shouldJustify = align === 'justify' || lineAdvanceWidth > line.box.width;\n    return R.compose(R.when(R.always(shouldJustify), engines.justification(options)), R.evolve({\n      box: R.evolve({\n        x: R.add(remainingWidth * ALIGNMENT_FACTORS[align])\n      })\n    }))(line);\n  };\n};\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\n\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  return function (line, i, lines) {\n    var isLastFragment = i === lines.length - 1;\n    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return R.compose(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\n\nvar finalizeFragments = function finalizeFragments(engines, options, blocks) {\n  return R.map(R.addIndex(R.map)(finalizeBlock(engines, options)), blocks);\n};\nvar _default = R.curryN(3, finalizeFragments);\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_advanceWidth","_leadingOffset","_trailingOffset","_dropLast","ALIGNMENT_FACTORS","left","center","right","justify","removeNewLine","when","compose","equals","last","prop","getOverflowLeft","converge","add","propOr","getOverflowRight","adjustOverflow","line","overflowLeft","overflowRight","assoc","evolve","box","x","subtract","__","width","justifyLine","engines","options","align","lineAdvanceWidth","remainingWidth","Math","max","shouldJustify","always","justification","finalizeBlock","i","lines","isLastFragment","length","style","pathOr","alignLastLine","textDecoration","finalizeFragments","blocks","map","addIndex","_default","curryN"],"sources":["/home/ubuntu/king/portal/client-portal-starter/node_modules/@react-pdf/textkit/layout/finalizeFragments.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../attributedString/advanceWidth\"));\n\nvar _leadingOffset = _interopRequireDefault(require(\"../attributedString/leadingOffset\"));\n\nvar _trailingOffset = _interopRequireDefault(require(\"../attributedString/trailingOffset\"));\n\nvar _dropLast = _interopRequireDefault(require(\"../attributedString/dropLast\"));\n\nvar ALIGNMENT_FACTORS = {\n  left: 0,\n  center: 0.5,\n  right: 1,\n  justify: 0\n};\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar removeNewLine = R.when(R.compose(R.equals('\\n'), R.last, R.prop('string')), _dropLast[\"default\"]);\nvar getOverflowLeft = R.converge(R.add, [R.propOr(0, 'overflowLeft'), _leadingOffset[\"default\"]]);\nvar getOverflowRight = R.converge(R.add, [R.propOr(0, 'overflowRight'), _trailingOffset[\"default\"]]);\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  return R.compose(R.assoc('overflowLeft', overflowLeft), R.assoc('overflowRight', overflowRight), R.evolve({\n    box: R.evolve({\n      x: R.subtract(R.__, overflowLeft),\n      width: R.add(overflowLeft + overflowRight)\n    })\n  }))(line);\n};\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\n\n\nvar justifyLine = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineAdvanceWidth = (0, _advanceWidth[\"default\"])(line);\n    var remainingWidth = Math.max(0, line.box.width - lineAdvanceWidth);\n    var shouldJustify = align === 'justify' || lineAdvanceWidth > line.box.width;\n    return R.compose(R.when(R.always(shouldJustify), engines.justification(options)), R.evolve({\n      box: R.evolve({\n        x: R.add(remainingWidth * ALIGNMENT_FACTORS[align])\n      })\n    }))(line);\n  };\n};\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\n\n\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n\n  return function (line, i, lines) {\n    var isLastFragment = i === lines.length - 1;\n    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return R.compose(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\n\n\nvar finalizeFragments = function finalizeFragments(engines, options, blocks) {\n  return R.map(R.addIndex(R.map)(finalizeBlock(engines, options)), blocks);\n};\n\nvar _default = R.curryN(3, finalizeFragments);\n\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}