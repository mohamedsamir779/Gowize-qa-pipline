module.exports = {
  port: process.env.PORT,
  currentEnvironment: process.env.ENVIRONMENT,
  mongoUrl: process.env.MONGO_URI,
  cpUrl: process.env.CLIENT_PORTAL_URL || 'https://crypto-client-portal.herokuapp.com/',
  clientId: process.env.CLIENT_ID || -1,
  clientName: process.env.CLIENT_NAME || 'ITGeeks',
  privacyPolicyLink: process.env.PRIVACY_POLICY_LINK || '#',
  clientAgreementLink: process.env.CLIENT_AGREEMENT_LINK || '#',
  companyWebsite: process.env.COMPANY_WEBSITE || process.env.CLIENT_PORTAL_URL || 'https://crypto-client-portal.herokuapp.com/',
  customerSupportName: process.env.CUSTOMER_SUPPORT_NAME || 'Customer Support',
  clientLogo: process.env.CLIENT_LOGO || 'https://exinitiweb.blob.core.windows.net/data/assets/FINAL_EXINITI_LOGO_01_24a4e050ba.png',
  // email template
  socialLink1: process.env.SOCIAL_LINK_1 || 'https://twitter.com/',
  socialLink2: process.env.SOCIAL_LINK_2 || 'https://facebook.com/',
  socialLink3: process.env.SOCIAL_LINK_3 || 'https://linkedin.com/',
  socialLinkLogo1: process.env.SOCIAL_LINK_LOGO_1 || 'https://mxnmff.stripocdn.email/content/assets/img/social-icons/logo-black/twitter-logo-black.png',
  socialLinkLogo2: process.env.SOCIAL_LINK_LOGO_2 || 'https://mxnmff.stripocdn.email/content/assets/img/social-icons/logo-black/facebook-logo-black.png',
  socialLinkLogo3: process.env.SOCIAL_LINK_LOGO_3 || 'https://mxnmff.stripocdn.email/content/assets/img/social-icons/logo-black/linkedin-logo-black.png',

  emailIcon: process.env.EMAIL_ICON || 'https://mxnmff.stripocdn.email/content/guids/CABINET_ee77850a5a9f3068d9355050e69c76d26d58c3ea2927fa145f0d7a894e624758/images/group_4076323.png',
  privacyPolicy: process.env.PRIVACY_POLICY || 'https://crypto-client-portal.herokuapp.com/',

  crmTokenTime: {
    jwtTime: '12h',
    seconds: 60 * 60 * 12,
  },
  cpTokenTime: {
    jwtTime: '24h',
    seconds: 60 * 60 * 24,
  },
  cpResetPasswordTokenTime: {
    jwtTime: '1h',
    seconds: 60 * 60,
  },
  crmResetPasswordTokenTime: {
    jwtTime: '1h',
    seconds: 60 * 60,
  },
  twoFactorAuthTokenTime: {
    jwtTime: '1h',
    seconds: 60 * 60,
  },
  chartDataTime: {
    '24h': 60 * 30,
    '7d': 60 * 60 * 4,
    '30d': 60 * 60 * 24,
  },
  jwtKey: process.env.JWT_KEY || 'hahtesgsdfsdkljlhwjsdfsdf',
  isLogDirectoryEnabled: true,
  passwordSalt: 'sdfsdf7sd6f8s7difu',
  algorithm: 'aes-256-cbc',
  securityKey: '56e36f7c471289390e6c045b3b00cd9bf3b2b93e5b986e7eabeecb6e2d1f7dfe',
  initVector: '4d457786219f6d11d801f9ff90dc9f54',
  enableDecryptPassword: true,
  tatum: {
    apiKey: process.env.TATUM_API_KEY,
  },
  kycDocuments: ['ID', 'ADDRESS', 'MEMORANDUM', 'CORPORATE_ADDRESS', 'CERTIFICATE_OF_INCORPORATION'],
  redis: {
    port: process.env.REDIS_PORT,
    host: process.env.REDIS_HOST,
    username: process.env.REDIS_USERNAME,
    password: process.env.REDIS_PASSWORD,
    d: 0,
  },
  backendURL: process.env.BACKEND_URL,
  crmURL: `${process.env.CRM_URL}`,
  binanceKeys: {
    apiKey: process.env.BINANCE_API_KEY,
    secret: process.env.BINANCE_SECRET,
  },
  ftxKeys: {
    apiKey: process.env.FTX_API_KEY,
    secret: process.env.FTX_SECRET,
  },
  demoMode: process.env.DEMO_MODE || true,
  twoFAClientName: process.env.CLIENT_NAME || 'ITGeeks',
  platformLink: process.env.PLATFORM_LINK || '#',
  liveServer: process.env.LIVE_SERVER || 'Live-Server',
  demoServer: process.env.DEMO_SERVER || 'Demo-Server',
  mt5: {
    live: {
      MT5_HOST: process.env.MT5_LIVE_HOST,
      MT5_USERNAME: process.env.MT5_LIVE_USERNAME,
      MT5_PASSWORD: process.env.MT5_LIVE_PASSWORD,
      MT5_VERSION: 2560,
      MT5_AGENT: 'manager',
    },
    demo: {
      MT5_HOST: process.env.MT5_DEMO_HOST,
      MT5_USERNAME: process.env.MT5_DEMO_USERNAME,
      MT5_PASSWORD: process.env.MT5_DEMO_PASSWORD,
      MT5_VERSION: 2560,
      MT5_AGENT: 'manager',
    },
  },
  mt4: {
    live: {
      MT4_HOST: process.env.MT4_LIVE_HOST,
      MT4_USERNAME: process.env.MT4_LIVE_USERNAME,
      MT4_PASSWORD: process.env.MT4_LIVE_PASSWORD,
    },
    demo: {
      MT4_HOST: process.env.MT4_DEMO_HOST,
      MT4_USERNAME: process.env.MT4_DEMO_USERNAME,
      MT4_PASSWORD: process.env.MT4_DEMO_PASSWORD,
    },
  },
  broker: {
    BROKER_NAME: process.env.BROKER_NAME,
    WHITE_LABEL: process.env.WHITE_LABEL,
    ENABLE_CID_LINK: process.env.ENABLE_CID_LINK,
  },
  ctrader: {
    live: {
      URL: process.env.CTRADER_LIVE_URL,
      BASE_URL: process.env.CTRADER_LIVE_BASE_URL,
      PORT: process.env.CTRADER_LIVE_PORT,
      HOST: process.env.CTRADER_LIVE_BASE_URL,
      USERNAME: process.env.CTRADER_LIVE_LOGIN,
      PASSWORD: process.env.CTRADER_LIVE_PASSWORD,
    },
    demo: {
      URL: process.env.CTRADER_URL,
      BASE_URL: process.env.CTRADER_BASE_URL,
      PORT: process.env.CTRADER_PORT,
      HOST: process.env.CTRADER_BASE_URL,
      USERNAME: process.env.CTRADER_LOGIN,
      PASSWORD: process.env.CTRADER_PASSWORD,
    },
  },
  azureBlob: {
    enable: true,
    containerName: process.env.AZURE_BLOB_CONTAINER_NAME,
    connectionString: process.env.AZURE_BLOB_CONNECTION_STRING,
    blobName: process.env.AZURE_BLOB_NAME,
    key: process.env.AZURE_BLOB_KEY,
    publicContainerName: process.env.AZURE_BLOB_PUBLIC_CONTAINER_NAME,
  },
  ibLevelDefault: 5,
  mysql: {
    database: process.env.MYSQL_DATABASE,
    username: process.env.MYSQL_USERNAME,
    password: process.env.MYSQL_PASSWORD,
    host: process.env.MYSQL_HOST,
  },
  rabbitMqConfig: {
    url: process.env.RABBIT_MQ_URL,
    mt5OpenDeals: process.env.MT5_OPEN_DEALS,
    mt5CloseDeals: process.env.MT5_CLOSE_DEALS,
    ctraderOpenDeals: process.env.CTRADER_OPEN_DEALS,
    ctraderCloseDeals: process.env.CTRADER_CLOSE_DEALS,
    mt5Deals: process.env.MT5_DEALS,
    ctraderDeals: process.env.CTRADER_DEALS,
    ctraderSymbols: process.env.CTRADER_SYMBOLS,
  },
  enableCryptoWallets: process.env.ENABLE_CRYPTO_WALLETS === 'true',
  enableCrypto: process.env.ENABLE_CRYPTO === 'true',
  enableFX: process.env.ENABLE_FX === 'true',
  enableGold: process.env.ENABLE_GOLD === 'true',
  enableMM: process.env.ENABLE_MM === 'true',
  portals: {
    FOREX: 'FOREX', CRYPTO: 'CRYPTO', GOLD: 'GOLD', MM: 'MM',
  },
  defaultPortal: process.env.DEFAULT_PORTAL || 'FOREX',
  subTypes: { LIVE: 'LIVE', DEMO: 'DEMO', IB: 'IB' },
  defaultSubType: process.env.DEFAULT_SUB_TYPE || 'LIVE',
  customerTypes: { INDIVIDUAL: 'INDIVIDUAL', CORPORATE: 'CORPORATE' },
  customerDefaultPortal: process.env.DEFAULT_CUSTOMER_PORTAL || 'FOREX',
  customerDefaultSubPortal: process.env.DEFAULT_CUSTOMER_SUB_PORTAL || 'LIVE',
  defaultCustomerType: process.env.DEFAULT_CUSTOMER_TYPE || 'INDIVIDUAL',
  newDays: process.env.NEW_DAYS || 7,
  uiVisibility: {
    clientDetails: {
      profile: process.env.ENABLE_CLIENT_PROFILE === 'true',
      bankAccounts: process.env.ENABLE_CLIENT_BANK_ACCOUNTS === 'true',
      documents: process.env.ENABLE_CLIENT_DOCUMENTS === 'true',
      tradingAccounts: process.env.ENABLE_CLIENT_TRADING_ACCOUNTS === 'true',
      transactions: process.env.ENABLE_CLIENT_TRANSACTIONS === 'true',
      logs: process.env.ENABLE_CLIENT_LOGS === 'true',
      notes: process.env.ENABLE_CLIENT_NOTES === 'true',
      security: process.env.ENABLE_CLIENT_SECURITY === 'true',
      partnership: process.env.ENABLE_CLIENT_PARTNERSHIP === 'true',
      referral: process.env.ENABLE_CLIENT_REFERALL === 'true',
      statement: process.env.ENABLE_CLIENT_STATEMENT === 'true',
      converts: process.env.ENABLE_CLIENT_CONVERTS === 'true',
      wallets: process.env.ENABLE_CLIENT_WALLETS === 'true',
      orders: process.env.ENABLE_CLIENT_ORDERS === 'true',
    },
    leadsDetails: {
      profile: process.env.ENABLE_LEADS_CONVERTS === 'true',
      bankAccounts: process.env.ENABLE_LEADS_ACCOUNTS === 'true',
      documents: process.env.ENABLE_LEADSDOCUMENTS === 'true',
      tradingAccounts: process.env.ENABLE_LEADS_ACCOUNTS === 'true',
      transactions: process.env.ENABLE_LEADSNSACTIONS === 'true',
      logs: process.env.ENABLE_LEADSIENT_LOGS === 'true',
      notes: process.env.ENABLE_CLIENT_NOTES === 'true',
      security: process.env.ENABLE_LEADS_SECURITY === 'true',
      partnership: process.env.ENABLE_LEADSRTNERSHIP === 'true',
      referral: process.env.ENABLE_LEADS_REFERALL === 'true',
      statement: process.env.ENABLE_LEADSSTATEMENT === 'true',
      converts: process.env.ENABLE_LEADS_CONVERTS === 'true',
      wallets: process.env.ENABLE_LEADST_WALLETS === 'true',
      orders: process.env.ENABLE_LEADSNT_ORDERS === 'true',
    },
    menu: {
      dashboard: process.env.ENABLE_DASHBOARD === 'true',
      clients: process.env.ENABLE_CLIENTS === 'true',
      leads: process.env.ENABLE_LEADS === 'true',
      requests: process.env.ENABLE_REQUESTS === 'true',
      transactions: process.env.ENABLE_TRANSACTIONS === 'true',
      settings: process.env.ENABLE_SETTINGS === 'true',
      marketing: process.env.ENABLE_MERKETING === 'true',
      riskManagement: process.env.ENABLE_RISK_MANAGEMENT === 'true',
    },
    leads: {

    },
    requests: {
      accountRequest: process.env.ENABLE_REQUESTS_IB_ACCOUNT_REQUEST === 'true',
      ibRequest: process.env.ENABLE_REQUESTS_IB_REQUEST === 'true',
      changeLeverage: process.env.ENABLE_REQUESTS_CHANGE_LEVERAGE === 'true',
    },
    settings: {
      dictionaries: process.env.ENABLE_SETTINGS_DICTIONARIES === 'true',
      users: process.env.ENABLE_SETTINGS_USERS === 'true',
      accountTypes: process.env.ENABLE_SETTINGS_ACCOUNT_TYPES === 'true',
      roles: process.env.ENABLE_SETTINGS_ROLES === 'true',
      systemEmails: process.env.ENABLE_SETTINGS_SYSTEM_EMAILS === 'true',
      companyBanks: process.env.ENABLE_SETTINGS_COMPANY_BANKS === 'true',
      userLogs: process.env.ENABLE_SETTINGS_USER_LOGS === 'true',
      teams: process.env.ENABLE_SETTINGS_TEAMS === 'true',
      targets: process.env.ENABLE_SETTINGS_TARGETS === 'true',
      banners: process.env.ENABLE_SETTINGS_BANNERS === 'true',
      symbols: process.env.ENABLE_SETTINGS_SYMBOLS === 'true',
      currencyPairs: process.env.ENABLE_SETTINGS_CURRENCY_PAIRS === 'true',
      conversionRates: process.env.ENABLE_SETTINGS_CONVERSION_RATES === 'true',
      emailConfig: process.env.ENABLE_SETTINGS_EMAIL_CONFIG === 'true',
      emailCampaign: process.env.ENABLE_SETTINGS_EMAIL_CAMPAIGN === 'true',
    },
    riskManagement: {
      tradingFeeGroups: process.env.ENABLE_RISK_MANAGEMENT_TRADING_FEE_GROUPS === 'true',
      transactionFeeGroups: process.env.ENABLE_RISK_MANAGEMENT_TRANSACTION_FEE_GROUPS === 'true',
      markups: process.env.ENABLE_RISK_MANAGEMENT_MARKUPS === 'true',
      orderProfit: process.env.ENABLE_RISK_MANAGEMENT_ORDER_PROFIT === 'true',
      exchangeBalance: process.env.ENABLE_RISK_MANAGEMENT_EXCHANGE_BALANCE === 'true',
    },
    transactions: {
      deposit: process.env.ENABLE_TRANSACTIONS_DEPOSIT === 'true',
      withdrawal: process.env.ENABLE_TRANSACTIONS_WITHDRAWAL === 'true',
      internalTransfer: process.env.ENABLE_TRANSACTIONS_INTERNAL_TRANSFER === 'true',
      credit: process.env.ENABLE_TRANSACTIONS_INTERNAL_CREDIT === 'true',
      convert: process.env.ENABLE_TRANSACTIONS_CONVERT === 'true',
      withdrawalDetails: {
        crypto: process.env.ENABLE_TRANSACTIONS_WITHDRAWAL_CRYPTO === 'true' && process.env.ENABLE_CRYPTO === 'true',
        forex: process.env.ENABLE_TRANSACTIONS_WITHDRAWAL_FOREX === 'true' && process.env.ENABLE_FX === 'true',
      },
      depositDetails: {
        crypto: process.env.ENABLE_TRANSACTIONS_DEPOSIT_CRYPTO === 'true' && process.env.ENABLE_CRYPTO === 'true',
        forex: process.env.ENABLE_TRANSACTIONS_DEPOSIT_FOREX === 'true' && process.env.ENABLE_FX === 'true',
      },
    },
  },
  coinLayerAccessKey: process.env.COIN_LAYER_ACCESS_KEY,
  apiLayerAccessKey: process.env.API_LAYER_ACCESS_KEY,
  blockcypherApiKey: process.env.BLOCKCYPHER_API_KEY,
  frontendRedirectUrl: process.env.FRONT_END_FIAT_DEPOSIT_URL,
  mastercard: {
    url: process.env.MASTERCARD_API_URL,
    createCheckoutApiOperation: process.env.MASTERCARD_CREATE_CHECKOUT_API_OPERATION,
    apiPassword: process.env.MASTERCARD_API_PASSWORD,
    apiUsername: process.env.MASTERCARD_API_USERNAME,
    merchant: process.env.MASTERCARD_MERCHANT,
    authorizeInteractionOperation: process.env.MASTERCARD_AUTHORIZE_INERACTION_OPERATION,
    purchaseInteractionOperation: process.env.MASTERCARD_PURCHASE_INERACTION_OPERATION,
    currency: process.env.MASTERCARD_CURRENCY,
    notificationSecret: process.env.MASTERCARD_NOTIFICATION_SECRET,
    frontendDepositUrl: process.env.FRONT_END_DEPOSIT_URL,
  },
  pushNotifications: {
    vapidDetails: {
      subject: 'mailto:testingnotifiactions@mailinator.com',
      publicKey: process.env.VAPID_PUBLIC_KEY,
      privateKey: process.env.VAPID_PRIVATE_KEY,
    },
  },
  netellerPaySafe: {
    // authURL: process.env.PAYSAFE_AUTH_URL,
    paysafeClientId: process.env.PAYSAFE_CLIENT_ID,
    // paysafeClientSecret: process.env.PAYSAFE_CLIENT_SECRET,
    paysafeOrderUrl: process.env.PAYSAFE_ORDERS_URL,
    paysafePaymentUrl: process.env.PAYSAFE_PAYMENTS_URL,
    paysafeApiUsername: process.env.PAYSAFE_API_USERNAME,
    paysafeApiPassword: process.env.PAYSAFE_API_PASSWORD,
    paysafeCurrency: process.env.PAYSAFE_CURRENCY,
    successUrl: process.env.PAYSAFE_SUCCESS_URL,
    cancelUrl: process.env.PAYSAFE_CANCEL_URL,
    failureUrl: process.env.PAYSAFE_FAILURE_URL,
    itemName: 'Deposit',
    itemDescription: 'Amount',
    itemSku: 'Deposit in Trading Account',
  },
  skrill: {
    payToEmail: process.env.SKRILL_PAY_TO_EMAIL,
    statusUrl: process.env.SKRILL_STATUS_URL,
    currency: process.env.SKRILL_CURRENCY,
    paymentMethods: process.env.SKRILL_PAYMENT_METHODS,
    receipentDesc: process.env.SKRILL_RECEIPENT_DESCRIPTION,
    logo: process.env.SKRILL_LOGO,
    lang: process.env.SKRILL_LANGUAGE,
    detail1Desc: process.env.SKRILL_DETAIL1_DESCRIPTION,
    detail1Text: process.env.SKRILL_DETAIL1_TEXT,
    returnUrl: process.env.SKRILL_RETURN_URL,
    returnBtnTxt: process.env.SKRILL_RETURN_BUTTON_TEXT,
    statusUrl2: process.env.SKRILL_STATUS_URL_MAIL,
    paymentUrl: process.env.SKRIL_PAYMENT_URL,
    paymentMethod: process.env.SKRILL_PAYMENT_METHOD,
  },
  cashu: {
    url: process.env.CASHU_SOAP_URL,
    merchantID: process.env.CASHU_MERCHANT_ID,
    encriptionKey: process.env.CASHU_ENCRIPTION_KEY,
    currency: process.env.CASHU_CURRENCY,
    displayText: process.env.CASHU_DISPLAY_TEXT,
    servicesName: process.env.CASHU_SERVICE_NAME,
    frontendDepositUrl: process.env.FRONT_END_DEPOSIT_URL,
  },
  jcc: {
    merchantId: process.env.JCC_MERID,
    version: process.env.JCC_VERSION,
    acqid: process.env.JCC_ACQID,
    usdIso: process.env.JCC_CURRENCY_ISO_USD,
    apiPassword: process.env.JCC_API_PASSWORD,
    jccUrl: process.env.JCC_URL,
  },
  epayme: {
    merchantId: process.env.EPAYME_MERCHANT_ID,
    apiUrl: process.env.EPAYME_APIURL,
  },
  myfatoorah: {
    authToken: process.env.MYFATOORAH_AUTH_TOKEN || 'rLtt6JWvbUHDDhsZnfpAhpYk4dxYDQkbcPTyGaKp2TYqQgG7FGZ5Th_WD53Oq8Ebz6A53njUoo1w3pjU1D4vs_ZMqFiz_j0urb_BH9Oq9VZoKFoJEDAbRZepGcQanImyYrry7Kt6MnMdgfG5jn4HngWoRdKduNNyP4kzcp3mRv7x00ahkm9LAK7ZRieg7k1PDAnBIOG3EyVSJ5kK4WLMvYr7sCwHbHcu4A5WwelxYK0GMJy37bNAarSJDFQsJ2ZvJjvMDmfWwDVFEVe_5tOomfVNt6bOg9mexbGjMrnHBnKnZR1vQbBtQieDlQepzTZMuQrSuKn-t5XZM7V6fCW7oP-uXGX-sMOajeX65JOf6XVpk29DP6ro8WTAflCDANC193yof8-f5_EYY-3hXhJj7RBXmizDpneEQDSaSz5sFk0sV5qPcARJ9zGG73vuGFyenjPPmtDtXtpx35A-BVcOSBYVIWe9kndG3nclfefjKEuZ3m4jL9Gg1h2JBvmXSMYiZtp9MR5I6pvbvylU_PP5xJFSjVTIz7IQSjcVGO41npnwIxRXNRxFOdIUHn0tjQ-7LwvEcTXyPsHXcMD8WtgBh-wxR8aKX7WPSsT1O8d8reb2aR7K3rkV3K82K_0OgawImEpwSvp9MNKynEAJQS6ZHe_J_l77652xwPNxMRTMASk1ZsJL',
    baseURL: process.env.MYFATOORAH_BASE_URL || 'https://apitest.myfatoorah.com',
    initiatePayment: process.env.MYFATOORAH_INITIATE || '/v2/InitiatePayment',
    executePayment: process.env.MYFATOORAH_EXECUTE || '/v2/ExecutePayment',
    paymentStatus: process.env.MYFATOORAH_PAYMENT_STATUS || '/v2/GetPaymentStatus',
    currency: process.env.MYFATOORAH_CURRENCY || 'USD',
    successUrl: process.env.MYFATOORAH_SUCCESS_URL || '/myfatoorah/success',
    failureUrl: process.env.MYFATOORAH_FAILURE_URL || '/myfatoorah/failed',
  },
  knet: {
    frontendDepositUrl: process.env.FRONT_END_DEPOSIT_URL,
    url: process.env.KNET_API_URL,
    getAuthTokenUrl: process.env.KNET_AUTHENTICATE_KEY_URL,
    clientId: process.env.KNET_CLIENT_ID,
    clientSecret: process.env.KNET_CLIENT_SECRET,
    encryptKey: process.env.KNET_ENCRYPT_KEY,
    backendPaymentVerifyUrl: process.env.KNET_BACKEND_PAYMENT_VERIFY_URL,
    getTransactionResultUrl: process.env.KNET_TRANSACTION_RESULT,
    payTypeKnet: process.env.KNET_PAY_TYPE_KNET,
    payTypeQR: process.env.KNET_PAY_TYPE_QR,
    paymentVerificationUrl: process.env.KNET_VERIFY_TRANSACTION_URL,
  },
  walaoPay: {
    aweUrl: process.env.AWE_URL,
    awePayoutURL: process.env.AWE_PAYOUT_URL,
    frontendDepositUrl: process.env.FRONT_END_DEPOSIT_URL,
    callbackBaseUrl: process.env.AWE_CALLBACK_BASE_URL,
    sid: process.env.AWE_SID,
    currency: process.env.AWE_CURRENCY,
    platformCurrency: process.env.PLATFORM_CURENCY,
    rCode: process.env.AWE_RCODE,
    paymentCurrencies: {
      IDR: {
        currency: 'IDR',
        rCode: 'ec3cdf',
        sid: '3654',
        solution: 'P2P',
      },
      MYR: {
        currency: 'MYR',
        rCode: 'ec3cdf',
        sid: '3655',
        solution: 'P2P',
      },
      THB: {
        currency: 'THB',
        rCode: 'ec3cdf',
        sid: '3656',
        solution: 'P2P',
      },
      VND: {
        currency: 'VND',
        rCode: 'ec3cdf',
        sid: '3657',
        solution: 'P2P',
      },
    },
  },
  coinPayments: {
    puk: process.env.COIN_PAYMENTS_PUK,
    pk: process.env.COIN_PAYMENTS_PK,
    successUrl: process.env.COIN_PAYMENTS_SUCCESS_URL,
    ipnUrl: process.env.COIN_PAYMENTS_IPN_URL,
    cancelUrl: process.env.COIN_PAYMENTS_CANCEL_URL,
    ipnSecret: process.env.COIN_PAYMENTS_IPN_SECRET,
    merchant: process.env.COIN_PAYMENTS_MERCHANT,
  },
  checkout: {
    url: process.env.CHECKOUT_API_URL,
    secretKey: process.env.CHECKOUT_SECRET_KEY,
    merchantKey: process.env.CHECKOUT_MERCHANT_KEY,
    hash: process.env.CHECKOUT_HASH,
    password: process.env.CHECKOUT_PASSWORD,
  },
  olxforex: {
    apiKey: process.env.OLX_FOREX_API_KEY,
    secretKey: process.env.OLX_FOREX_SECRET_KEY,
    depositUrl: process.env.OLX_FOREX_DEPOSIT_URL,
    merchantId: process.env.OLX_FOREX_MERCHANT_ID,
  },
  paymaxis: {
    apiKey: process.env.PAYMAXIS_API_KEY,
    secretKey: process.env.PAYMAXIS_SIGNING_KEY,
    baseUrl: process.env.PAYMAXIS_URL,
    frontendDepositUrl: process.env.FRONT_END_DEPOSIT_URL,
  },
  cryptoAPI: {
    apiKey: process.env.CRYPTO_API_KEY,
    callbackSecret: process.env.CRYPTO_API_CALLBACK_SECRET,
    callbackBaseUrl: `${process.env.CRM_URL}/api/v1/crm/cryptoapi`,
  },
  finiticPay: {
    merchantId: process.env.FINITIC_PAY_API_KEY,
    depositUrl: process.env.FINITIC_PAY_API_URL,
    returnUrl: process.env.FRONT_END_FIAT_DEPOSIT_URL,
  },
};
